What Is Socket Programming?
Think of two people talking on the phone.
One person is the server: they wait for calls.
The other is the client: they make the call.
The phone line is like the socket — it connects them.

Term	Meaning
IP Address	Like your home address on the internet (e.g., 192.168.1.1)
Port	Like a door number at your home (e.g., 8080)
Server	A program that waits for requests (e.g., a restaurant)
Client	A program that sends a request (e.g., a customer)
Socket	A connection pipe between client and server

Visualize It.
┌────────────┐           Socket (Connection)          ┌────────────┐
│  Server    │ <------------------------------------> │  Client    │
│ Listens on │         ↔ messages back & forth ↔      │ Sends msg  │
│  port 8080 │                                        │ Receives   │
└────────────┘                                        └────────────┘

Now Break Down Socket Programming into 5 Steps (Just Concepts)
Step	What You Do	Example
1	Create a socket	“Plug in the phone”
2	Bind to IP & Port	“Give the phone a number”
3	Listen	“Wait for a call”
4	Accept	“Pick up the phone when someone calls”
5	Communicate	“Talk: Send/Receive message”

Server Side:
-------------
1. socket()
2. bind()
3. listen()
4. accept()
5. recv() / send()
6. close()

Client Side:
-------------
1. socket()
2. connect()
3. send() / recv()
4. close()

C Functions:
Function	What It Does
socket()	Creates a socket
bind()	    Assigns IP address & port to the socket
listen()	Waits for clients
accept()	Accepts client connection
recv()	    Receives message from client
send()	    Sends message to client
close()	    Closes the socket

Step 1: socket() — Creating the Socket
What does it do?
It creates a virtual pipe to connect two devices.

socket() Syntax in C
int socket(int domain, int type, int protocol);
parameters:
Parameter	Meaning
domain	    Address family — use AF_INET for IPv4
type	    Communication type — use SOCK_STREAM for TCP
protocol	Usually 0 (let system choose default)

int sockfd = socket(AF_INET, SOCK_STREAM, 0);
sockfd is your socket file descriptor
If it returns -1, that means socket creation failed

Basic COde 

// Standard I/O functions like printf(), perror()
#include <stdio.h>
// For functions like exit()
#include <stdlib.h>
// For socket(), bind(), listen(), accept() functions and socket types (SOCK_STREAM etc.)
#include <sys/socket.h>
// For sockaddr_in structure, AF_INET, htons(), INADDR_ANY
#include <netinet/in.h>
// For close() to properly close sockets
#include <unistd.h>

int main() 
{
    int sockfd; // This will hold the file descriptor (an integer ID) for the socket

    // Create a socket using IPv4 (AF_INET), TCP (SOCK_STREAM), and default protocol (0)
    // Returns a socket file descriptor (sockfd) if successful, or -1 on failure
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    
    // Check if socket creation failed
    if (sockfd < 0) 
    {
        // perror prints a descriptive error message
        perror("Socket creation failed");

        // Exit the program with status 1 (error)
        exit(1);
    }

    // If socket creation succeeded, print its file descriptor
    printf("Socket created successfully! sockfd = %d\n", sockfd);

    // Close the socket to free resources
    close(sockfd);
    
    // Return 0 to indicate successful execution
    return(0);
}

output:
Socket created successfully! sockfd = 3

Create socket	socket(AF_INET, SOCK_STREAM, 0)
Check success	if return >= 0, it's successful
Socket FD	    Used in next steps (like bind(), connect(), etc.)

Header File	Why It is Included
stdio.h	For     input/output functions like printf() and perror()
stdlib.h	    For general utilities like exit()
sys/socket.h	Contains functions and constants for creating and managing sockets (socket(), AF_INET, SOCK_STREAM)
netinet/in.h	Defines Internet address family (struct sockaddr_in, INADDR_ANY, htons())
unistd.h	    Provides access to the close() function to close the socket

int sockfd;
Declares an integer variable sockfd to store the socket file descriptor.
It is like a file handle used to identify the socket for later operations.

sockfd = socket(AF_INET, SOCK_STREAM, 0);
socket() Function Breakdown:
int socket(int domain, int type, int protocol);

Parameter	Value Used	    Meaning
domain	    AF_INET	        Use IPv4 Internet protocol
type	    SOCK_STREAM	    TCP connection (reliable, connection-oriented)
protocol	0	            Default protocol for TCP

close(sockfd);
Closes the socket file descriptor.
Frees up the resources associated with it.

What This Code Does
This is a very minimal socket program. It:
Creates a TCP socket using IPv4.
Checks if the socket is created.
Prints a message.
Closes the socket.

//==================================================================================

Step 2: bind() — Assign IP Address & Port to Your Socket
What does it do?
It assigns your socket a specific IP address and port number so other devices know where to connect.

Analogy:
You got a phone (socket()), now you’re getting a phone number (bind()), so people can call you.

bind() Syntax in C
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

Parameters:
Parameter	Meaning
sockfd	    Your socket file descriptor
addr	    Structure holding IP + Port
addrlen	    Size of that structure

Structure Needed: sockaddr_in
To pass the address, we need to fill a structure called sockaddr_in:
struct sockaddr_in server_addr;

Fill it like this:
server_addr.sin_family = AF_INET;                // IPv4
server_addr.sin_port = htons(8080);              // Port 8080 (converted to network byte order)
server_addr.sin_addr.s_addr = INADDR_ANY;        // Listen on all available IPs
htons() = "Host TO Network Short" — converts port to correct format
INADDR_ANY = Accept connection on any IP assigned to the machine (e.g., 127.0.0.1, 192.168.x.x, etc.)

Full Code for socket() + bind() (Step 1 + 2)

// Header for input/output functions like printf() and perror()
#include <stdio.h>
// Header for utility functions like exit()
#include <stdlib.h>
// Header for memory operations like memset(), strlen()
#include <string.h>
// Header for POSIX system calls like close()
#include <unistd.h>
// Header for socket-related functions and constants like socket(), bind()
#include <sys/socket.h>
// Header for sockaddr_in structure and constants like INADDR_ANY
#include <netinet/in.h>

int main() {
    int sockfd;                          // Socket file descriptor
    struct sockaddr_in server_addr;      // Structure to hold server address information

    // 1. Create socket
    // socket(domain, type, protocol)
    // AF_INET      → IPv4
    // SOCK_STREAM  → TCP (connection-oriented)
    // 0            → Use default protocol for TCP
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        // If socket creation fails, print error and exit
        perror("Socket creation failed");
        exit(1);
    }
    printf("Socket created successfully.\n");

    // 2. Set up the server address structure

    // sin_family specifies the address family: AF_INET for IPv4
    server_addr.sin_family = AF_INET;

    // sin_port specifies the port number (8080 in this case)
    // htons() converts host byte order to network byte order (big-endian)
    server_addr.sin_port = htons(8080);

    // sin_addr.s_addr specifies the IP address
    // INADDR_ANY allows the socket to accept connections from any IP address
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Zero the rest of the struct (optional but recommended for portability)
    // sin_zero is an unused field used to pad the struct to the size of struct sockaddr
    memset(&(server_addr.sin_zero), 0, 8);

    // 3. Bind the socket to the specified IP and port
    // bind() links the socket with the address info in server_addr
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        // If bind fails, print error, close socket, and exit
        perror("Bind failed");
        close(sockfd);
        exit(1);
    }

    printf("Bind successful. Socket is now linked to port 8080.\n");

    // 4. Close the socket after use
    close(sockfd);

    return 0;
}

/*
WHAT THIS CODE DOES:

- Creates a TCP socket using IPv4.
- Prepares a sockaddr_in structure to specify the port (8080) and IP (any).
- Binds the socket to the port and IP address.
- Closes the socket after successful binding.

WHY EACH HEADER IS INCLUDED:

- <stdio.h>        → printf(), perror()
- <stdlib.h>       → exit()
- <string.h>       → memset() to clear structure memory
- <unistd.h>       → close() to close socket
- <sys/socket.h>   → socket(), bind(), and socket constants
- <netinet/in.h>   → sockaddr_in, INADDR_ANY, htons()

POTENTIAL NEXT STEPS FOR A FULL SERVER:

1. listen()    → Mark the socket as passive to accept connections
2. accept()    → Accept an incoming connection
3. recv()/send() or read()/write() → Handle communication with the client
4. Implement loop or multithreading for handling multiple clients
5. close()     → Close each accepted socket and eventually the server socket

ADDITIONAL HEADERS FOR ADVANCED USAGE:

- <arpa/inet.h> → For inet_ntoa(), inet_pton(), converting IP addresses
- <errno.h>     → For advanced error handling and debugging
- <signal.h>    → To handle signals like SIGINT for clean shutdown

*/

Summary
Step	Function	Purpose
1	    socket()	Creates a socket (like getting a phone)
2	    bind()	    Assigns IP + port (like getting a phone number)

Common Errors
Error	                            Meaning
Bind failed: Address already in use	Port 8080 is already being used (try another port like 9090)
Permission denied	                Port <1024 needs root (use port >1024 like 8080)

//====================================================================================================

Step 3: listen() — Tell the Socket to Start Listening
What does it do?
Once the server has a socket and a port (bind()), you tell it:
"Now start listening — wait for incoming calls (clients)."

Analogy:
You got a phone (socket()), got a number (bind()), and now you’re saying:
“I’m ready to take calls” — that’s what listen() does.

listen() Function in C
c
Copy code
int listen(int sockfd, int backlog);
Parameters:
Parameter	Description
sockfd	Your socket file descriptor
backlog	Max number of pending client connections to queue

Backlog: If it's 5, it can hold 5 clients waiting to be accepted.

// Header for standard input/output functions like printf(), perror()
#include <stdio.h>

// Header for utility functions like exit()
#include <stdlib.h>

// Header for memory operations like memset(), strlen()
#include <string.h>

// Header for POSIX system calls like close()
#include <unistd.h>

// Header for socket-related functions like socket(), bind(), listen()
#include <sys/socket.h>

// Header for internet address structures and constants like sockaddr_in, INADDR_ANY
#include <netinet/in.h>

int main() {
    int sockfd;                          // Socket file descriptor
    struct sockaddr_in server_addr;      // Struct to hold server address info

    // 1. Create a socket
    // socket(domain, type, protocol)
    // domain: AF_INET       → IPv4
    // type:   SOCK_STREAM   → TCP (connection-oriented)
    // proto:  0             → Use default protocol (TCP)
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        // If socket creation fails, print error and exit
        perror("Socket creation failed");
        exit(1);
    }
    printf("Socket created successfully.\n");

    // 2. Setup the server address structure
    server_addr.sin_family = AF_INET;             // Address family: IPv4
    server_addr.sin_port = htons(8080);           // Port number (host to network byte order)
    server_addr.sin_addr.s_addr = INADDR_ANY;     // Accept connections from any IP address
    memset(&(server_addr.sin_zero), 0, 8);        // Zero the remaining struct padding

    // 3. Bind the socket to the IP/port
    // bind() links the socket to the address structure
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(1);
    }
    printf("Bind successful.\n");

    // 4. Start listening for incoming connections
    // listen(sockfd, backlog)
    // backlog: number of pending connections that can be queued (here, 5)
    if (listen(sockfd, 5) < 0) {
        perror("Listen failed");
        close(sockfd);
        exit(1);
    }
    printf("Server is now listening on port 8080...\n");

    // Note: We're not accepting client connections in this example
    // For a full server, you'd call accept() here in a loop

    // 5. Close the socket after use
    close(sockfd);
    return 0;
}

/*
WHAT THIS CODE DOES:

- Creates a TCP socket using IPv4 (AF_INET, SOCK_STREAM)
- Sets up a sockaddr_in structure with port 8080 and any IP
- Binds the socket to the port and IP
- Starts listening for incoming TCP connections
- Closes the socket without accepting any client

WHY EACH HEADER IS INCLUDED:

- <stdio.h>        → For printf(), perror()
- <stdlib.h>       → For exit()
- <string.h>       → For memset() to zero the sockaddr_in struct
- <unistd.h>       → For close() to close socket descriptor
- <sys/socket.h>   → For socket(), bind(), listen(), and socket options
- <netinet/in.h>   → For sockaddr_in, htons(), INADDR_ANY

WHAT CAN BE ADDED NEXT (FOR A FULL TCP SERVER):

1. accept()       → Accept incoming client connections
2. read()/recv()  → Receive data from clients
3. write()/send() → Send data to clients
4. loop()         → Run accept in a loop to handle multiple clients
5. fork()/threads → Handle multiple clients concurrently
6. signal handling → Clean shutdown using signals like SIGINT

ADDITIONAL HEADERS (OPTIONAL):

- <arpa/inet.h>   → For inet_pton(), inet_ntoa() if using IP addresses as strings
- <errno.h>       → For accessing error numbers (used with perror or strerror)
- <sys/types.h>   → Sometimes used for socket types on some systems

NOTES:

- `htons()` converts the port number to network byte order (big-endian)
- `INADDR_ANY` means the server can receive connections on any of its IP addresses
- `sin_zero` is just padding to make `sockaddr_in` the same size as `sockaddr`
*/

Summary So Far
Step	Function	Purpose
1	    socket()	Create a socket
2	    bind()	    Assign IP + port to the socket
3	    listen()	Start listening for clients (queueing)







