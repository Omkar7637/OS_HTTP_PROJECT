Program Title: Simple TCP Server with Welcome Message and Continuous Communication

Code with Syntax Highlighting:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_size;
    char buffer[1024];
    char client_ip[INET_ADDRSTRLEN];

    // 1. Create TCP socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("Socket creation failed");
        exit(1);
    }

    // 2. Setup server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = INADDR_ANY;
    memset(&(server_addr.sin_zero), 0, 8);

    // 3. Bind
    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(1);
    }

    // 4. Listen
    listen(server_fd, 5);
    printf("Server listening on port 8080...\n");

    // 5. Accept connection
    addr_size = sizeof(client_addr);
    client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &addr_size);
    if (client_fd < 0) {
        perror("Accept failed");
        close(server_fd);
        exit(1);
    }

    inet_ntop(AF_INET, &(client_addr.sin_addr), client_ip, INET_ADDRSTRLEN);
    printf("Client connected from %s:%d\n", client_ip, ntohs(client_addr.sin_port));

    // Send welcome message
    char *welcome_msg = "Welcome to the server!\n";
    if (write(client_fd, welcome_msg, strlen(welcome_msg)) < 0) {
        perror("Write to client failed");
    }

    // Receive messages in a loop
    while (1) {
        memset(buffer, 0, sizeof(buffer));  // Clear buffer
        int bytes_received = recv(client_fd, buffer, sizeof(buffer), 0);
        if (bytes_received <= 0) {
            printf("Client disconnected or error occurred.\n");
            break;
        }
        printf("Client says: %s\n", buffer);
    }

    // 6. Close sockets
    close(client_fd);
    close(server_fd);

    return 0;
}
Explanation (Step-by-step):

Header Files:
stdio.h, stdlib.h, string.h: Standard C functions.
unistd.h: For read, write, close.
sys/socket.h, netinet/in.h, arpa/inet.h: Required for socket programming in Linux.

Socket Creation:
socket(AF_INET, SOCK_STREAM, 0): Creates a TCP socket (IPv4).

Server Address Setup:
sin_family = AF_INET: IPv4.
sin_port = htons(8080): Convert port to network byte order.
sin_addr.s_addr = INADDR_ANY: Accept connection from any interface.
memset: Clear unused fields of the struct.

Binding and Listening:
bind(): Attach socket to the IP/port.
listen(): Set socket to listen mode. Queue size = 5.

Accepting a Client:
accept(): Wait for client connection.
inet_ntop: Converts client’s IP to a readable string.

Task 2 – Send Welcome Message:
Immediately after a client connects, a welcome message is sent using write().

Task 1 – Loop for Receiving Client Messages:
Uses recv() in a loop to receive data from the client.
If client disconnects or error occurs, loop exits.

Closing Sockets:
Both server and client sockets are closed at the end.

Sample Output:
Server listening on port 8080...
Client connected from 127.0.0.1:58324
Client says: Hello Server
Client says: How are you?
Client disconnected or error occurred.