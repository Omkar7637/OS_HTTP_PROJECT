
009-Append_RTC_Time_SD_CARD_MODULE_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006648  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800696c  0800696c  0000796c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006974  08006974  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800697c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000807c  2**0
                  CONTENTS
 10 .bss          0000026c  2000007c  2000007c  0000807c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  0000807c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e424  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242b  00000000  00000000  000164d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00018900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0c  00000000  00000000  00019628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002370a  00000000  00000000  0001a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f9e  00000000  00000000  0003d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdde5  00000000  00000000  0004f6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d4c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eec  00000000  00000000  0011d504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  001213f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067c0 	.word	0x080067c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080067c0 	.word	0x080067c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <__io_putchar+0x20>)
 80005be:	f001 ffae 	bl	800251e <HAL_UART_Transmit>
    return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000110 	.word	0x20000110

080005d0 <LogRTCtoFile>:


void LogRTCtoFile(void)
{
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 80005d6:	af04      	add	r7, sp, #16
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    char buffer[64];
    UINT bw;

    if(f_mount(&fs, "", 1) != FR_OK) {
 80005d8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80005dc:	2201      	movs	r2, #1
 80005de:	493e      	ldr	r1, [pc, #248]	@ (80006d8 <LogRTCtoFile+0x108>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f907 	bl	80047f4 <f_mount>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <LogRTCtoFile+0x24>
        printf("SD mount failed!\r\n");
 80005ec:	483b      	ldr	r0, [pc, #236]	@ (80006dc <LogRTCtoFile+0x10c>)
 80005ee:	f005 f8ad 	bl	800574c <puts>
 80005f2:	e06c      	b.n	80006ce <LogRTCtoFile+0xfe>
        return;
    }

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	4838      	ldr	r0, [pc, #224]	@ (80006e0 <LogRTCtoFile+0x110>)
 80005fe:	f001 fd68 	bl	80020d2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000602:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	4835      	ldr	r0, [pc, #212]	@ (80006e0 <LogRTCtoFile+0x110>)
 800060c:	f001 fdbf 	bl	800218e <HAL_RTC_GetDate>

    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
            sDate.Date, sDate.Month, sDate.Year,
 8000610:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000614:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000618:	789b      	ldrb	r3, [r3, #2]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 800061a:	461d      	mov	r5, r3
            sDate.Date, sDate.Month, sDate.Year,
 800061c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000620:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000624:	785b      	ldrb	r3, [r3, #1]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000626:	461e      	mov	r6, r3
            sDate.Date, sDate.Month, sDate.Year,
 8000628:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800062c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000630:	78db      	ldrb	r3, [r3, #3]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000632:	461a      	mov	r2, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000634:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000638:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800063c:	781b      	ldrb	r3, [r3, #0]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 800063e:	4619      	mov	r1, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000640:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000644:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000648:	785b      	ldrb	r3, [r3, #1]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 800064a:	461c      	mov	r4, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds);
 800064c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000650:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000654:	789b      	ldrb	r3, [r3, #2]
    sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000656:	f107 0008 	add.w	r0, r7, #8
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	9402      	str	r4, [sp, #8]
 800065e:	9101      	str	r1, [sp, #4]
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	4633      	mov	r3, r6
 8000664:	462a      	mov	r2, r5
 8000666:	491f      	ldr	r1, [pc, #124]	@ (80006e4 <LogRTCtoFile+0x114>)
 8000668:	f005 f878 	bl	800575c <siprintf>

    if(f_open(&myFile, "log.txt", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 800066c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000670:	2212      	movs	r2, #18
 8000672:	491d      	ldr	r1, [pc, #116]	@ (80006e8 <LogRTCtoFile+0x118>)
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f903 	bl	8004880 <f_open>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d123      	bne.n	80006c8 <LogRTCtoFile+0xf8>
        f_lseek(&myFile, f_size(&myFile)); // append
 8000680:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000684:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f004 fccc 	bl	800502e <f_lseek>
        f_write(&myFile, buffer, strlen(buffer), &bw);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd98 	bl	80001d0 <strlen>
 80006a0:	4602      	mov	r2, r0
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	f107 0108 	add.w	r1, r7, #8
 80006a8:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80006ac:	f004 faa2 	bl	8004bf4 <f_write>
        f_close(&myFile);
 80006b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fc90 	bl	8004fda <f_close>
        printf("%s", buffer);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <LogRTCtoFile+0x11c>)
 80006c2:	f004 ffdb 	bl	800567c <iprintf>
 80006c6:	e002      	b.n	80006ce <LogRTCtoFile+0xfe>
    } else {
        printf("Failed to open file!\r\n");
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <LogRTCtoFile+0x120>)
 80006ca:	f005 f83f 	bl	800574c <puts>
    }
}
 80006ce:	f207 47c4 	addw	r7, r7, #1220	@ 0x4c4
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	080067d8 	.word	0x080067d8
 80006dc:	080067dc 	.word	0x080067dc
 80006e0:	20000098 	.word	0x20000098
 80006e4:	080067f0 	.word	0x080067f0
 80006e8:	0800681c 	.word	0x0800681c
 80006ec:	08006824 	.word	0x08006824
 80006f0:	08006828 	.word	0x08006828

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 80006fa:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fbbc 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f8a0 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f990 	bl	8000a28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000708:	f000 f92e 	bl	8000968 <MX_SPI1_Init>
  MX_RTC_Init();
 800070c:	f000 f906 	bl	800091c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f960 	bl	80009d4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000714:	f002 fabe 	bl	8002c94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  FATFS fs;
  FIL myFile;

  if(f_mount(&fs, "", 1) == FR_OK) {
 8000718:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800071c:	2201      	movs	r2, #1
 800071e:	4941      	ldr	r1, [pc, #260]	@ (8000824 <main+0x130>)
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f867 	bl	80047f4 <f_mount>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d103      	bne.n	8000734 <main+0x40>
      printf("SD mounted successfully!\r\n");
 800072c:	483e      	ldr	r0, [pc, #248]	@ (8000828 <main+0x134>)
 800072e:	f005 f80d 	bl	800574c <puts>
 8000732:	e002      	b.n	800073a <main+0x46>
  } else {
      printf("SD mount failed!\r\n");
 8000734:	483d      	ldr	r0, [pc, #244]	@ (800082c <main+0x138>)
 8000736:	f005 f809 	bl	800574c <puts>
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  char buffer[64];
  UINT bw;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800073a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	483b      	ldr	r0, [pc, #236]	@ (8000830 <main+0x13c>)
 8000744:	f001 fcc5 	bl	80020d2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000748:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4837      	ldr	r0, [pc, #220]	@ (8000830 <main+0x13c>)
 8000752:	f001 fd1c 	bl	800218e <HAL_RTC_GetDate>

  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
          sDate.Date, sDate.Month, sDate.Year,
 8000756:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800075a:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800075e:	789b      	ldrb	r3, [r3, #2]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000760:	461d      	mov	r5, r3
          sDate.Date, sDate.Month, sDate.Year,
 8000762:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000766:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800076a:	785b      	ldrb	r3, [r3, #1]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 800076c:	461e      	mov	r6, r3
          sDate.Date, sDate.Month, sDate.Year,
 800076e:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000772:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000776:	78db      	ldrb	r3, [r3, #3]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000778:	461a      	mov	r2, r3
          sTime.Hours, sTime.Minutes, sTime.Seconds);
 800077a:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800077e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8000782:	781b      	ldrb	r3, [r3, #0]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000784:	4619      	mov	r1, r3
          sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000786:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800078a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800078e:	785b      	ldrb	r3, [r3, #1]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 8000790:	461c      	mov	r4, r3
          sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000792:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000796:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800079a:	789b      	ldrb	r3, [r3, #2]
  sprintf(buffer, "Date: %02d-%02d-%02d Time: %02d:%02d:%02d\r\n",
 800079c:	f107 0008 	add.w	r0, r7, #8
 80007a0:	9303      	str	r3, [sp, #12]
 80007a2:	9402      	str	r4, [sp, #8]
 80007a4:	9101      	str	r1, [sp, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	4633      	mov	r3, r6
 80007aa:	462a      	mov	r2, r5
 80007ac:	4921      	ldr	r1, [pc, #132]	@ (8000834 <main+0x140>)
 80007ae:	f004 ffd5 	bl	800575c <siprintf>

  if(f_open(&myFile, "log.txt", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 80007b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007b6:	2212      	movs	r2, #18
 80007b8:	491f      	ldr	r1, [pc, #124]	@ (8000838 <main+0x144>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 f860 	bl	8004880 <f_open>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d123      	bne.n	800080e <main+0x11a>
      f_lseek(&myFile, f_size(&myFile)); // append
 80007c6:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80007ca:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fc29 	bl	800502e <f_lseek>
      f_write(&myFile, buffer, strlen(buffer), &bw);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4602      	mov	r2, r0
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	f107 0108 	add.w	r1, r7, #8
 80007ee:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80007f2:	f004 f9ff 	bl	8004bf4 <f_write>
      f_close(&myFile);
 80007f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fbed 	bl	8004fda <f_close>
      printf("%s", buffer);
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <main+0x148>)
 8000808:	f004 ff38 	bl	800567c <iprintf>
 800080c:	e002      	b.n	8000814 <main+0x120>
  } else {
      printf("Failed to open file!\r\n");
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <main+0x14c>)
 8000810:	f004 ff9c 	bl	800574c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    LogRTCtoFile(); // function containing the code above
 8000814:	f7ff fedc 	bl	80005d0 <LogRTCtoFile>
	    HAL_Delay(1000); // every 1 second
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f000 fb9e 	bl	8000f5c <HAL_Delay>
	    LogRTCtoFile(); // function containing the code above
 8000820:	bf00      	nop
 8000822:	e7f7      	b.n	8000814 <main+0x120>
 8000824:	080067d8 	.word	0x080067d8
 8000828:	08006840 	.word	0x08006840
 800082c:	080067dc 	.word	0x080067dc
 8000830:	20000098 	.word	0x20000098
 8000834:	080067f0 	.word	0x080067f0
 8000838:	0800681c 	.word	0x0800681c
 800083c:	08006824 	.word	0x08006824
 8000840:	08006828 	.word	0x08006828

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	@ 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 f87c 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <SystemClock_Config+0xd0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a28      	ldr	r2, [pc, #160]	@ (8000914 <SystemClock_Config+0xd0>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <SystemClock_Config+0xd4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a22      	ldr	r2, [pc, #136]	@ (8000918 <SystemClock_Config+0xd4>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008a0:	230a      	movs	r3, #10
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b8:	2308      	movs	r3, #8
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	@ 0xa8
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fe05 	bl	80014dc <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d8:	f000 f8d8 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2105      	movs	r1, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f866 	bl	80019cc <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000906:	f000 f8c1 	bl	8000a8c <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	@ 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_RTC_Init+0x44>)
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <MX_RTC_Init+0x48>)
 8000924:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_RTC_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_RTC_Init+0x44>)
 800092e:	227f      	movs	r2, #127	@ 0x7f
 8000930:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_RTC_Init+0x44>)
 8000934:	22ff      	movs	r2, #255	@ 0xff
 8000936:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_RTC_Init+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_RTC_Init+0x44>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_RTC_Init+0x44>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_RTC_Init+0x44>)
 800094c:	f001 fb40 	bl	8001fd0 <HAL_RTC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000956:	f000 f899 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000098 	.word	0x20000098
 8000964:	40002800 	.word	0x40002800

08000968 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_SPI1_Init+0x64>)
 800096e:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <MX_SPI1_Init+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000974:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000978:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_SPI1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_SPI1_Init+0x64>)
 8000994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000998:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_SPI1_Init+0x64>)
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009b4:	220a      	movs	r2, #10
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_SPI1_Init+0x64>)
 80009ba:	f001 fcd7 	bl	800236c <HAL_SPI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c4:	f000 f862 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000b8 	.word	0x200000b8
 80009d0:	40013000 	.word	0x40013000

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f001 fd37 	bl	800247e <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f839 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000110 	.word	0x20000110
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_GPIO_Init+0x5c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <MX_GPIO_Init+0x5c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <MX_GPIO_Init+0x5c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <MX_GPIO_Init+0x60>)
 8000a5e:	f000 fd23 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a62:	2310      	movs	r3, #16
 8000a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_GPIO_Init+0x60>)
 8000a78:	f000 fb7a 	bl	8001170 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fb16 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_RTC_MspInit+0x4c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d111      	bne.n	8000b2c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f978 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b22:	f7ff ffb3 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <HAL_RTC_MspInit+0x50>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40002800 	.word	0x40002800
 8000b38:	42470e3c 	.word	0x42470e3c

08000b3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_SPI_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b96:	23e0      	movs	r3, #224	@ 0xe0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_SPI_MspInit+0x8c>)
 8000bb2:	f000 fadd 	bl	8001170 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <HAL_UART_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c26:	230c      	movs	r3, #12
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_UART_MspInit+0x8c>)
 8000c42:	f000 fa95 	bl	8001170 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 f933 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e00a      	b.n	8000ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	60ba      	str	r2, [r7, #8]
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf0      	blt.n	8000ccc <_read+0x12>
  }

  return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e009      	b.n	8000d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc4c 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dbf1      	blt.n	8000d06 <_write+0x12>
  }
  return len;
 8000d22:	687b      	ldr	r3, [r7, #4]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_close>:

int _close(int file)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d54:	605a      	str	r2, [r3, #4]
  return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_isatty>:

int _isatty(int file)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f004 fe12 	bl	80059ec <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000158 	.word	0x20000158
 8000dfc:	200002e8 	.word	0x200002e8

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e28:	f7ff ffea 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f004 fdd1 	bl	80059f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fc4d 	bl	80006f4 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e68:	0800697c 	.word	0x0800697c
  ldr r2, =_sbss
 8000e6c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e70:	200002e8 	.word	0x200002e8

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f931 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdf4 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f93b 	bl	8001156 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f911 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000015c 	.word	0x2000015c

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000015c 	.word	0x2000015c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff47 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5c 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e16b      	b.n	8001464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 815a 	bne.w	800145e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b4 	beq.w	800145e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b60      	ldr	r3, [pc, #384]	@ (800147c <HAL_GPIO_Init+0x30c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a5f      	ldr	r2, [pc, #380]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a5b      	ldr	r2, [pc, #364]	@ (8001480 <HAL_GPIO_Init+0x310>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d02b      	beq.n	8001396 <HAL_GPIO_Init+0x226>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a51      	ldr	r2, [pc, #324]	@ (8001488 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x222>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a50      	ldr	r2, [pc, #320]	@ (800148c <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x21e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x21a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	@ (8001494 <HAL_GPIO_Init+0x324>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x216>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	@ (8001498 <HAL_GPIO_Init+0x328>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x212>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x20e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x20a>
 8001376:	2307      	movs	r3, #7
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137a:	2308      	movs	r3, #8
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x310>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae90 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021c00 	.word	0x40021c00
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e267      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d075      	beq.n	80015e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014fa:	4b88      	ldr	r3, [pc, #544]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b04      	cmp	r3, #4
 8001504:	d00c      	beq.n	8001520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	4b85      	ldr	r3, [pc, #532]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800150e:	2b08      	cmp	r3, #8
 8001510:	d112      	bne.n	8001538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001512:	4b82      	ldr	r3, [pc, #520]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800151e:	d10b      	bne.n	8001538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	4b7e      	ldr	r3, [pc, #504]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d05b      	beq.n	80015e4 <HAL_RCC_OscConfig+0x108>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d157      	bne.n	80015e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e242      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x74>
 8001542:	4b76      	ldr	r3, [pc, #472]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a75      	ldr	r2, [pc, #468]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0xb0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x98>
 800155a:	4b70      	ldr	r3, [pc, #448]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6f      	ldr	r2, [pc, #444]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b6d      	ldr	r3, [pc, #436]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6c      	ldr	r2, [pc, #432]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xb0>
 8001574:	4b69      	ldr	r3, [pc, #420]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a68      	ldr	r2, [pc, #416]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b66      	ldr	r3, [pc, #408]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fcd6 	bl	8000f44 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fcd2 	bl	8000f44 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e207      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0xc0>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fcc2 	bl	8000f44 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fcbe 	bl	8000f44 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1f3      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	4b51      	ldr	r3, [pc, #324]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0xe8>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d063      	beq.n	80016ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b47      	ldr	r3, [pc, #284]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001606:	2b08      	cmp	r3, #8
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160a:	4b44      	ldr	r3, [pc, #272]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x152>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1c7      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4937      	ldr	r1, [pc, #220]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e03a      	b.n	80016ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x244>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fc77 	bl	8000f44 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fc73 	bl	8000f44 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1a8      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4925      	ldr	r1, [pc, #148]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e015      	b.n	80016ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_RCC_OscConfig+0x244>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fc56 	bl	8000f44 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fc52 	bl	8000f44 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e187      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d036      	beq.n	8001734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d016      	beq.n	80016fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_RCC_OscConfig+0x248>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fc36 	bl	8000f44 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc32 	bl	8000f44 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e167      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_RCC_OscConfig+0x240>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x200>
 80016fa:	e01b      	b.n	8001734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_OscConfig+0x248>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fc1f 	bl	8000f44 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	e00e      	b.n	8001728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fc1b 	bl	8000f44 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d907      	bls.n	8001728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e150      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	42470000 	.word	0x42470000
 8001724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ea      	bne.n	800170a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b81      	ldr	r3, [pc, #516]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b7d      	ldr	r3, [pc, #500]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a7c      	ldr	r2, [pc, #496]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b7a      	ldr	r3, [pc, #488]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b77      	ldr	r3, [pc, #476]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4b74      	ldr	r3, [pc, #464]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a73      	ldr	r2, [pc, #460]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff fbdb 	bl	8000f44 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff fbd7 	bl	8000f44 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e10c      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <HAL_RCC_OscConfig+0x474>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2ea>
 80017b8:	4b64      	ldr	r3, [pc, #400]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a63      	ldr	r2, [pc, #396]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x324>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x30c>
 80017ce:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	4a5e      	ldr	r2, [pc, #376]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017da:	4b5c      	ldr	r3, [pc, #368]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	4a5b      	ldr	r2, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x324>
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a57      	ldr	r2, [pc, #348]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f4:	4b55      	ldr	r3, [pc, #340]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f8:	4a54      	ldr	r2, [pc, #336]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fb9c 	bl	8000f44 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fb98 	bl	8000f44 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0cb      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4b49      	ldr	r3, [pc, #292]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0ee      	beq.n	8001810 <HAL_RCC_OscConfig+0x334>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fb86 	bl	8000f44 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fb82 	bl	8000f44 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0b5      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ee      	bne.n	800183c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b39      	ldr	r3, [pc, #228]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a38      	ldr	r2, [pc, #224]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a1 	beq.w	80019bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d05c      	beq.n	8001940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d141      	bne.n	8001912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fb56 	bl	8000f44 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fb52 	bl	8000f44 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e087      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	491b      	ldr	r1, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb2b 	bl	8000f44 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fb27 	bl	8000f44 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e05c      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x416>
 8001910:	e054      	b.n	80019bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_RCC_OscConfig+0x478>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb14 	bl	8000f44 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fb10 	bl	8000f44 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e045      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_RCC_OscConfig+0x470>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x444>
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e038      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000
 8001954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x4ec>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d028      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d121      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800198e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cc      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b68      	ldr	r3, [pc, #416]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d90c      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b65      	ldr	r3, [pc, #404]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a58      	ldr	r2, [pc, #352]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d044      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e067      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4934      	ldr	r1, [pc, #208]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff fa42 	bl	8000f44 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff fa3e 	bl	8000f44 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d20c      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f821 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	490a      	ldr	r1, [pc, #40]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	5ccb      	ldrb	r3, [r1, r3]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f9a2 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	080068a0 	.word	0x080068a0
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b9c:	b094      	sub	sp, #80	@ 0x50
 8001b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb0:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d00d      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	f200 80e1 	bhi.w	8001d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x34>
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bca:	e0db      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4b73      	ldr	r3, [pc, #460]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bd0:	e0db      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bd2:	4b73      	ldr	r3, [pc, #460]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bd6:	e0d8      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001be0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bee:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0159      	lsls	r1, r3, #5
 8001c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1c:	0150      	lsls	r0, r2, #5
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4621      	mov	r1, r4
 8001c24:	1a51      	subs	r1, r2, r1
 8001c26:	6139      	str	r1, [r7, #16]
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	018b      	lsls	r3, r1, #6
 8001c40:	4651      	mov	r1, sl
 8001c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c46:	4651      	mov	r1, sl
 8001c48:	018a      	lsls	r2, r1, #6
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c50:	4659      	mov	r1, fp
 8001c52:	eb63 0901 	sbc.w	r9, r3, r1
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c6a:	4690      	mov	r8, r2
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	eb18 0303 	adds.w	r3, r8, r3
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	462b      	mov	r3, r5
 8001c78:	eb49 0303 	adc.w	r3, r9, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	024b      	lsls	r3, r1, #9
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c94:	4621      	mov	r1, r4
 8001c96:	024a      	lsls	r2, r1, #9
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca8:	f7fe faea 	bl	8000280 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb4:	e058      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cd0:	4642      	mov	r2, r8
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	0159      	lsls	r1, r3, #5
 8001cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce2:	0150      	lsls	r0, r2, #5
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4641      	mov	r1, r8
 8001cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cee:	4649      	mov	r1, r9
 8001cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d08:	ebb2 040a 	subs.w	r4, r2, sl
 8001d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	00eb      	lsls	r3, r5, #3
 8001d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1e:	00e2      	lsls	r2, r4, #3
 8001d20:	4614      	mov	r4, r2
 8001d22:	461d      	mov	r5, r3
 8001d24:	4643      	mov	r3, r8
 8001d26:	18e3      	adds	r3, r4, r3
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	eb45 0303 	adc.w	r3, r5, r3
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	028b      	lsls	r3, r1, #10
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d48:	4621      	mov	r1, r4
 8001d4a:	028a      	lsls	r2, r1, #10
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	61fa      	str	r2, [r7, #28]
 8001d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5c:	f7fe fa90 	bl	8000280 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3750      	adds	r7, #80	@ 0x50
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	@ (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	080068b0 	.word	0x080068b0

08001de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de8:	f7ff ffdc 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	@ (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080068b0 	.word	0x080068b0

08001e0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d035      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e34:	4b62      	ldr	r3, [pc, #392]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e3a:	f7ff f883 	bl	8000f44 <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e42:	f7ff f87f 	bl	8000f44 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0b0      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e54:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	019a      	lsls	r2, r3, #6
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	071b      	lsls	r3, r3, #28
 8001e6c:	4955      	ldr	r1, [pc, #340]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e74:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff f863 	bl	8000f44 <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e82:	f7ff f85f 	bl	8000f44 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e090      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e94:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8083 	beq.w	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b44      	ldr	r3, [pc, #272]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	4a43      	ldr	r2, [pc, #268]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebe:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001eca:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed6:	f7ff f835 	bl	8000f44 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7ff f831 	bl	8000f44 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e062      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001ef0:	4b35      	ldr	r3, [pc, #212]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d02f      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d028      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f24:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f30:	4a24      	ldr	r2, [pc, #144]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d114      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe ffff 	bl	8000f44 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fffb 	bl	8000f44 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e02a      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f78:	d10d      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8e:	490d      	ldr	r1, [pc, #52]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
 8001f94:	e005      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fa4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	4905      	ldr	r1, [pc, #20]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	42470068 	.word	0x42470068
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42470e40 	.word	0x42470e40

08001fd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e073      	b.n	80020ca <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7f5b      	ldrb	r3, [r3, #29]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fd78 	bl	8000ae8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d055      	beq.n	80020b8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	22ca      	movs	r2, #202	@ 0xca
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2253      	movs	r2, #83	@ 0x53
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f92b 	bl	8002278 <RTC_EnterInitMode>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12c      	bne.n	8002086 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800203a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800203e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f932 	bl	80022e6 <RTC_ExitInitMode>
 8002082:	4603      	mov	r3, r0
 8002084:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d110      	bne.n	80020ae <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	22ff      	movs	r2, #255	@ 0xff
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80020b6:	e001      	b.n	80020bc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002104:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002108:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	0d9b      	lsrs	r3, r3, #22
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11a      	bne.n	8002184 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8ec 	bl	8002330 <RTC_Bcd2ToByte>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f8e3 	bl	8002330 <RTC_Bcd2ToByte>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8da 	bl	8002330 <RTC_Bcd2ToByte>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80021ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	0b5b      	lsrs	r3, r3, #13
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d11a      	bne.n	8002222 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	78db      	ldrb	r3, [r3, #3]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f89d 	bl	8002330 <RTC_Bcd2ToByte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f894 	bl	8002330 <RTC_Bcd2ToByte>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f88b 	bl	8002330 <RTC_Bcd2ToByte>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <HAL_RTC_WaitForSynchro+0x48>)
 800223e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7fe fe80 	bl	8000f44 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002246:	e009      	b.n	800225c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002248:	f7fe fe7c 	bl	8000f44 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002256:	d901      	bls.n	800225c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e007      	b.n	800226c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ee      	beq.n	8002248 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	00017f5f 	.word	0x00017f5f

08002278 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d122      	bne.n	80022dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fe4d 	bl	8000f44 <HAL_GetTick>
 80022aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022ac:	e00c      	b.n	80022c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ae:	f7fe fe49 	bl	8000f44 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022bc:	d904      	bls.n	80022c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2204      	movs	r2, #4
 80022c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <RTC_EnterInitMode+0x64>
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d1e8      	bne.n	80022ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002300:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff8b 	bl	800222c <HAL_RTC_WaitForSynchro>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b2db      	uxtb	r3, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07b      	b.n	8002476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800238e:	d009      	beq.n	80023a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
 8002396:	e005      	b.n	80023a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fbbc 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002428:	ea42 0103 	orr.w	r1, r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0104 	and.w	r1, r3, #4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f003 0210 	and.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e042      	b.n	8002516 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe fb91 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2224      	movs	r2, #36	@ 0x24
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f972 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	@ 0x28
 8002522:	af02      	add	r7, sp, #8
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	d175      	bne.n	800262a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_UART_Transmit+0x2c>
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06e      	b.n	800262c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	@ 0x21
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255c:	f7fe fcf2 	bl	8000f44 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002576:	d108      	bne.n	800258a <HAL_UART_Transmit+0x6c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e003      	b.n	8002592 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002592:	e02e      	b.n	80025f2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f848 	bl	8002634 <UART_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e03a      	b.n	800262c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	3302      	adds	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	e007      	b.n	80025e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1cb      	bne.n	8002594 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2200      	movs	r2, #0
 8002604:	2140      	movs	r1, #64	@ 0x40
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f814 	bl	8002634 <UART_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e006      	b.n	800262c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002644:	e03b      	b.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d037      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7fe fc79 	bl	8000f44 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <UART_WaitOnFlagUntilTimeout+0x30>
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e03a      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d023      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b80      	cmp	r3, #128	@ 0x80
 800267a:	d020      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d01d      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b08      	cmp	r3, #8
 800268e:	d116      	bne.n	80026be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f81d 	bl	80026e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2208      	movs	r2, #8
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d0b4      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b095      	sub	sp, #84	@ 0x54
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800270e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800271c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	61fb      	str	r3, [r7, #28]
   return(result);
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002744:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	2b01      	cmp	r3, #1
 800275c:	d119      	bne.n	8002792 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	60bb      	str	r3, [r7, #8]
   return(result);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f023 0310 	bic.w	r3, r3, #16
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800277e:	61ba      	str	r2, [r7, #24]
 8002780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002782:	6979      	ldr	r1, [r7, #20]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	613b      	str	r3, [r7, #16]
   return(result);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e5      	bne.n	800275e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027a0:	bf00      	nop
 80027a2:	3754      	adds	r7, #84	@ 0x54
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b0c0      	sub	sp, #256	@ 0x100
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	ea40 0301 	orr.w	r3, r0, r1
 80027d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002804:	f021 010c 	bic.w	r1, r1, #12
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002812:	430b      	orrs	r3, r1
 8002814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	6999      	ldr	r1, [r3, #24]
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	ea40 0301 	orr.w	r3, r0, r1
 8002832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a78 <UART_SetConfig+0x2cc>)
 800283c:	429a      	cmp	r2, r3
 800283e:	d005      	beq.n	800284c <UART_SetConfig+0xa0>
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b8d      	ldr	r3, [pc, #564]	@ (8002a7c <UART_SetConfig+0x2d0>)
 8002848:	429a      	cmp	r2, r3
 800284a:	d104      	bne.n	8002856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7ff faca 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8002850:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002854:	e003      	b.n	800285e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002856:	f7ff fab1 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800285a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002868:	f040 810c 	bne.w	8002a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800286c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002876:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800287a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	1891      	adds	r1, r2, r2
 8002884:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002886:	415b      	adcs	r3, r3
 8002888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800288a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800288e:	4621      	mov	r1, r4
 8002890:	eb12 0801 	adds.w	r8, r2, r1
 8002894:	4629      	mov	r1, r5
 8002896:	eb43 0901 	adc.w	r9, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb18 0303 	adds.w	r3, r8, r3
 80028b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028bc:	462b      	mov	r3, r5
 80028be:	eb49 0303 	adc.w	r3, r9, r3
 80028c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028da:	460b      	mov	r3, r1
 80028dc:	18db      	adds	r3, r3, r3
 80028de:	653b      	str	r3, [r7, #80]	@ 0x50
 80028e0:	4613      	mov	r3, r2
 80028e2:	eb42 0303 	adc.w	r3, r2, r3
 80028e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80028e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028f0:	f7fd fcc6 	bl	8000280 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4b61      	ldr	r3, [pc, #388]	@ (8002a80 <UART_SetConfig+0x2d4>)
 80028fa:	fba3 2302 	umull	r2, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	011c      	lsls	r4, r3, #4
 8002902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800290c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002914:	4642      	mov	r2, r8
 8002916:	464b      	mov	r3, r9
 8002918:	1891      	adds	r1, r2, r2
 800291a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800291c:	415b      	adcs	r3, r3
 800291e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002924:	4641      	mov	r1, r8
 8002926:	eb12 0a01 	adds.w	sl, r2, r1
 800292a:	4649      	mov	r1, r9
 800292c:	eb43 0b01 	adc.w	fp, r3, r1
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800293c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002944:	4692      	mov	sl, r2
 8002946:	469b      	mov	fp, r3
 8002948:	4643      	mov	r3, r8
 800294a:	eb1a 0303 	adds.w	r3, sl, r3
 800294e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002952:	464b      	mov	r3, r9
 8002954:	eb4b 0303 	adc.w	r3, fp, r3
 8002958:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002968:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800296c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002970:	460b      	mov	r3, r1
 8002972:	18db      	adds	r3, r3, r3
 8002974:	643b      	str	r3, [r7, #64]	@ 0x40
 8002976:	4613      	mov	r3, r2
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	647b      	str	r3, [r7, #68]	@ 0x44
 800297e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002986:	f7fd fc7b 	bl	8000280 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4611      	mov	r1, r2
 8002990:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <UART_SetConfig+0x2d4>)
 8002992:	fba3 2301 	umull	r2, r3, r3, r1
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2264      	movs	r2, #100	@ 0x64
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	1acb      	subs	r3, r1, r3
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <UART_SetConfig+0x2d4>)
 80029a8:	fba3 2302 	umull	r2, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029b4:	441c      	add	r4, r3
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029d0:	415b      	adcs	r3, r3
 80029d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a42:	f7fd fc1d 	bl	8000280 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <UART_SetConfig+0x2d4>)
 8002a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2164      	movs	r1, #100	@ 0x64
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	3332      	adds	r3, #50	@ 0x32
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <UART_SetConfig+0x2d4>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4422      	add	r2, r4
 8002a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a74:	e106      	b.n	8002c84 <UART_SetConfig+0x4d8>
 8002a76:	bf00      	nop
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a96:	4642      	mov	r2, r8
 8002a98:	464b      	mov	r3, r9
 8002a9a:	1891      	adds	r1, r2, r2
 8002a9c:	6239      	str	r1, [r7, #32]
 8002a9e:	415b      	adcs	r3, r3
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	1854      	adds	r4, r2, r1
 8002aaa:	4649      	mov	r1, r9
 8002aac:	eb43 0501 	adc.w	r5, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	00eb      	lsls	r3, r5, #3
 8002aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abe:	00e2      	lsls	r2, r4, #3
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	18e3      	adds	r3, r4, r3
 8002ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002acc:	464b      	mov	r3, r9
 8002ace:	eb45 0303 	adc.w	r3, r5, r3
 8002ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002af2:	4629      	mov	r1, r5
 8002af4:	008b      	lsls	r3, r1, #2
 8002af6:	4621      	mov	r1, r4
 8002af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afc:	4621      	mov	r1, r4
 8002afe:	008a      	lsls	r2, r1, #2
 8002b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b04:	f7fd fbbc 	bl	8000280 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b60      	ldr	r3, [pc, #384]	@ (8002c90 <UART_SetConfig+0x4e4>)
 8002b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	1891      	adds	r1, r2, r2
 8002b2e:	61b9      	str	r1, [r7, #24]
 8002b30:	415b      	adcs	r3, r3
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b38:	4641      	mov	r1, r8
 8002b3a:	1851      	adds	r1, r2, r1
 8002b3c:	6139      	str	r1, [r7, #16]
 8002b3e:	4649      	mov	r1, r9
 8002b40:	414b      	adcs	r3, r1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b50:	4659      	mov	r1, fp
 8002b52:	00cb      	lsls	r3, r1, #3
 8002b54:	4651      	mov	r1, sl
 8002b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	00ca      	lsls	r2, r1, #3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	4642      	mov	r2, r8
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b6c:	464b      	mov	r3, r9
 8002b6e:	460a      	mov	r2, r1
 8002b70:	eb42 0303 	adc.w	r3, r2, r3
 8002b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b90:	4649      	mov	r1, r9
 8002b92:	008b      	lsls	r3, r1, #2
 8002b94:	4641      	mov	r1, r8
 8002b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	008a      	lsls	r2, r1, #2
 8002b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ba2:	f7fd fb6d 	bl	8000280 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <UART_SetConfig+0x4e4>)
 8002bae:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2264      	movs	r2, #100	@ 0x64
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	1acb      	subs	r3, r1, r3
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	3332      	adds	r3, #50	@ 0x32
 8002bc0:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <UART_SetConfig+0x4e4>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bcc:	441c      	add	r4, r3
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	415b      	adcs	r3, r3
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bec:	4641      	mov	r1, r8
 8002bee:	1851      	adds	r1, r2, r1
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	414b      	adcs	r3, r1
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c04:	4659      	mov	r1, fp
 8002c06:	00cb      	lsls	r3, r1, #3
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0e:	4651      	mov	r1, sl
 8002c10:	00ca      	lsls	r2, r1, #3
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c1e:	464b      	mov	r3, r9
 8002c20:	460a      	mov	r2, r1
 8002c22:	eb42 0303 	adc.w	r3, r2, r3
 8002c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c32:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c40:	4649      	mov	r1, r9
 8002c42:	008b      	lsls	r3, r1, #2
 8002c44:	4641      	mov	r1, r8
 8002c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	008a      	lsls	r2, r1, #2
 8002c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c52:	f7fd fb15 	bl	8000280 <__aeabi_uldivmod>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <UART_SetConfig+0x4e4>)
 8002c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2164      	movs	r1, #100	@ 0x64
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	@ 0x32
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <UART_SetConfig+0x4e4>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4422      	add	r2, r4
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	bf00      	nop
 8002c86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c90:	51eb851f 	.word	0x51eb851f

08002c94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002c98:	4904      	ldr	r1, [pc, #16]	@ (8002cac <MX_FATFS_Init+0x18>)
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_FATFS_Init+0x1c>)
 8002c9c:	f002 fc1c 	bl	80054d8 <FATFS_LinkDriver>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <MX_FATFS_Init+0x20>)
 8002ca6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000164 	.word	0x20000164
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	20000160 	.word	0x20000160

08002cb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002cbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <USER_initialize+0x24>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <USER_initialize+0x24>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000009 	.word	0x20000009

08002cf0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <USER_status+0x24>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <USER_status+0x24>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000009 	.word	0x20000009

08002d18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4603      	mov	r3, r0
 8002d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002d28:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002d46:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	603a      	str	r2, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	460b      	mov	r3, r1
 8002d62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
    return res;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <disk_status+0x30>)
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	79fa      	ldrb	r2, [r7, #7]
 8002d90:	4905      	ldr	r1, [pc, #20]	@ (8002da8 <disk_status+0x30>)
 8002d92:	440a      	add	r2, r1
 8002d94:	7a12      	ldrb	r2, [r2, #8]
 8002d96:	4610      	mov	r0, r2
 8002d98:	4798      	blx	r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000190 	.word	0x20000190

08002dac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <disk_initialize+0x4c>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d114      	bne.n	8002dee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <disk_initialize+0x4c>)
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	4909      	ldr	r1, [pc, #36]	@ (8002df8 <disk_initialize+0x4c>)
 8002dd4:	440a      	add	r2, r1
 8002dd6:	7a12      	ldrb	r2, [r2, #8]
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a03      	ldr	r2, [pc, #12]	@ (8002df8 <disk_initialize+0x4c>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000190 	.word	0x20000190

08002dfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <disk_read+0x3c>)
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	689c      	ldr	r4, [r3, #8]
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <disk_read+0x3c>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	7a18      	ldrb	r0, [r3, #8]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	47a0      	blx	r4
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000190 	.word	0x20000190

08002e3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <disk_write+0x3c>)
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	68dc      	ldr	r4, [r3, #12]
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	@ (8002e78 <disk_write+0x3c>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	7a18      	ldrb	r0, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	47a0      	blx	r4
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000190 	.word	0x20000190

08002e7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	603a      	str	r2, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <disk_ioctl+0x38>)
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	79fa      	ldrb	r2, [r7, #7]
 8002e9a:	4906      	ldr	r1, [pc, #24]	@ (8002eb4 <disk_ioctl+0x38>)
 8002e9c:	440a      	add	r2, r1
 8002e9e:	7a10      	ldrb	r0, [r2, #8]
 8002ea0:	79b9      	ldrb	r1, [r7, #6]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4798      	blx	r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  return res;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000190 	.word	0x20000190

08002eb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002ec8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002edc:	89fb      	ldrh	r3, [r7, #14]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3303      	adds	r3, #3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	3202      	adds	r2, #2
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	3201      	adds	r2, #1
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
	return rv;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	1c53      	adds	r3, r2, #1
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1c59      	adds	r1, r3, #1
 8002fe2:	6179      	str	r1, [r7, #20]
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f1      	bne.n	8002fd8 <mem_cpy+0x1a>
	}
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	617a      	str	r2, [r7, #20]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f3      	bne.n	8003010 <mem_set+0x10>
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003036:	b480      	push	{r7}
 8003038:	b089      	sub	sp, #36	@ 0x24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	61ba      	str	r2, [r7, #24]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	1acb      	subs	r3, r1, r3
 8003062:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <mem_cmp+0x40>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0eb      	beq.n	800304e <mem_cmp+0x18>

	return r;
 8003076:	697b      	ldr	r3, [r7, #20]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3724      	adds	r7, #36	@ 0x24
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800308e:	e002      	b.n	8003096 <chk_chr+0x12>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3301      	adds	r3, #1
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <chk_chr+0x26>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d1f2      	bne.n	8003090 <chk_chr+0xc>
	return *str;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e029      	b.n	8003124 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80030d0:	4a27      	ldr	r2, [pc, #156]	@ (8003170 <chk_lock+0xb4>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4413      	add	r3, r2
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80030de:	4a24      	ldr	r2, [pc, #144]	@ (8003170 <chk_lock+0xb4>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d116      	bne.n	800311e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80030f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003170 <chk_lock+0xb4>)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003100:	429a      	cmp	r2, r3
 8003102:	d10c      	bne.n	800311e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003104:	4a1a      	ldr	r2, [pc, #104]	@ (8003170 <chk_lock+0xb4>)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	3308      	adds	r3, #8
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003114:	429a      	cmp	r2, r3
 8003116:	d102      	bne.n	800311e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003118:	e007      	b.n	800312a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d9d2      	bls.n	80030d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d109      	bne.n	8003144 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <chk_lock+0x80>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d101      	bne.n	8003140 <chk_lock+0x84>
 800313c:	2300      	movs	r3, #0
 800313e:	e010      	b.n	8003162 <chk_lock+0xa6>
 8003140:	2312      	movs	r3, #18
 8003142:	e00e      	b.n	8003162 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <chk_lock+0xa0>
 800314a:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <chk_lock+0xb4>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	330c      	adds	r3, #12
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800315a:	d101      	bne.n	8003160 <chk_lock+0xa4>
 800315c:	2310      	movs	r3, #16
 800315e:	e000      	b.n	8003162 <chk_lock+0xa6>
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000170 	.word	0x20000170

08003174 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e002      	b.n	8003186 <enq_lock+0x12>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3301      	adds	r3, #1
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d806      	bhi.n	800319a <enq_lock+0x26>
 800318c:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <enq_lock+0x40>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000170 	.word	0x20000170

080031b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e01f      	b.n	8003208 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80031c8:	4a41      	ldr	r2, [pc, #260]	@ (80032d0 <inc_lock+0x118>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d113      	bne.n	8003202 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80031da:	4a3d      	ldr	r2, [pc, #244]	@ (80032d0 <inc_lock+0x118>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d109      	bne.n	8003202 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80031ee:	4a38      	ldr	r2, [pc, #224]	@ (80032d0 <inc_lock+0x118>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	3308      	adds	r3, #8
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80031fe:	429a      	cmp	r2, r3
 8003200:	d006      	beq.n	8003210 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d9dc      	bls.n	80031c8 <inc_lock+0x10>
 800320e:	e000      	b.n	8003212 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003210:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d132      	bne.n	800327e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e002      	b.n	8003224 <inc_lock+0x6c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d806      	bhi.n	8003238 <inc_lock+0x80>
 800322a:	4a29      	ldr	r2, [pc, #164]	@ (80032d0 <inc_lock+0x118>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f2      	bne.n	800321e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d101      	bne.n	8003242 <inc_lock+0x8a>
 800323e:	2300      	movs	r3, #0
 8003240:	e040      	b.n	80032c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4922      	ldr	r1, [pc, #136]	@ (80032d0 <inc_lock+0x118>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	440b      	add	r3, r1
 800324e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	491e      	ldr	r1, [pc, #120]	@ (80032d0 <inc_lock+0x118>)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	440b      	add	r3, r1
 800325c:	3304      	adds	r3, #4
 800325e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	491a      	ldr	r1, [pc, #104]	@ (80032d0 <inc_lock+0x118>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	440b      	add	r3, r1
 800326c:	3308      	adds	r3, #8
 800326e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003270:	4a17      	ldr	r2, [pc, #92]	@ (80032d0 <inc_lock+0x118>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	330c      	adds	r3, #12
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <inc_lock+0xe0>
 8003284:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <inc_lock+0x118>)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4413      	add	r3, r2
 800328c:	330c      	adds	r3, #12
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <inc_lock+0xe0>
 8003294:	2300      	movs	r3, #0
 8003296:	e015      	b.n	80032c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <inc_lock+0xf8>
 800329e:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <inc_lock+0x118>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4413      	add	r3, r2
 80032a6:	330c      	adds	r3, #12
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	e001      	b.n	80032b4 <inc_lock+0xfc>
 80032b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032b4:	4906      	ldr	r1, [pc, #24]	@ (80032d0 <inc_lock+0x118>)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	440b      	add	r3, r1
 80032bc:	330c      	adds	r3, #12
 80032be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	20000170 	.word	0x20000170

080032d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d825      	bhi.n	8003334 <dec_lock+0x60>
		n = Files[i].ctr;
 80032e8:	4a17      	ldr	r2, [pc, #92]	@ (8003348 <dec_lock+0x74>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	330c      	adds	r3, #12
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fc:	d101      	bne.n	8003302 <dec_lock+0x2e>
 80032fe:	2300      	movs	r3, #0
 8003300:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <dec_lock+0x3a>
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	3b01      	subs	r3, #1
 800330c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800330e:	4a0e      	ldr	r2, [pc, #56]	@ (8003348 <dec_lock+0x74>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	330c      	adds	r3, #12
 8003318:	89fa      	ldrh	r2, [r7, #14]
 800331a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <dec_lock+0x5a>
 8003322:	4a09      	ldr	r2, [pc, #36]	@ (8003348 <dec_lock+0x74>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	737b      	strb	r3, [r7, #13]
 8003332:	e001      	b.n	8003338 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003334:	2302      	movs	r3, #2
 8003336:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003338:	7b7b      	ldrb	r3, [r7, #13]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000170 	.word	0x20000170

0800334c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e010      	b.n	800337c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800335a:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <clear_lock+0x44>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d105      	bne.n	8003376 <clear_lock+0x2a>
 800336a:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <clear_lock+0x44>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3301      	adds	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d9eb      	bls.n	800335a <clear_lock+0xe>
	}
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	20000170 	.word	0x20000170

08003394 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	78db      	ldrb	r3, [r3, #3]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d034      	beq.n	8003412 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7858      	ldrb	r0, [r3, #1]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80033b8:	2301      	movs	r3, #1
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	f7ff fd3e 	bl	8002e3c <disk_write>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e022      	b.n	8003412 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d217      	bcs.n	8003412 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	789b      	ldrb	r3, [r3, #2]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e010      	b.n	800340c <sync_window+0x78>
					wsect += fs->fsize;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7858      	ldrb	r0, [r3, #1]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80033fe:	2301      	movs	r3, #1
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	f7ff fd1b 	bl	8002e3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3b01      	subs	r3, #1
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d8eb      	bhi.n	80033ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d01b      	beq.n	800346c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffad 	bl	8003394 <sync_window>
 800343a:	4603      	mov	r3, r0
 800343c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d113      	bne.n	800346c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7858      	ldrb	r0, [r3, #1]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800344e:	2301      	movs	r3, #1
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	f7ff fcd3 	bl	8002dfc <disk_read>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
 8003460:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff87 	bl	8003394 <sync_window>
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d158      	bne.n	8003542 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d148      	bne.n	800352a <sync_fs+0xb2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d144      	bne.n	800352a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3330      	adds	r3, #48	@ 0x30
 80034a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fda8 	bl	8003000 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3330      	adds	r3, #48	@ 0x30
 80034b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80034b8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fd37 	bl	8002f30 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3330      	adds	r3, #48	@ 0x30
 80034c6:	4921      	ldr	r1, [pc, #132]	@ (800354c <sync_fs+0xd4>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fd4c 	bl	8002f66 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3330      	adds	r3, #48	@ 0x30
 80034d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80034d6:	491e      	ldr	r1, [pc, #120]	@ (8003550 <sync_fs+0xd8>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fd44 	bl	8002f66 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3330      	adds	r3, #48	@ 0x30
 80034e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f7ff fd3a 	bl	8002f66 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3330      	adds	r3, #48	@ 0x30
 80034f6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f7ff fd30 	bl	8002f66 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7858      	ldrb	r0, [r3, #1]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351e:	2301      	movs	r3, #1
 8003520:	f7ff fc8c 	bl	8002e3c <disk_write>
			fs->fsi_flag = 0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fca2 	bl	8002e7c <disk_ioctl>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <sync_fs+0xca>
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	41615252 	.word	0x41615252
 8003550:	61417272 	.word	0x61417272

08003554 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3b02      	subs	r3, #2
 8003562:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	3b02      	subs	r3, #2
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d301      	bcc.n	8003574 <clust2sect+0x20>
 8003570:	2300      	movs	r3, #0
 8003572:	e008      	b.n	8003586 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	895b      	ldrh	r3, [r3, #10]
 8003578:	461a      	mov	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	fb03 f202 	mul.w	r2, r3, r2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	4413      	add	r3, r2
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d904      	bls.n	80035b2 <get_fat+0x20>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80035b2:	2301      	movs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e08e      	b.n	80036d6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d061      	beq.n	800368a <get_fat+0xf8>
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	dc7b      	bgt.n	80036c2 <get_fat+0x130>
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <get_fat+0x42>
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d041      	beq.n	8003656 <get_fat+0xc4>
 80035d2:	e076      	b.n	80036c2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0a5b      	lsrs	r3, r3, #9
 80035ea:	4413      	add	r3, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	6938      	ldr	r0, [r7, #16]
 80035f0:	f7ff ff14 	bl	800341c <move_window>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d166      	bne.n	80036c8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	60fa      	str	r2, [r7, #12]
 8003600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800360c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	0a5b      	lsrs	r3, r3, #9
 8003616:	4413      	add	r3, r2
 8003618:	4619      	mov	r1, r3
 800361a:	6938      	ldr	r0, [r7, #16]
 800361c:	f7ff fefe 	bl	800341c <move_window>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d152      	bne.n	80036cc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <get_fat+0xba>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	e002      	b.n	8003652 <get_fat+0xc0>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003652:	617b      	str	r3, [r7, #20]
			break;
 8003654:	e03f      	b.n	80036d6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	4413      	add	r3, r2
 8003660:	4619      	mov	r1, r3
 8003662:	6938      	ldr	r0, [r7, #16]
 8003664:	f7ff feda 	bl	800341c <move_window>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d130      	bne.n	80036d0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800367c:	4413      	add	r3, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fc1a 	bl	8002eb8 <ld_word>
 8003684:	4603      	mov	r3, r0
 8003686:	617b      	str	r3, [r7, #20]
			break;
 8003688:	e025      	b.n	80036d6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	09db      	lsrs	r3, r3, #7
 8003692:	4413      	add	r3, r2
 8003694:	4619      	mov	r1, r3
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f7ff fec0 	bl	800341c <move_window>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80036b0:	4413      	add	r3, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fc19 	bl	8002eea <ld_dword>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80036be:	617b      	str	r3, [r7, #20]
			break;
 80036c0:	e009      	b.n	80036d6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80036c2:	2301      	movs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e006      	b.n	80036d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80036d4:	bf00      	nop
		}
	}

	return val;
 80036d6:	697b      	ldr	r3, [r7, #20]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80036ec:	2302      	movs	r3, #2
 80036ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	f240 80d9 	bls.w	80038aa <put_fat+0x1ca>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	f080 80d3 	bcs.w	80038aa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b03      	cmp	r3, #3
 800370a:	f000 8096 	beq.w	800383a <put_fat+0x15a>
 800370e:	2b03      	cmp	r3, #3
 8003710:	f300 80cb 	bgt.w	80038aa <put_fat+0x1ca>
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <put_fat+0x3e>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d06e      	beq.n	80037fa <put_fat+0x11a>
 800371c:	e0c5      	b.n	80038aa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	0a5b      	lsrs	r3, r3, #9
 8003734:	4413      	add	r3, r2
 8003736:	4619      	mov	r1, r3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fe6f 	bl	800341c <move_window>
 800373e:	4603      	mov	r3, r0
 8003740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 80a9 	bne.w	800389c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	61b9      	str	r1, [r7, #24]
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	4413      	add	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <put_fat+0xa4>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b25b      	sxtb	r3, r3
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	b25a      	sxtb	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	b25b      	sxtb	r3, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	b25b      	sxtb	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	b25b      	sxtb	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e001      	b.n	8003788 <put_fat+0xa8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	0a5b      	lsrs	r3, r3, #9
 800379a:	4413      	add	r3, r2
 800379c:	4619      	mov	r1, r3
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fe3c 	bl	800341c <move_window>
 80037a4:	4603      	mov	r3, r0
 80037a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d178      	bne.n	80038a0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	4413      	add	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <put_fat+0xf0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e00e      	b.n	80037ee <put_fat+0x10e>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	f023 030f 	bic.w	r3, r3, #15
 80037da:	b25a      	sxtb	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	4313      	orrs	r3, r2
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	70da      	strb	r2, [r3, #3]
			break;
 80037f8:	e057      	b.n	80038aa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	4413      	add	r3, r2
 8003804:	4619      	mov	r1, r3
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fe08 	bl	800341c <move_window>
 800380c:	4603      	mov	r3, r0
 800380e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003810:	7ffb      	ldrb	r3, [r7, #31]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d146      	bne.n	80038a4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003824:	4413      	add	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	b292      	uxth	r2, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fb7f 	bl	8002f30 <st_word>
			fs->wflag = 1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	70da      	strb	r2, [r3, #3]
			break;
 8003838:	e037      	b.n	80038aa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	09db      	lsrs	r3, r3, #7
 8003842:	4413      	add	r3, r2
 8003844:	4619      	mov	r1, r3
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fde8 	bl	800341c <move_window>
 800384c:	4603      	mov	r3, r0
 800384e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003850:	7ffb      	ldrb	r3, [r7, #31]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d128      	bne.n	80038a8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800386a:	4413      	add	r3, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fb3c 	bl	8002eea <ld_dword>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003878:	4323      	orrs	r3, r4
 800387a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800388a:	4413      	add	r3, r2
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fb69 	bl	8002f66 <st_dword>
			fs->wflag = 1;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	70da      	strb	r2, [r3, #3]
			break;
 800389a:	e006      	b.n	80038aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800389c:	bf00      	nop
 800389e:	e004      	b.n	80038aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80038a8:	bf00      	nop
		}
	}
	return res;
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3724      	adds	r7, #36	@ 0x24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}

080038b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d904      	bls.n	80038da <remove_chain+0x26>
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d301      	bcc.n	80038de <remove_chain+0x2a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e04b      	b.n	8003976 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	69b8      	ldr	r0, [r7, #24]
 80038ec:	f7ff fef8 	bl	80036e0 <put_fat>
 80038f0:	4603      	mov	r3, r0
 80038f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80038f4:	7ffb      	ldrb	r3, [r7, #31]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <remove_chain+0x4a>
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
 80038fc:	e03b      	b.n	8003976 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fe46 	bl	8003592 <get_fat>
 8003906:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d031      	beq.n	8003972 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <remove_chain+0x64>
 8003914:	2302      	movs	r3, #2
 8003916:	e02e      	b.n	8003976 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d101      	bne.n	8003924 <remove_chain+0x70>
 8003920:	2301      	movs	r3, #1
 8003922:	e028      	b.n	8003976 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003924:	2200      	movs	r2, #0
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	69b8      	ldr	r0, [r7, #24]
 800392a:	f7ff fed9 	bl	80036e0 <put_fat>
 800392e:	4603      	mov	r3, r0
 8003930:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003932:	7ffb      	ldrb	r3, [r7, #31]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <remove_chain+0x88>
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	e01c      	b.n	8003976 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	3b02      	subs	r3, #2
 8003946:	429a      	cmp	r2, r3
 8003948:	d20b      	bcs.n	8003962 <remove_chain+0xae>
			fs->free_clst++;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d3c6      	bcc.n	80038fe <remove_chain+0x4a>
 8003970:	e000      	b.n	8003974 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003972:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b088      	sub	sp, #32
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <create_chain+0x2c>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d31b      	bcc.n	80039e2 <create_chain+0x64>
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e018      	b.n	80039e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fded 	bl	8003592 <get_fat>
 80039b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d801      	bhi.n	80039c4 <create_chain+0x46>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e070      	b.n	8003aa6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d101      	bne.n	80039d0 <create_chain+0x52>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	e06a      	b.n	8003aa6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d201      	bcs.n	80039de <create_chain+0x60>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	e063      	b.n	8003aa6 <create_chain+0x128>
		scl = clst;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d307      	bcc.n	8003a06 <create_chain+0x88>
				ncl = 2;
 80039f6:	2302      	movs	r3, #2
 80039f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d901      	bls.n	8003a06 <create_chain+0x88>
 8003a02:	2300      	movs	r3, #0
 8003a04:	e04f      	b.n	8003aa6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fdc2 	bl	8003592 <get_fat>
 8003a0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00e      	beq.n	8003a34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d003      	beq.n	8003a24 <create_chain+0xa6>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d101      	bne.n	8003a28 <create_chain+0xaa>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	e03e      	b.n	8003aa6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1da      	bne.n	80039e6 <create_chain+0x68>
 8003a30:	2300      	movs	r3, #0
 8003a32:	e038      	b.n	8003aa6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003a34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	6938      	ldr	r0, [r7, #16]
 8003a3e:	f7ff fe4f 	bl	80036e0 <put_fat>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <create_chain+0xe2>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	6938      	ldr	r0, [r7, #16]
 8003a58:	f7ff fe42 	bl	80036e0 <put_fat>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <create_chain+0x116>
		fs->last_clst = ncl;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	3b02      	subs	r3, #2
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d804      	bhi.n	8003a84 <create_chain+0x106>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	711a      	strb	r2, [r3, #4]
 8003a92:	e007      	b.n	8003aa4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d102      	bne.n	8003aa0 <create_chain+0x122>
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e000      	b.n	8003aa2 <create_chain+0x124>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003aa4:	69fb      	ldr	r3, [r7, #28]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	8952      	ldrh	r2, [r2, #10]
 8003ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	613a      	str	r2, [r7, #16]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <clmt_clust+0x3a>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e010      	b.n	8003b0a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d307      	bcc.n	8003b00 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3304      	adds	r3, #4
 8003afc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003afe:	e7e9      	b.n	8003ad4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003b00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4413      	add	r3, r2
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b2c:	d204      	bcs.n	8003b38 <dir_sdi+0x22>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <dir_sdi+0x26>
		return FR_INT_ERR;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e063      	b.n	8003c04 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <dir_sdi+0x46>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d902      	bls.n	8003b5c <dir_sdi+0x46>
		clst = fs->dirbase;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10c      	bne.n	8003b7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	8912      	ldrh	r2, [r2, #8]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d301      	bcc.n	8003b72 <dir_sdi+0x5c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e048      	b.n	8003c04 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	61da      	str	r2, [r3, #28]
 8003b7a:	e029      	b.n	8003bd0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	895b      	ldrh	r3, [r3, #10]
 8003b80:	025b      	lsls	r3, r3, #9
 8003b82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003b84:	e019      	b.n	8003bba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fd01 	bl	8003592 <get_fat>
 8003b90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d101      	bne.n	8003b9e <dir_sdi+0x88>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e032      	b.n	8003c04 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d904      	bls.n	8003bae <dir_sdi+0x98>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d301      	bcc.n	8003bb2 <dir_sdi+0x9c>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e028      	b.n	8003c04 <dir_sdi+0xee>
			ofs -= csz;
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d2e1      	bcs.n	8003b86 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	6938      	ldr	r0, [r7, #16]
 8003bc6:	f7ff fcc5 	bl	8003554 <clust2sect>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <dir_sdi+0xcc>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e010      	b.n	8003c04 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	0a5b      	lsrs	r3, r3, #9
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	3320      	adds	r3, #32
 8003c22:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <dir_next+0x28>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c32:	d301      	bcc.n	8003c38 <dir_next+0x2c>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e0aa      	b.n	8003d8e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 8098 	bne.w	8003d74 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	8912      	ldrh	r2, [r2, #8]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f0c0 8088 	bcc.w	8003d74 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e08f      	b.n	8003d8e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	8952      	ldrh	r2, [r2, #10]
 8003c76:	3a01      	subs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d17a      	bne.n	8003d74 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7ff fc83 	bl	8003592 <get_fat>
 8003c8c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d801      	bhi.n	8003c98 <dir_next+0x8c>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e07a      	b.n	8003d8e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d101      	bne.n	8003ca4 <dir_next+0x98>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e074      	b.n	8003d8e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d358      	bcc.n	8003d60 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e067      	b.n	8003d8e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7ff fe59 	bl	800397e <create_chain>
 8003ccc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <dir_next+0xcc>
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	e05a      	b.n	8003d8e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <dir_next+0xd6>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e055      	b.n	8003d8e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d101      	bne.n	8003cee <dir_next+0xe2>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e04f      	b.n	8003d8e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff fb50 	bl	8003394 <sync_window>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <dir_next+0xf2>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e047      	b.n	8003d8e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3330      	adds	r3, #48	@ 0x30
 8003d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff f979 	bl	8003000 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fc1d 	bl	8003554 <clust2sect>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d20:	e012      	b.n	8003d48 <dir_next+0x13c>
						fs->wflag = 1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fb33 	bl	8003394 <sync_window>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <dir_next+0x12c>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e02a      	b.n	8003d8e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	895b      	ldrh	r3, [r3, #10]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d3e6      	bcc.n	8003d22 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fbf3 	bl	8003554 <clust2sect>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	441a      	add	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003da6:	2100      	movs	r1, #0
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff feb4 	bl	8003b16 <dir_sdi>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d12b      	bne.n	8003e10 <dir_alloc+0x7a>
		n = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fb2a 	bl	800341c <move_window>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11d      	bne.n	8003e0e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2be5      	cmp	r3, #229	@ 0xe5
 8003dda:	d004      	beq.n	8003de6 <dir_alloc+0x50>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d107      	bne.n	8003df6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3301      	adds	r3, #1
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d102      	bne.n	8003dfa <dir_alloc+0x64>
 8003df4:	e00c      	b.n	8003e10 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff05 	bl	8003c0c <dir_next>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0d7      	beq.n	8003dbc <dir_alloc+0x26>
 8003e0c:	e000      	b.n	8003e10 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003e0e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d101      	bne.n	8003e1a <dir_alloc+0x84>
 8003e16:	2307      	movs	r3, #7
 8003e18:	75fb      	strb	r3, [r7, #23]
	return res;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	331a      	adds	r3, #26
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f840 	bl	8002eb8 <ld_word>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d109      	bne.n	8003e58 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f835 	bl	8002eb8 <ld_word>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	331a      	adds	r3, #26
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	b292      	uxth	r2, r2
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f859 	bl	8002f30 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d109      	bne.n	8003e9a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f103 0214 	add.w	r2, r3, #20
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7ff f84b 	bl	8002f30 <st_word>
	}
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fe2f 	bl	8003b16 <dir_sdi>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <dir_find+0x24>
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	e03e      	b.n	8003f44 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f7ff faa5 	bl	800341c <move_window>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d12f      	bne.n	8003f3c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <dir_find+0x4e>
 8003eea:	2304      	movs	r3, #4
 8003eec:	75fb      	strb	r3, [r7, #23]
 8003eee:	e028      	b.n	8003f42 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	330b      	adds	r3, #11
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	330b      	adds	r3, #11
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <dir_find+0x86>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a18      	ldr	r0, [r3, #32]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	@ 0x24
 8003f1a:	220b      	movs	r2, #11
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff f88a 	bl	8003036 <mem_cmp>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003f28:	2100      	movs	r1, #0
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fe6e 	bl	8003c0c <dir_next>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c5      	beq.n	8003ec6 <dir_find+0x24>
 8003f3a:	e002      	b.n	8003f42 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f40:	bf00      	nop

	return res;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff1a 	bl	8003d96 <dir_alloc>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11c      	bne.n	8003fa6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	4619      	mov	r1, r3
 8003f72:	68b8      	ldr	r0, [r7, #8]
 8003f74:	f7ff fa52 	bl	800341c <move_window>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d111      	bne.n	8003fa6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	2220      	movs	r2, #32
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f838 	bl	8003000 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a18      	ldr	r0, [r3, #32]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3324      	adds	r3, #36	@ 0x24
 8003f98:	220b      	movs	r2, #11
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f7ff f80f 	bl	8002fbe <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3324      	adds	r3, #36	@ 0x24
 8003fc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003fc6:	220b      	movs	r2, #11
 8003fc8:	2120      	movs	r1, #32
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f7ff f818 	bl	8003000 <mem_set>
	si = i = 0; ni = 8;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	2308      	movs	r3, #8
 8003fda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	61fa      	str	r2, [r7, #28]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003fea:	7efb      	ldrb	r3, [r7, #27]
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d94e      	bls.n	800408e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003ff0:	7efb      	ldrb	r3, [r7, #27]
 8003ff2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ff4:	d006      	beq.n	8004004 <create_name+0x54>
 8003ff6:	7efb      	ldrb	r3, [r7, #27]
 8003ff8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003ffa:	d110      	bne.n	800401e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003ffc:	e002      	b.n	8004004 <create_name+0x54>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b2f      	cmp	r3, #47	@ 0x2f
 800400e:	d0f6      	beq.n	8003ffe <create_name+0x4e>
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b5c      	cmp	r3, #92	@ 0x5c
 800401a:	d0f0      	beq.n	8003ffe <create_name+0x4e>
			break;
 800401c:	e038      	b.n	8004090 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800401e:	7efb      	ldrb	r3, [r7, #27]
 8004020:	2b2e      	cmp	r3, #46	@ 0x2e
 8004022:	d003      	beq.n	800402c <create_name+0x7c>
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	d30c      	bcc.n	8004046 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b0b      	cmp	r3, #11
 8004030:	d002      	beq.n	8004038 <create_name+0x88>
 8004032:	7efb      	ldrb	r3, [r7, #27]
 8004034:	2b2e      	cmp	r3, #46	@ 0x2e
 8004036:	d001      	beq.n	800403c <create_name+0x8c>
 8004038:	2306      	movs	r3, #6
 800403a:	e044      	b.n	80040c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800403c:	2308      	movs	r3, #8
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	230b      	movs	r3, #11
 8004042:	617b      	str	r3, [r7, #20]
			continue;
 8004044:	e022      	b.n	800408c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004046:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800404a:	2b00      	cmp	r3, #0
 800404c:	da04      	bge.n	8004058 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800404e:	7efb      	ldrb	r3, [r7, #27]
 8004050:	3b80      	subs	r3, #128	@ 0x80
 8004052:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <create_name+0x120>)
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004058:	7efb      	ldrb	r3, [r7, #27]
 800405a:	4619      	mov	r1, r3
 800405c:	481d      	ldr	r0, [pc, #116]	@ (80040d4 <create_name+0x124>)
 800405e:	f7ff f811 	bl	8003084 <chk_chr>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <create_name+0xbc>
 8004068:	2306      	movs	r3, #6
 800406a:	e02c      	b.n	80040c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800406c:	7efb      	ldrb	r3, [r7, #27]
 800406e:	2b60      	cmp	r3, #96	@ 0x60
 8004070:	d905      	bls.n	800407e <create_name+0xce>
 8004072:	7efb      	ldrb	r3, [r7, #27]
 8004074:	2b7a      	cmp	r3, #122	@ 0x7a
 8004076:	d802      	bhi.n	800407e <create_name+0xce>
 8004078:	7efb      	ldrb	r3, [r7, #27]
 800407a:	3b20      	subs	r3, #32
 800407c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	613a      	str	r2, [r7, #16]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	4413      	add	r3, r2
 8004088:	7efa      	ldrb	r2, [r7, #27]
 800408a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800408c:	e7a6      	b.n	8003fdc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800408e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	441a      	add	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <create_name+0xf4>
 80040a0:	2306      	movs	r3, #6
 80040a2:	e010      	b.n	80040c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2be5      	cmp	r3, #229	@ 0xe5
 80040aa:	d102      	bne.n	80040b2 <create_name+0x102>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2205      	movs	r2, #5
 80040b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80040b2:	7efb      	ldrb	r3, [r7, #27]
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d801      	bhi.n	80040bc <create_name+0x10c>
 80040b8:	2204      	movs	r2, #4
 80040ba:	e000      	b.n	80040be <create_name+0x10e>
 80040bc:	2200      	movs	r2, #0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	330b      	adds	r3, #11
 80040c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80040c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	080068b8 	.word	0x080068b8
 80040d4:	0800685c 	.word	0x0800685c

080040d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80040ec:	e002      	b.n	80040f4 <follow_path+0x1c>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80040fa:	d0f8      	beq.n	80040ee <follow_path+0x16>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b5c      	cmp	r3, #92	@ 0x5c
 8004102:	d0f4      	beq.n	80040ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b1f      	cmp	r3, #31
 8004110:	d80a      	bhi.n	8004128 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2280      	movs	r2, #128	@ 0x80
 8004116:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800411a:	2100      	movs	r1, #0
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fcfa 	bl	8003b16 <dir_sdi>
 8004122:	4603      	mov	r3, r0
 8004124:	75fb      	strb	r3, [r7, #23]
 8004126:	e043      	b.n	80041b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004128:	463b      	mov	r3, r7
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff3f 	bl	8003fb0 <create_name>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d134      	bne.n	80041a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff feb0 	bl	8003ea2 <dir_find>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800414c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d127      	bne.n	80041aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d122      	bne.n	80041aa <follow_path+0xd2>
 8004164:	2305      	movs	r3, #5
 8004166:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004168:	e01f      	b.n	80041aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11c      	bne.n	80041ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	799b      	ldrb	r3, [r3, #6]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004180:	2305      	movs	r3, #5
 8004182:	75fb      	strb	r3, [r7, #23]
 8004184:	e014      	b.n	80041b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	4413      	add	r3, r2
 8004196:	4619      	mov	r1, r3
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff fe43 	bl	8003e24 <ld_clust>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80041a4:	e7c0      	b.n	8004128 <follow_path+0x50>
			if (res != FR_OK) break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <follow_path+0xd8>
				break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041ae:	bf00      	nop
			}
		}
	}

	return res;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d031      	beq.n	8004234 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e002      	b.n	80041de <get_ldnumber+0x24>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d903      	bls.n	80041ee <get_ldnumber+0x34>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80041ec:	d1f4      	bne.n	80041d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80041f4:	d11c      	bne.n	8004230 <get_ldnumber+0x76>
			tp = *path;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	60fa      	str	r2, [r7, #12]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	3b30      	subs	r3, #48	@ 0x30
 8004206:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b09      	cmp	r3, #9
 800420c:	d80e      	bhi.n	800422c <get_ldnumber+0x72>
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	429a      	cmp	r2, r3
 8004214:	d10a      	bne.n	800422c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <get_ldnumber+0x72>
					vol = (int)i;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3301      	adds	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	e002      	b.n	8004236 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004234:	693b      	ldr	r3, [r7, #16]
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	70da      	strb	r2, [r3, #3]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800425c:	6839      	ldr	r1, [r7, #0]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff f8dc 	bl	800341c <move_window>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <check_fs+0x2a>
 800426a:	2304      	movs	r3, #4
 800426c:	e038      	b.n	80042e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3330      	adds	r3, #48	@ 0x30
 8004272:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fe1e 	bl	8002eb8 <ld_word>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <check_fs+0x48>
 8004288:	2303      	movs	r3, #3
 800428a:	e029      	b.n	80042e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004292:	2be9      	cmp	r3, #233	@ 0xe9
 8004294:	d009      	beq.n	80042aa <check_fs+0x66>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800429c:	2beb      	cmp	r3, #235	@ 0xeb
 800429e:	d11e      	bne.n	80042de <check_fs+0x9a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80042a6:	2b90      	cmp	r3, #144	@ 0x90
 80042a8:	d119      	bne.n	80042de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3330      	adds	r3, #48	@ 0x30
 80042ae:	3336      	adds	r3, #54	@ 0x36
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fe1a 	bl	8002eea <ld_dword>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042bc:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <check_fs+0xa4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <check_fs+0x82>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e00c      	b.n	80042e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3330      	adds	r3, #48	@ 0x30
 80042ca:	3352      	adds	r3, #82	@ 0x52
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fe0c 	bl	8002eea <ld_dword>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a05      	ldr	r2, [pc, #20]	@ (80042ec <check_fs+0xa8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <check_fs+0x9a>
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80042de:	2302      	movs	r3, #2
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00544146 	.word	0x00544146
 80042ec:	33544146 	.word	0x33544146

080042f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b096      	sub	sp, #88	@ 0x58
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff58 	bl	80041ba <get_ldnumber>
 800430a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800430c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	da01      	bge.n	8004316 <find_volume+0x26>
 8004312:	230b      	movs	r3, #11
 8004314:	e22d      	b.n	8004772 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004316:	4aa1      	ldr	r2, [pc, #644]	@ (800459c <find_volume+0x2ac>)
 8004318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <find_volume+0x3a>
 8004326:	230c      	movs	r3, #12
 8004328:	e223      	b.n	8004772 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800432e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fd17 	bl	8002d78 <disk_status>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004350:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10c      	bne.n	8004376 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <find_volume+0x82>
 8004362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800436e:	230a      	movs	r3, #10
 8004370:	e1ff      	b.n	8004772 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004372:	2300      	movs	r3, #0
 8004374:	e1fd      	b.n	8004772 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800437c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004382:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fd0f 	bl	8002dac <disk_initialize>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004394:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1e6      	b.n	8004772 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <find_volume+0xca>
 80043aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80043b6:	230a      	movs	r3, #10
 80043b8:	e1db      	b.n	8004772 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80043be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043c2:	f7ff ff3f 	bl	8004244 <check_fs>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80043cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d149      	bne.n	8004468 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d8:	e01e      	b.n	8004418 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80043e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80043e8:	4413      	add	r3, r2
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	3304      	adds	r3, #4
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <find_volume+0x114>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	3308      	adds	r3, #8
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fd75 	bl	8002eea <ld_dword>
 8004400:	4602      	mov	r2, r0
 8004402:	e000      	b.n	8004406 <find_volume+0x116>
 8004404:	2200      	movs	r2, #0
 8004406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	3358      	adds	r3, #88	@ 0x58
 800440c:	443b      	add	r3, r7
 800440e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004414:	3301      	adds	r3, #1
 8004416:	643b      	str	r3, [r7, #64]	@ 0x40
 8004418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441a:	2b03      	cmp	r3, #3
 800441c:	d9dd      	bls.n	80043da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800441e:	2300      	movs	r3, #0
 8004420:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <find_volume+0x13e>
 8004428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800442a:	3b01      	subs	r3, #1
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3358      	adds	r3, #88	@ 0x58
 8004434:	443b      	add	r3, r7
 8004436:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800443c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <find_volume+0x15e>
 8004442:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004444:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004446:	f7ff fefd 	bl	8004244 <check_fs>
 800444a:	4603      	mov	r3, r0
 800444c:	e000      	b.n	8004450 <find_volume+0x160>
 800444e:	2303      	movs	r3, #3
 8004450:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004458:	2b01      	cmp	r3, #1
 800445a:	d905      	bls.n	8004468 <find_volume+0x178>
 800445c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445e:	3301      	adds	r3, #1
 8004460:	643b      	str	r3, [r7, #64]	@ 0x40
 8004462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004464:	2b03      	cmp	r3, #3
 8004466:	d9e2      	bls.n	800442e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004468:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800446c:	2b04      	cmp	r3, #4
 800446e:	d101      	bne.n	8004474 <find_volume+0x184>
 8004470:	2301      	movs	r3, #1
 8004472:	e17e      	b.n	8004772 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004478:	2b01      	cmp	r3, #1
 800447a:	d901      	bls.n	8004480 <find_volume+0x190>
 800447c:	230d      	movs	r3, #13
 800447e:	e178      	b.n	8004772 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	3330      	adds	r3, #48	@ 0x30
 8004484:	330b      	adds	r3, #11
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fd16 	bl	8002eb8 <ld_word>
 800448c:	4603      	mov	r3, r0
 800448e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004492:	d001      	beq.n	8004498 <find_volume+0x1a8>
 8004494:	230d      	movs	r3, #13
 8004496:	e16c      	b.n	8004772 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449a:	3330      	adds	r3, #48	@ 0x30
 800449c:	3316      	adds	r3, #22
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fd0a 	bl	8002eb8 <ld_word>
 80044a4:	4603      	mov	r3, r0
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80044a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <find_volume+0x1cc>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	3330      	adds	r3, #48	@ 0x30
 80044b2:	3324      	adds	r3, #36	@ 0x24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fd18 	bl	8002eea <ld_dword>
 80044ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	789b      	ldrb	r3, [r3, #2]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d005      	beq.n	80044e0 <find_volume+0x1f0>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	789b      	ldrb	r3, [r3, #2]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d001      	beq.n	80044e0 <find_volume+0x1f0>
 80044dc:	230d      	movs	r3, #13
 80044de:	e148      	b.n	8004772 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	789b      	ldrb	r3, [r3, #2]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	461a      	mov	r2, r3
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80044fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fc:	895b      	ldrh	r3, [r3, #10]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <find_volume+0x224>
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	895b      	ldrh	r3, [r3, #10]
 8004506:	461a      	mov	r2, r3
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	895b      	ldrh	r3, [r3, #10]
 800450c:	3b01      	subs	r3, #1
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <find_volume+0x228>
 8004514:	230d      	movs	r3, #13
 8004516:	e12c      	b.n	8004772 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451a:	3330      	adds	r3, #48	@ 0x30
 800451c:	3311      	adds	r3, #17
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fcca 	bl	8002eb8 <ld_word>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	891b      	ldrh	r3, [r3, #8]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <find_volume+0x24e>
 800453a:	230d      	movs	r3, #13
 800453c:	e119      	b.n	8004772 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	3330      	adds	r3, #48	@ 0x30
 8004542:	3313      	adds	r3, #19
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fcb7 	bl	8002eb8 <ld_word>
 800454a:	4603      	mov	r3, r0
 800454c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800454e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <find_volume+0x272>
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	3330      	adds	r3, #48	@ 0x30
 8004558:	3320      	adds	r3, #32
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fcc5 	bl	8002eea <ld_dword>
 8004560:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004564:	3330      	adds	r3, #48	@ 0x30
 8004566:	330e      	adds	r3, #14
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fca5 	bl	8002eb8 <ld_word>
 800456e:	4603      	mov	r3, r0
 8004570:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004572:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <find_volume+0x28c>
 8004578:	230d      	movs	r3, #13
 800457a:	e0fa      	b.n	8004772 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800457c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800457e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004580:	4413      	add	r3, r2
 8004582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004584:	8912      	ldrh	r2, [r2, #8]
 8004586:	0912      	lsrs	r2, r2, #4
 8004588:	b292      	uxth	r2, r2
 800458a:	4413      	add	r3, r2
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800458e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	429a      	cmp	r2, r3
 8004594:	d204      	bcs.n	80045a0 <find_volume+0x2b0>
 8004596:	230d      	movs	r3, #13
 8004598:	e0eb      	b.n	8004772 <find_volume+0x482>
 800459a:	bf00      	nop
 800459c:	20000168 	.word	0x20000168
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80045a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045a8:	8952      	ldrh	r2, [r2, #10]
 80045aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <find_volume+0x2ca>
 80045b6:	230d      	movs	r3, #13
 80045b8:	e0db      	b.n	8004772 <find_volume+0x482>
		fmt = FS_FAT32;
 80045ba:	2303      	movs	r3, #3
 80045bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d802      	bhi.n	80045d0 <find_volume+0x2e0>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <find_volume+0x2f0>
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80045f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f2:	441a      	add	r2, r3
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80045f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	441a      	add	r2, r3
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004602:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004606:	2b03      	cmp	r3, #3
 8004608:	d11e      	bne.n	8004648 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	3330      	adds	r3, #48	@ 0x30
 800460e:	332a      	adds	r3, #42	@ 0x2a
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe fc51 	bl	8002eb8 <ld_word>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <find_volume+0x330>
 800461c:	230d      	movs	r3, #13
 800461e:	e0a8      	b.n	8004772 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	891b      	ldrh	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <find_volume+0x33c>
 8004628:	230d      	movs	r3, #13
 800462a:	e0a2      	b.n	8004772 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	3330      	adds	r3, #48	@ 0x30
 8004630:	332c      	adds	r3, #44	@ 0x2c
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fc59 	bl	8002eea <ld_dword>
 8004638:	4602      	mov	r2, r0
 800463a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	647b      	str	r3, [r7, #68]	@ 0x44
 8004646:	e01f      	b.n	8004688 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	891b      	ldrh	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <find_volume+0x364>
 8004650:	230d      	movs	r3, #13
 8004652:	e08e      	b.n	8004772 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465a:	441a      	add	r2, r3
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004664:	2b02      	cmp	r3, #2
 8004666:	d103      	bne.n	8004670 <find_volume+0x380>
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	e00a      	b.n	8004686 <find_volume+0x396>
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	085a      	lsrs	r2, r3, #1
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004686:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800468e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004692:	0a5b      	lsrs	r3, r3, #9
 8004694:	429a      	cmp	r2, r3
 8004696:	d201      	bcs.n	800469c <find_volume+0x3ac>
 8004698:	230d      	movs	r3, #13
 800469a:	e06a      	b.n	8004772 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	f04f 32ff 	mov.w	r2, #4294967295
 80046a2:	611a      	str	r2, [r3, #16]
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80046ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ae:	2280      	movs	r2, #128	@ 0x80
 80046b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80046b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d149      	bne.n	800474e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	3330      	adds	r3, #48	@ 0x30
 80046be:	3330      	adds	r3, #48	@ 0x30
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fbf9 	bl	8002eb8 <ld_word>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d140      	bne.n	800474e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80046cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ce:	3301      	adds	r3, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046d4:	f7fe fea2 	bl	800341c <move_window>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d137      	bne.n	800474e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2200      	movs	r2, #0
 80046e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	3330      	adds	r3, #48	@ 0x30
 80046e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fbe3 	bl	8002eb8 <ld_word>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d127      	bne.n	800474e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	3330      	adds	r3, #48	@ 0x30
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fbf1 	bl	8002eea <ld_dword>
 8004708:	4603      	mov	r3, r0
 800470a:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <find_volume+0x48c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d11e      	bne.n	800474e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	3330      	adds	r3, #48	@ 0x30
 8004714:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe fbe6 	bl	8002eea <ld_dword>
 800471e:	4603      	mov	r3, r0
 8004720:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <find_volume+0x490>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	3330      	adds	r3, #48	@ 0x30
 800472a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fbdb 	bl	8002eea <ld_dword>
 8004734:	4602      	mov	r2, r0
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	3330      	adds	r3, #48	@ 0x30
 800473e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fbd1 	bl	8002eea <ld_dword>
 8004748:	4602      	mov	r2, r0
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004754:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004756:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <find_volume+0x494>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <find_volume+0x494>)
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <find_volume+0x494>)
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800476a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800476c:	f7fe fdee 	bl	800334c <clear_lock>
#endif
	return FR_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3758      	adds	r7, #88	@ 0x58
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	41615252 	.word	0x41615252
 8004780:	61417272 	.word	0x61417272
 8004784:	2000016c 	.word	0x2000016c

08004788 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004792:	2309      	movs	r3, #9
 8004794:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01c      	beq.n	80047d6 <validate+0x4e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d018      	beq.n	80047d6 <validate+0x4e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <validate+0x4e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	889a      	ldrh	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	88db      	ldrh	r3, [r3, #6]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d10c      	bne.n	80047d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fad8 	bl	8002d78 <disk_status>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <validate+0x4e>
			res = FR_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <validate+0x5a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	e000      	b.n	80047e4 <validate+0x5c>
 80047e2:	2300      	movs	r3, #0
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	6013      	str	r3, [r2, #0]
	return res;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fcd5 	bl	80041ba <get_ldnumber>
 8004810:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da01      	bge.n	800481c <f_mount+0x28>
 8004818:	230b      	movs	r3, #11
 800481a:	e02b      	b.n	8004874 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800481c:	4a17      	ldr	r2, [pc, #92]	@ (800487c <f_mount+0x88>)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800482c:	69b8      	ldr	r0, [r7, #24]
 800482e:	f7fe fd8d 	bl	800334c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	490d      	ldr	r1, [pc, #52]	@ (800487c <f_mount+0x88>)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <f_mount+0x66>
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <f_mount+0x6a>
 800485a:	2300      	movs	r3, #0
 800485c:	e00a      	b.n	8004874 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800485e:	f107 010c 	add.w	r1, r7, #12
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	2200      	movs	r2, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fd41 	bl	80042f0 <find_volume>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000168 	.word	0x20000168

08004880 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b098      	sub	sp, #96	@ 0x60
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <f_open+0x18>
 8004894:	2309      	movs	r3, #9
 8004896:	e1a9      	b.n	8004bec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80048a0:	79fa      	ldrb	r2, [r7, #7]
 80048a2:	f107 0110 	add.w	r1, r7, #16
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fd20 	bl	80042f0 <find_volume>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80048b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 818d 	bne.w	8004bda <f_open+0x35a>
		dj.obj.fs = fs;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fc03 	bl	80040d8 <follow_path>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80048d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d118      	bne.n	8004912 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80048e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da03      	bge.n	80048f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80048ea:	2306      	movs	r3, #6
 80048ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80048f0:	e00f      	b.n	8004912 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf8c      	ite	hi
 80048f8:	2301      	movhi	r3, #1
 80048fa:	2300      	movls	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fbd8 	bl	80030bc <chk_lock>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	f003 031c 	and.w	r3, r3, #28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d07f      	beq.n	8004a1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800491c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004920:	2b00      	cmp	r3, #0
 8004922:	d017      	beq.n	8004954 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004928:	2b04      	cmp	r3, #4
 800492a:	d10e      	bne.n	800494a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800492c:	f7fe fc22 	bl	8003174 <enq_lock>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <f_open+0xc4>
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fb06 	bl	8003f4c <dir_register>
 8004940:	4603      	mov	r3, r0
 8004942:	e000      	b.n	8004946 <f_open+0xc6>
 8004944:	2312      	movs	r3, #18
 8004946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	71fb      	strb	r3, [r7, #7]
 8004952:	e010      	b.n	8004976 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004954:	7ebb      	ldrb	r3, [r7, #26]
 8004956:	f003 0311 	and.w	r3, r3, #17
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <f_open+0xe6>
					res = FR_DENIED;
 800495e:	2307      	movs	r3, #7
 8004960:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004964:	e007      	b.n	8004976 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <f_open+0xf6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800497a:	2b00      	cmp	r3, #0
 800497c:	d168      	bne.n	8004a50 <f_open+0x1d0>
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d063      	beq.n	8004a50 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004988:	f7fe f996 	bl	8002cb8 <get_fattime>
 800498c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800498e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004990:	330e      	adds	r3, #14
 8004992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fae6 	bl	8002f66 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499c:	3316      	adds	r3, #22
 800499e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fae0 	bl	8002f66 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80049a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a8:	330b      	adds	r3, #11
 80049aa:	2220      	movs	r2, #32
 80049ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fa35 	bl	8003e24 <ld_clust>
 80049ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049c0:	2200      	movs	r2, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fa4d 	bl	8003e62 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80049c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ca:	331c      	adds	r3, #28
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fac9 	bl	8002f66 <st_dword>
					fs->wflag = 1;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2201      	movs	r2, #1
 80049d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80049da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d037      	beq.n	8004a50 <f_open+0x1d0>
						dw = fs->winsect;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80049e6:	f107 0314 	add.w	r3, r7, #20
 80049ea:	2200      	movs	r2, #0
 80049ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe ff60 	bl	80038b4 <remove_chain>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80049fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d126      	bne.n	8004a50 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fd08 	bl	800341c <move_window>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a16:	3a01      	subs	r2, #1
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e019      	b.n	8004a50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d115      	bne.n	8004a50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004a24:	7ebb      	ldrb	r3, [r7, #26]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <f_open+0x1b6>
					res = FR_NO_FILE;
 8004a2e:	2304      	movs	r3, #4
 8004a30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a34:	e00c      	b.n	8004a50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <f_open+0x1d0>
 8004a40:	7ebb      	ldrb	r3, [r7, #26]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <f_open+0x1d0>
						res = FR_DENIED;
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d126      	bne.n	8004aa6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004a72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	bf8c      	ite	hi
 8004a7e:	2301      	movhi	r3, #1
 8004a80:	2300      	movls	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fb93 	bl	80031b8 <inc_lock>
 8004a92:	4602      	mov	r2, r0
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <f_open+0x226>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 8095 	bne.w	8004bda <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff f9b4 	bl	8003e24 <ld_clust>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac4:	331c      	adds	r3, #28
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fa0f 	bl	8002eea <ld_dword>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	88da      	ldrh	r2, [r3, #6]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	79fa      	ldrb	r2, [r7, #7]
 8004aea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3330      	adds	r3, #48	@ 0x30
 8004b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fa79 	bl	8003000 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d060      	beq.n	8004bda <f_open+0x35a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05c      	beq.n	8004bda <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	895b      	ldrh	r3, [r3, #10]
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b3c:	e016      	b.n	8004b6c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fd25 	bl	8003592 <get_fat>
 8004b48:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d802      	bhi.n	8004b56 <f_open+0x2d6>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d102      	bne.n	8004b64 <f_open+0x2e4>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004b64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <f_open+0x2fc>
 8004b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d8e0      	bhi.n	8004b3e <f_open+0x2be>
				}
				fp->clust = clst;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004b82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d127      	bne.n	8004bda <f_open+0x35a>
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d022      	beq.n	8004bda <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fcdb 	bl	8003554 <clust2sect>
 8004b9e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <f_open+0x32e>
						res = FR_INT_ERR;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004bac:	e015      	b.n	8004bda <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	0a5a      	lsrs	r2, r3, #9
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	7858      	ldrb	r0, [r3, #1]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f7fe f917 	bl	8002dfc <disk_read>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <f_open+0x35a>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <f_open+0x368>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3760      	adds	r7, #96	@ 0x60
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	@ 0x30
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f107 0210 	add.w	r2, r7, #16
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fdb7 	bl	8004788 <validate>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <f_write+0x44>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	7d5b      	ldrb	r3, [r3, #21]
 8004c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <f_write+0x4a>
 8004c38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c3c:	e14b      	b.n	8004ed6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	7d1b      	ldrb	r3, [r3, #20]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <f_write+0x5a>
 8004c4a:	2307      	movs	r3, #7
 8004c4c:	e143      	b.n	8004ed6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	f080 812d 	bcs.w	8004eba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004c68:	e127      	b.n	8004eba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 80e3 	bne.w	8004e3e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	8952      	ldrh	r2, [r2, #10]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d143      	bne.n	8004d16 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10c      	bne.n	8004cb0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11a      	bne.n	8004cd8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fe69 	bl	800397e <create_chain>
 8004cac:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004cae:	e013      	b.n	8004cd8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7fe fef5 	bl	8003aae <clmt_clust>
 8004cc4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004cc6:	e007      	b.n	8004cd8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f7fe fe54 	bl	800397e <create_chain>
 8004cd6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80f2 	beq.w	8004ec4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d104      	bne.n	8004cf0 <f_write+0xfc>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	755a      	strb	r2, [r3, #21]
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0f2      	b.n	8004ed6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d104      	bne.n	8004d02 <f_write+0x10e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	755a      	strb	r2, [r3, #21]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e9      	b.n	8004ed6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <f_write+0x122>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	7d1b      	ldrb	r3, [r3, #20]
 8004d1a:	b25b      	sxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da18      	bge.n	8004d52 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	7858      	ldrb	r0, [r3, #1]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f7fe f884 	bl	8002e3c <disk_write>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <f_write+0x150>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	755a      	strb	r2, [r3, #21]
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0c8      	b.n	8004ed6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	7d1b      	ldrb	r3, [r3, #20]
 8004d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fe fbfa 	bl	8003554 <clust2sect>
 8004d60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <f_write+0x17e>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	755a      	strb	r2, [r3, #21]
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e0b1      	b.n	8004ed6 <f_write+0x2e2>
			sect += csect;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4413      	add	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	8952      	ldrh	r2, [r2, #10]
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d905      	bls.n	8004da0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	895b      	ldrh	r3, [r3, #10]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	7858      	ldrb	r0, [r3, #1]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	f7fe f847 	bl	8002e3c <disk_write>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <f_write+0x1ca>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	755a      	strb	r2, [r3, #21]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e08b      	b.n	8004ed6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1a      	ldr	r2, [r3, #32]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	6a3a      	ldr	r2, [r7, #32]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d915      	bls.n	8004df8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	025b      	lsls	r3, r3, #9
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de4:	4619      	mov	r1, r3
 8004de6:	f7fe f8ea 	bl	8002fbe <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	7d1b      	ldrb	r3, [r3, #20]
 8004dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	025b      	lsls	r3, r3, #9
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8004dfe:	e03f      	b.n	8004e80 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d016      	beq.n	8004e38 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d210      	bcs.n	8004e38 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	7858      	ldrb	r0, [r3, #1]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004e20:	2301      	movs	r3, #1
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f7fd ffea 	bl	8002dfc <disk_read>
 8004e28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	755a      	strb	r2, [r3, #21]
 8004e34:	2301      	movs	r3, #1
 8004e36:	e04e      	b.n	8004ed6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d901      	bls.n	8004e58 <f_write+0x264>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	4413      	add	r3, r2
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	69f9      	ldr	r1, [r7, #28]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe f8a6 	bl	8002fbe <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7d1b      	ldrb	r3, [r3, #20]
 8004e76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	619a      	str	r2, [r3, #24]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	bf38      	it	cc
 8004ea0:	461a      	movcc	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	441a      	add	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f47f aed4 	bne.w	8004c6a <f_write+0x76>
 8004ec2:	e000      	b.n	8004ec6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ec4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	7d1b      	ldrb	r3, [r3, #20]
 8004eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3730      	adds	r7, #48	@ 0x30
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f107 0208 	add.w	r2, r7, #8
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fc4a 	bl	8004788 <validate>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d168      	bne.n	8004fd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7d1b      	ldrb	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d062      	beq.n	8004fd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7d1b      	ldrb	r3, [r3, #20]
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da15      	bge.n	8004f40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	7858      	ldrb	r0, [r3, #1]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	2301      	movs	r3, #1
 8004f24:	f7fd ff8a 	bl	8002e3c <disk_write>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <f_sync+0x54>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e04f      	b.n	8004fd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7d1b      	ldrb	r3, [r3, #20]
 8004f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004f40:	f7fd feba 	bl	8002cb8 <get_fattime>
 8004f44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fa64 	bl	800341c <move_window>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d138      	bne.n	8004fd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	330b      	adds	r3, #11
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	330b      	adds	r3, #11
 8004f6e:	f042 0220 	orr.w	r2, r2, #32
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68f9      	ldr	r1, [r7, #12]
 8004f82:	f7fe ff6e 	bl	8003e62 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f103 021c 	add.w	r2, r3, #28
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7fd ffe7 	bl	8002f66 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3316      	adds	r3, #22
 8004f9c:	6939      	ldr	r1, [r7, #16]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd ffe1 	bl	8002f66 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3312      	adds	r3, #18
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd ffc0 	bl	8002f30 <st_word>
					fs->wflag = 1;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fa5d 	bl	8003478 <sync_fs>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7d1b      	ldrb	r3, [r3, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff7b 	bl	8004ede <f_sync>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f107 0208 	add.w	r2, r7, #8
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fbc4 	bl	8004788 <validate>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe f960 	bl	80032d4 <dec_lock>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b090      	sub	sp, #64	@ 0x40
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f107 0208 	add.w	r2, r7, #8
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fba1 	bl	8004788 <validate>
 8005046:	4603      	mov	r3, r0
 8005048:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800504c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <f_lseek+0x2e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7d5b      	ldrb	r3, [r3, #21]
 8005058:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800505c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <f_lseek+0x3c>
 8005064:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005068:	e1e6      	b.n	8005438 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80d1 	beq.w	8005216 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d15a      	bne.n	8005132 <f_lseek+0x104>
			tbl = fp->cltbl;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	627a      	str	r2, [r7, #36]	@ 0x24
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	2302      	movs	r3, #2
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03a      	beq.n	8005112 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	2300      	movs	r3, #0
 80050a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	3302      	adds	r3, #2
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b0:	3301      	adds	r3, #1
 80050b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fa6a 	bl	8003592 <get_fat>
 80050be:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d804      	bhi.n	80050d0 <f_lseek+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	755a      	strb	r2, [r3, #21]
 80050cc:	2302      	movs	r3, #2
 80050ce:	e1b3      	b.n	8005438 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d104      	bne.n	80050e2 <f_lseek+0xb4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	755a      	strb	r2, [r3, #21]
 80050de:	2301      	movs	r3, #1
 80050e0:	e1aa      	b.n	8005438 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d0de      	beq.n	80050aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80050ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d809      	bhi.n	8005108 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	1d1a      	adds	r2, r3, #4
 80050f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80050fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	1d1a      	adds	r2, r3, #4
 8005102:	627a      	str	r2, [r7, #36]	@ 0x24
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510e:	429a      	cmp	r2, r3
 8005110:	d3c4      	bcc.n	800509c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005118:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800511a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	429a      	cmp	r2, r3
 8005120:	d803      	bhi.n	800512a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e184      	b.n	8005434 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800512a:	2311      	movs	r3, #17
 800512c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005130:	e180      	b.n	8005434 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d902      	bls.n	8005142 <f_lseek+0x114>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8172 	beq.w	8005434 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fca9 	bl	8003aae <clmt_clust>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f7fe f9f2 	bl	8003554 <clust2sect>
 8005170:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <f_lseek+0x154>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	755a      	strb	r2, [r3, #21]
 800517e:	2302      	movs	r3, #2
 8005180:	e15a      	b.n	8005438 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	3b01      	subs	r3, #1
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	8952      	ldrh	r2, [r2, #10]
 800518c:	3a01      	subs	r2, #1
 800518e:	4013      	ands	r3, r2
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8148 	beq.w	8005434 <f_lseek+0x406>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	f000 8142 	beq.w	8005434 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	7d1b      	ldrb	r3, [r3, #20]
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da18      	bge.n	80051ec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	7858      	ldrb	r0, [r3, #1]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	2301      	movs	r3, #1
 80051ca:	f7fd fe37 	bl	8002e3c <disk_write>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <f_lseek+0x1b0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	755a      	strb	r2, [r3, #21]
 80051da:	2301      	movs	r3, #1
 80051dc:	e12c      	b.n	8005438 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7d1b      	ldrb	r3, [r3, #20]
 80051e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	7858      	ldrb	r0, [r3, #1]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80051f6:	2301      	movs	r3, #1
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	f7fd fdff 	bl	8002dfc <disk_read>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <f_lseek+0x1e0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	755a      	strb	r2, [r3, #21]
 800520a:	2301      	movs	r3, #1
 800520c:	e114      	b.n	8005438 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	621a      	str	r2, [r3, #32]
 8005214:	e10e      	b.n	8005434 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d908      	bls.n	8005232 <f_lseek+0x204>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7d1b      	ldrb	r3, [r3, #20]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005240:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a7 	beq.w	8005398 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	895b      	ldrh	r3, [r3, #10]
 800524e:	025b      	lsls	r3, r3, #9
 8005250:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	1e59      	subs	r1, r3, #1
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800526c:	429a      	cmp	r2, r3
 800526e:	d30f      	bcc.n	8005290 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	1e5a      	subs	r2, r3, #1
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	425b      	negs	r3, r3
 8005278:	401a      	ands	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800528e:	e022      	b.n	80052d6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d119      	bne.n	80052d0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe fb6c 	bl	800397e <create_chain>
 80052a6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d104      	bne.n	80052b8 <f_lseek+0x28a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	755a      	strb	r2, [r3, #21]
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0bf      	b.n	8005438 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d104      	bne.n	80052ca <f_lseek+0x29c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	755a      	strb	r2, [r3, #21]
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0b6      	b.n	8005438 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052ce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052d4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05d      	beq.n	8005398 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80052dc:	e03a      	b.n	8005354 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7d1b      	ldrb	r3, [r3, #20]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fb3b 	bl	800397e <create_chain>
 8005308:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <f_lseek+0x2f4>
							ofs = 0; break;
 8005310:	2300      	movs	r3, #0
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e022      	b.n	800535c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe f939 	bl	8003592 <get_fat>
 8005320:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d104      	bne.n	8005334 <f_lseek+0x306>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	755a      	strb	r2, [r3, #21]
 8005330:	2301      	movs	r3, #1
 8005332:	e081      	b.n	8005438 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	2b01      	cmp	r3, #1
 8005338:	d904      	bls.n	8005344 <f_lseek+0x316>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005340:	429a      	cmp	r2, r3
 8005342:	d304      	bcc.n	800534e <f_lseek+0x320>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	755a      	strb	r2, [r3, #21]
 800534a:	2302      	movs	r3, #2
 800534c:	e074      	b.n	8005438 <f_lseek+0x40a>
					fp->clust = clst;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005352:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d8c0      	bhi.n	80052de <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	2b00      	cmp	r3, #0
 8005370:	d012      	beq.n	8005398 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe f8ec 	bl	8003554 <clust2sect>
 800537c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <f_lseek+0x360>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	755a      	strb	r2, [r3, #21]
 800538a:	2302      	movs	r3, #2
 800538c:	e054      	b.n	8005438 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	0a5b      	lsrs	r3, r3, #9
 8005392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005394:	4413      	add	r3, r2
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d90a      	bls.n	80053ba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7d1b      	ldrb	r3, [r3, #20]
 80053b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d036      	beq.n	8005434 <f_lseek+0x406>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d031      	beq.n	8005434 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7d1b      	ldrb	r3, [r3, #20]
 80053d4:	b25b      	sxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	da18      	bge.n	800540c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	7858      	ldrb	r0, [r3, #1]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	2301      	movs	r3, #1
 80053ea:	f7fd fd27 	bl	8002e3c <disk_write>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <f_lseek+0x3d0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	755a      	strb	r2, [r3, #21]
 80053fa:	2301      	movs	r3, #1
 80053fc:	e01c      	b.n	8005438 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7d1b      	ldrb	r3, [r3, #20]
 8005402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005406:	b2da      	uxtb	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	7858      	ldrb	r0, [r3, #1]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005416:	2301      	movs	r3, #1
 8005418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800541a:	f7fd fcef 	bl	8002dfc <disk_read>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <f_lseek+0x400>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	755a      	strb	r2, [r3, #21]
 800542a:	2301      	movs	r3, #1
 800542c:	e004      	b.n	8005438 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005432:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005434:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8005438:	4618      	mov	r0, r3
 800543a:	3740      	adds	r7, #64	@ 0x40
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005456:	4b1f      	ldr	r3, [pc, #124]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005458:	7a5b      	ldrb	r3, [r3, #9]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d131      	bne.n	80054c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005460:	4b1c      	ldr	r3, [pc, #112]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005462:	7a5b      	ldrb	r3, [r3, #9]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 800546a:	2100      	movs	r1, #0
 800546c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800546e:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005470:	7a5b      	ldrb	r3, [r3, #9]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005480:	7a5b      	ldrb	r3, [r3, #9]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	4b13      	ldr	r3, [pc, #76]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005488:	4413      	add	r3, r2
 800548a:	79fa      	ldrb	r2, [r7, #7]
 800548c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800548e:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 8005490:	7a5b      	ldrb	r3, [r3, #9]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	b2d1      	uxtb	r1, r2
 8005498:	4a0e      	ldr	r2, [pc, #56]	@ (80054d4 <FATFS_LinkDriverEx+0x94>)
 800549a:	7251      	strb	r1, [r2, #9]
 800549c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800549e:	7dbb      	ldrb	r3, [r7, #22]
 80054a0:	3330      	adds	r3, #48	@ 0x30
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3301      	adds	r3, #1
 80054ac:	223a      	movs	r2, #58	@ 0x3a
 80054ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3302      	adds	r3, #2
 80054b4:	222f      	movs	r2, #47	@ 0x2f
 80054b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	3303      	adds	r3, #3
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000190 	.word	0x20000190

080054d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ffaa 	bl	8005440 <FATFS_LinkDriverEx>
 80054ec:	4603      	mov	r3, r0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <std>:
 80054f8:	2300      	movs	r3, #0
 80054fa:	b510      	push	{r4, lr}
 80054fc:	4604      	mov	r4, r0
 80054fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005506:	6083      	str	r3, [r0, #8]
 8005508:	8181      	strh	r1, [r0, #12]
 800550a:	6643      	str	r3, [r0, #100]	@ 0x64
 800550c:	81c2      	strh	r2, [r0, #14]
 800550e:	6183      	str	r3, [r0, #24]
 8005510:	4619      	mov	r1, r3
 8005512:	2208      	movs	r2, #8
 8005514:	305c      	adds	r0, #92	@ 0x5c
 8005516:	f000 fa1b 	bl	8005950 <memset>
 800551a:	4b0d      	ldr	r3, [pc, #52]	@ (8005550 <std+0x58>)
 800551c:	6263      	str	r3, [r4, #36]	@ 0x24
 800551e:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <std+0x5c>)
 8005520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <std+0x60>)
 8005524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <std+0x64>)
 8005528:	6323      	str	r3, [r4, #48]	@ 0x30
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x68>)
 800552c:	6224      	str	r4, [r4, #32]
 800552e:	429c      	cmp	r4, r3
 8005530:	d006      	beq.n	8005540 <std+0x48>
 8005532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005536:	4294      	cmp	r4, r2
 8005538:	d002      	beq.n	8005540 <std+0x48>
 800553a:	33d0      	adds	r3, #208	@ 0xd0
 800553c:	429c      	cmp	r4, r3
 800553e:	d105      	bne.n	800554c <std+0x54>
 8005540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f000 ba7a 	b.w	8005a40 <__retarget_lock_init_recursive>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	bf00      	nop
 8005550:	080057a1 	.word	0x080057a1
 8005554:	080057c3 	.word	0x080057c3
 8005558:	080057fb 	.word	0x080057fb
 800555c:	0800581f 	.word	0x0800581f
 8005560:	2000019c 	.word	0x2000019c

08005564 <stdio_exit_handler>:
 8005564:	4a02      	ldr	r2, [pc, #8]	@ (8005570 <stdio_exit_handler+0xc>)
 8005566:	4903      	ldr	r1, [pc, #12]	@ (8005574 <stdio_exit_handler+0x10>)
 8005568:	4803      	ldr	r0, [pc, #12]	@ (8005578 <stdio_exit_handler+0x14>)
 800556a:	f000 b869 	b.w	8005640 <_fwalk_sglue>
 800556e:	bf00      	nop
 8005570:	20000020 	.word	0x20000020
 8005574:	0800658d 	.word	0x0800658d
 8005578:	20000030 	.word	0x20000030

0800557c <cleanup_stdio>:
 800557c:	6841      	ldr	r1, [r0, #4]
 800557e:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <cleanup_stdio+0x34>)
 8005580:	4299      	cmp	r1, r3
 8005582:	b510      	push	{r4, lr}
 8005584:	4604      	mov	r4, r0
 8005586:	d001      	beq.n	800558c <cleanup_stdio+0x10>
 8005588:	f001 f800 	bl	800658c <_fflush_r>
 800558c:	68a1      	ldr	r1, [r4, #8]
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <cleanup_stdio+0x38>)
 8005590:	4299      	cmp	r1, r3
 8005592:	d002      	beq.n	800559a <cleanup_stdio+0x1e>
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fff9 	bl	800658c <_fflush_r>
 800559a:	68e1      	ldr	r1, [r4, #12]
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <cleanup_stdio+0x3c>)
 800559e:	4299      	cmp	r1, r3
 80055a0:	d004      	beq.n	80055ac <cleanup_stdio+0x30>
 80055a2:	4620      	mov	r0, r4
 80055a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a8:	f000 bff0 	b.w	800658c <_fflush_r>
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	bf00      	nop
 80055b0:	2000019c 	.word	0x2000019c
 80055b4:	20000204 	.word	0x20000204
 80055b8:	2000026c 	.word	0x2000026c

080055bc <global_stdio_init.part.0>:
 80055bc:	b510      	push	{r4, lr}
 80055be:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <global_stdio_init.part.0+0x30>)
 80055c0:	4c0b      	ldr	r4, [pc, #44]	@ (80055f0 <global_stdio_init.part.0+0x34>)
 80055c2:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <global_stdio_init.part.0+0x38>)
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	4620      	mov	r0, r4
 80055c8:	2200      	movs	r2, #0
 80055ca:	2104      	movs	r1, #4
 80055cc:	f7ff ff94 	bl	80054f8 <std>
 80055d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055d4:	2201      	movs	r2, #1
 80055d6:	2109      	movs	r1, #9
 80055d8:	f7ff ff8e 	bl	80054f8 <std>
 80055dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055e0:	2202      	movs	r2, #2
 80055e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e6:	2112      	movs	r1, #18
 80055e8:	f7ff bf86 	b.w	80054f8 <std>
 80055ec:	200002d4 	.word	0x200002d4
 80055f0:	2000019c 	.word	0x2000019c
 80055f4:	08005565 	.word	0x08005565

080055f8 <__sfp_lock_acquire>:
 80055f8:	4801      	ldr	r0, [pc, #4]	@ (8005600 <__sfp_lock_acquire+0x8>)
 80055fa:	f000 ba22 	b.w	8005a42 <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	200002dd 	.word	0x200002dd

08005604 <__sfp_lock_release>:
 8005604:	4801      	ldr	r0, [pc, #4]	@ (800560c <__sfp_lock_release+0x8>)
 8005606:	f000 ba1d 	b.w	8005a44 <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	200002dd 	.word	0x200002dd

08005610 <__sinit>:
 8005610:	b510      	push	{r4, lr}
 8005612:	4604      	mov	r4, r0
 8005614:	f7ff fff0 	bl	80055f8 <__sfp_lock_acquire>
 8005618:	6a23      	ldr	r3, [r4, #32]
 800561a:	b11b      	cbz	r3, 8005624 <__sinit+0x14>
 800561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005620:	f7ff bff0 	b.w	8005604 <__sfp_lock_release>
 8005624:	4b04      	ldr	r3, [pc, #16]	@ (8005638 <__sinit+0x28>)
 8005626:	6223      	str	r3, [r4, #32]
 8005628:	4b04      	ldr	r3, [pc, #16]	@ (800563c <__sinit+0x2c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f5      	bne.n	800561c <__sinit+0xc>
 8005630:	f7ff ffc4 	bl	80055bc <global_stdio_init.part.0>
 8005634:	e7f2      	b.n	800561c <__sinit+0xc>
 8005636:	bf00      	nop
 8005638:	0800557d 	.word	0x0800557d
 800563c:	200002d4 	.word	0x200002d4

08005640 <_fwalk_sglue>:
 8005640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005644:	4607      	mov	r7, r0
 8005646:	4688      	mov	r8, r1
 8005648:	4614      	mov	r4, r2
 800564a:	2600      	movs	r6, #0
 800564c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005650:	f1b9 0901 	subs.w	r9, r9, #1
 8005654:	d505      	bpl.n	8005662 <_fwalk_sglue+0x22>
 8005656:	6824      	ldr	r4, [r4, #0]
 8005658:	2c00      	cmp	r4, #0
 800565a:	d1f7      	bne.n	800564c <_fwalk_sglue+0xc>
 800565c:	4630      	mov	r0, r6
 800565e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005662:	89ab      	ldrh	r3, [r5, #12]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d907      	bls.n	8005678 <_fwalk_sglue+0x38>
 8005668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800566c:	3301      	adds	r3, #1
 800566e:	d003      	beq.n	8005678 <_fwalk_sglue+0x38>
 8005670:	4629      	mov	r1, r5
 8005672:	4638      	mov	r0, r7
 8005674:	47c0      	blx	r8
 8005676:	4306      	orrs	r6, r0
 8005678:	3568      	adds	r5, #104	@ 0x68
 800567a:	e7e9      	b.n	8005650 <_fwalk_sglue+0x10>

0800567c <iprintf>:
 800567c:	b40f      	push	{r0, r1, r2, r3}
 800567e:	b507      	push	{r0, r1, r2, lr}
 8005680:	4906      	ldr	r1, [pc, #24]	@ (800569c <iprintf+0x20>)
 8005682:	ab04      	add	r3, sp, #16
 8005684:	6808      	ldr	r0, [r1, #0]
 8005686:	f853 2b04 	ldr.w	r2, [r3], #4
 800568a:	6881      	ldr	r1, [r0, #8]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f000 fc55 	bl	8005f3c <_vfiprintf_r>
 8005692:	b003      	add	sp, #12
 8005694:	f85d eb04 	ldr.w	lr, [sp], #4
 8005698:	b004      	add	sp, #16
 800569a:	4770      	bx	lr
 800569c:	2000002c 	.word	0x2000002c

080056a0 <_puts_r>:
 80056a0:	6a03      	ldr	r3, [r0, #32]
 80056a2:	b570      	push	{r4, r5, r6, lr}
 80056a4:	6884      	ldr	r4, [r0, #8]
 80056a6:	4605      	mov	r5, r0
 80056a8:	460e      	mov	r6, r1
 80056aa:	b90b      	cbnz	r3, 80056b0 <_puts_r+0x10>
 80056ac:	f7ff ffb0 	bl	8005610 <__sinit>
 80056b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056b2:	07db      	lsls	r3, r3, #31
 80056b4:	d405      	bmi.n	80056c2 <_puts_r+0x22>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	0598      	lsls	r0, r3, #22
 80056ba:	d402      	bmi.n	80056c2 <_puts_r+0x22>
 80056bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056be:	f000 f9c0 	bl	8005a42 <__retarget_lock_acquire_recursive>
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	0719      	lsls	r1, r3, #28
 80056c6:	d502      	bpl.n	80056ce <_puts_r+0x2e>
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d135      	bne.n	800573a <_puts_r+0x9a>
 80056ce:	4621      	mov	r1, r4
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 f8e7 	bl	80058a4 <__swsetup_r>
 80056d6:	b380      	cbz	r0, 800573a <_puts_r+0x9a>
 80056d8:	f04f 35ff 	mov.w	r5, #4294967295
 80056dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d405      	bmi.n	80056ee <_puts_r+0x4e>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	059b      	lsls	r3, r3, #22
 80056e6:	d402      	bmi.n	80056ee <_puts_r+0x4e>
 80056e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ea:	f000 f9ab 	bl	8005a44 <__retarget_lock_release_recursive>
 80056ee:	4628      	mov	r0, r5
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	da04      	bge.n	8005700 <_puts_r+0x60>
 80056f6:	69a2      	ldr	r2, [r4, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	dc17      	bgt.n	800572c <_puts_r+0x8c>
 80056fc:	290a      	cmp	r1, #10
 80056fe:	d015      	beq.n	800572c <_puts_r+0x8c>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	6022      	str	r2, [r4, #0]
 8005706:	7019      	strb	r1, [r3, #0]
 8005708:	68a3      	ldr	r3, [r4, #8]
 800570a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800570e:	3b01      	subs	r3, #1
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	2900      	cmp	r1, #0
 8005714:	d1ed      	bne.n	80056f2 <_puts_r+0x52>
 8005716:	2b00      	cmp	r3, #0
 8005718:	da11      	bge.n	800573e <_puts_r+0x9e>
 800571a:	4622      	mov	r2, r4
 800571c:	210a      	movs	r1, #10
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f881 	bl	8005826 <__swbuf_r>
 8005724:	3001      	adds	r0, #1
 8005726:	d0d7      	beq.n	80056d8 <_puts_r+0x38>
 8005728:	250a      	movs	r5, #10
 800572a:	e7d7      	b.n	80056dc <_puts_r+0x3c>
 800572c:	4622      	mov	r2, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f879 	bl	8005826 <__swbuf_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d1e7      	bne.n	8005708 <_puts_r+0x68>
 8005738:	e7ce      	b.n	80056d8 <_puts_r+0x38>
 800573a:	3e01      	subs	r6, #1
 800573c:	e7e4      	b.n	8005708 <_puts_r+0x68>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	220a      	movs	r2, #10
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e7ee      	b.n	8005728 <_puts_r+0x88>
	...

0800574c <puts>:
 800574c:	4b02      	ldr	r3, [pc, #8]	@ (8005758 <puts+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f7ff bfa5 	b.w	80056a0 <_puts_r>
 8005756:	bf00      	nop
 8005758:	2000002c 	.word	0x2000002c

0800575c <siprintf>:
 800575c:	b40e      	push	{r1, r2, r3}
 800575e:	b510      	push	{r4, lr}
 8005760:	b09d      	sub	sp, #116	@ 0x74
 8005762:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005764:	9002      	str	r0, [sp, #8]
 8005766:	9006      	str	r0, [sp, #24]
 8005768:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800576c:	480a      	ldr	r0, [pc, #40]	@ (8005798 <siprintf+0x3c>)
 800576e:	9107      	str	r1, [sp, #28]
 8005770:	9104      	str	r1, [sp, #16]
 8005772:	490a      	ldr	r1, [pc, #40]	@ (800579c <siprintf+0x40>)
 8005774:	f853 2b04 	ldr.w	r2, [r3], #4
 8005778:	9105      	str	r1, [sp, #20]
 800577a:	2400      	movs	r4, #0
 800577c:	a902      	add	r1, sp, #8
 800577e:	6800      	ldr	r0, [r0, #0]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005784:	f000 fab4 	bl	8005cf0 <_svfiprintf_r>
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	701c      	strb	r4, [r3, #0]
 800578c:	b01d      	add	sp, #116	@ 0x74
 800578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005792:	b003      	add	sp, #12
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	2000002c 	.word	0x2000002c
 800579c:	ffff0208 	.word	0xffff0208

080057a0 <__sread>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	460c      	mov	r4, r1
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	f000 f8fc 	bl	80059a4 <_read_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	bfab      	itete	ge
 80057b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057b2:	89a3      	ldrhlt	r3, [r4, #12]
 80057b4:	181b      	addge	r3, r3, r0
 80057b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ba:	bfac      	ite	ge
 80057bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057be:	81a3      	strhlt	r3, [r4, #12]
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <__swrite>:
 80057c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	461f      	mov	r7, r3
 80057c8:	898b      	ldrh	r3, [r1, #12]
 80057ca:	05db      	lsls	r3, r3, #23
 80057cc:	4605      	mov	r5, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	4616      	mov	r6, r2
 80057d2:	d505      	bpl.n	80057e0 <__swrite+0x1e>
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	2302      	movs	r3, #2
 80057da:	2200      	movs	r2, #0
 80057dc:	f000 f8d0 	bl	8005980 <_lseek_r>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	4632      	mov	r2, r6
 80057ee:	463b      	mov	r3, r7
 80057f0:	4628      	mov	r0, r5
 80057f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	f000 b8e7 	b.w	80059c8 <_write_r>

080057fa <__sseek>:
 80057fa:	b510      	push	{r4, lr}
 80057fc:	460c      	mov	r4, r1
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 f8bd 	bl	8005980 <_lseek_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	bf15      	itete	ne
 800580c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800580e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005816:	81a3      	strheq	r3, [r4, #12]
 8005818:	bf18      	it	ne
 800581a:	81a3      	strhne	r3, [r4, #12]
 800581c:	bd10      	pop	{r4, pc}

0800581e <__sclose>:
 800581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005822:	f000 b89d 	b.w	8005960 <_close_r>

08005826 <__swbuf_r>:
 8005826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005828:	460e      	mov	r6, r1
 800582a:	4614      	mov	r4, r2
 800582c:	4605      	mov	r5, r0
 800582e:	b118      	cbz	r0, 8005838 <__swbuf_r+0x12>
 8005830:	6a03      	ldr	r3, [r0, #32]
 8005832:	b90b      	cbnz	r3, 8005838 <__swbuf_r+0x12>
 8005834:	f7ff feec 	bl	8005610 <__sinit>
 8005838:	69a3      	ldr	r3, [r4, #24]
 800583a:	60a3      	str	r3, [r4, #8]
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	071a      	lsls	r2, r3, #28
 8005840:	d501      	bpl.n	8005846 <__swbuf_r+0x20>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	b943      	cbnz	r3, 8005858 <__swbuf_r+0x32>
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 f82b 	bl	80058a4 <__swsetup_r>
 800584e:	b118      	cbz	r0, 8005858 <__swbuf_r+0x32>
 8005850:	f04f 37ff 	mov.w	r7, #4294967295
 8005854:	4638      	mov	r0, r7
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	6922      	ldr	r2, [r4, #16]
 800585c:	1a98      	subs	r0, r3, r2
 800585e:	6963      	ldr	r3, [r4, #20]
 8005860:	b2f6      	uxtb	r6, r6
 8005862:	4283      	cmp	r3, r0
 8005864:	4637      	mov	r7, r6
 8005866:	dc05      	bgt.n	8005874 <__swbuf_r+0x4e>
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 fe8e 	bl	800658c <_fflush_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	d1ed      	bne.n	8005850 <__swbuf_r+0x2a>
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	701e      	strb	r6, [r3, #0]
 8005882:	6962      	ldr	r2, [r4, #20]
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	429a      	cmp	r2, r3
 8005888:	d004      	beq.n	8005894 <__swbuf_r+0x6e>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	07db      	lsls	r3, r3, #31
 800588e:	d5e1      	bpl.n	8005854 <__swbuf_r+0x2e>
 8005890:	2e0a      	cmp	r6, #10
 8005892:	d1df      	bne.n	8005854 <__swbuf_r+0x2e>
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fe78 	bl	800658c <_fflush_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	d0d9      	beq.n	8005854 <__swbuf_r+0x2e>
 80058a0:	e7d6      	b.n	8005850 <__swbuf_r+0x2a>
	...

080058a4 <__swsetup_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4b29      	ldr	r3, [pc, #164]	@ (800594c <__swsetup_r+0xa8>)
 80058a8:	4605      	mov	r5, r0
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	460c      	mov	r4, r1
 80058ae:	b118      	cbz	r0, 80058b8 <__swsetup_r+0x14>
 80058b0:	6a03      	ldr	r3, [r0, #32]
 80058b2:	b90b      	cbnz	r3, 80058b8 <__swsetup_r+0x14>
 80058b4:	f7ff feac 	bl	8005610 <__sinit>
 80058b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058bc:	0719      	lsls	r1, r3, #28
 80058be:	d422      	bmi.n	8005906 <__swsetup_r+0x62>
 80058c0:	06da      	lsls	r2, r3, #27
 80058c2:	d407      	bmi.n	80058d4 <__swsetup_r+0x30>
 80058c4:	2209      	movs	r2, #9
 80058c6:	602a      	str	r2, [r5, #0]
 80058c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	e033      	b.n	800593c <__swsetup_r+0x98>
 80058d4:	0758      	lsls	r0, r3, #29
 80058d6:	d512      	bpl.n	80058fe <__swsetup_r+0x5a>
 80058d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058da:	b141      	cbz	r1, 80058ee <__swsetup_r+0x4a>
 80058dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058e0:	4299      	cmp	r1, r3
 80058e2:	d002      	beq.n	80058ea <__swsetup_r+0x46>
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f8af 	bl	8005a48 <_free_r>
 80058ea:	2300      	movs	r3, #0
 80058ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	2300      	movs	r3, #0
 80058f8:	6063      	str	r3, [r4, #4]
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	f043 0308 	orr.w	r3, r3, #8
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	6923      	ldr	r3, [r4, #16]
 8005908:	b94b      	cbnz	r3, 800591e <__swsetup_r+0x7a>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005914:	d003      	beq.n	800591e <__swsetup_r+0x7a>
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 fe85 	bl	8006628 <__smakebuf_r>
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	f013 0201 	ands.w	r2, r3, #1
 8005926:	d00a      	beq.n	800593e <__swsetup_r+0x9a>
 8005928:	2200      	movs	r2, #0
 800592a:	60a2      	str	r2, [r4, #8]
 800592c:	6962      	ldr	r2, [r4, #20]
 800592e:	4252      	negs	r2, r2
 8005930:	61a2      	str	r2, [r4, #24]
 8005932:	6922      	ldr	r2, [r4, #16]
 8005934:	b942      	cbnz	r2, 8005948 <__swsetup_r+0xa4>
 8005936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800593a:	d1c5      	bne.n	80058c8 <__swsetup_r+0x24>
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	0799      	lsls	r1, r3, #30
 8005940:	bf58      	it	pl
 8005942:	6962      	ldrpl	r2, [r4, #20]
 8005944:	60a2      	str	r2, [r4, #8]
 8005946:	e7f4      	b.n	8005932 <__swsetup_r+0x8e>
 8005948:	2000      	movs	r0, #0
 800594a:	e7f7      	b.n	800593c <__swsetup_r+0x98>
 800594c:	2000002c 	.word	0x2000002c

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <_close_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d06      	ldr	r5, [pc, #24]	@ (800597c <_close_r+0x1c>)
 8005964:	2300      	movs	r3, #0
 8005966:	4604      	mov	r4, r0
 8005968:	4608      	mov	r0, r1
 800596a:	602b      	str	r3, [r5, #0]
 800596c:	f7fb f9de 	bl	8000d2c <_close>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_close_r+0x1a>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_close_r+0x1a>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	200002d8 	.word	0x200002d8

08005980 <_lseek_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	@ (80059a0 <_lseek_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fb f9f3 	bl	8000d7a <_lseek>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_lseek_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_lseek_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	200002d8 	.word	0x200002d8

080059a4 <_read_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	@ (80059c4 <_read_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb f981 	bl	8000cba <_read>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_read_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_read_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	200002d8 	.word	0x200002d8

080059c8 <_write_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	@ (80059e8 <_write_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb f98c 	bl	8000cf4 <_write>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_write_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_write_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	200002d8 	.word	0x200002d8

080059ec <__errno>:
 80059ec:	4b01      	ldr	r3, [pc, #4]	@ (80059f4 <__errno+0x8>)
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000002c 	.word	0x2000002c

080059f8 <__libc_init_array>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005a30 <__libc_init_array+0x38>)
 80059fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005a34 <__libc_init_array+0x3c>)
 80059fe:	1b64      	subs	r4, r4, r5
 8005a00:	10a4      	asrs	r4, r4, #2
 8005a02:	2600      	movs	r6, #0
 8005a04:	42a6      	cmp	r6, r4
 8005a06:	d109      	bne.n	8005a1c <__libc_init_array+0x24>
 8005a08:	4d0b      	ldr	r5, [pc, #44]	@ (8005a38 <__libc_init_array+0x40>)
 8005a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a3c <__libc_init_array+0x44>)
 8005a0c:	f000 fed8 	bl	80067c0 <_init>
 8005a10:	1b64      	subs	r4, r4, r5
 8005a12:	10a4      	asrs	r4, r4, #2
 8005a14:	2600      	movs	r6, #0
 8005a16:	42a6      	cmp	r6, r4
 8005a18:	d105      	bne.n	8005a26 <__libc_init_array+0x2e>
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a20:	4798      	blx	r3
 8005a22:	3601      	adds	r6, #1
 8005a24:	e7ee      	b.n	8005a04 <__libc_init_array+0xc>
 8005a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2a:	4798      	blx	r3
 8005a2c:	3601      	adds	r6, #1
 8005a2e:	e7f2      	b.n	8005a16 <__libc_init_array+0x1e>
 8005a30:	08006974 	.word	0x08006974
 8005a34:	08006974 	.word	0x08006974
 8005a38:	08006974 	.word	0x08006974
 8005a3c:	08006978 	.word	0x08006978

08005a40 <__retarget_lock_init_recursive>:
 8005a40:	4770      	bx	lr

08005a42 <__retarget_lock_acquire_recursive>:
 8005a42:	4770      	bx	lr

08005a44 <__retarget_lock_release_recursive>:
 8005a44:	4770      	bx	lr
	...

08005a48 <_free_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d041      	beq.n	8005ad4 <_free_r+0x8c>
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f0c      	subs	r4, r1, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	18e4      	addlt	r4, r4, r3
 8005a5c:	f000 f8e0 	bl	8005c20 <__malloc_lock>
 8005a60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <_free_r+0x90>)
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	b933      	cbnz	r3, 8005a74 <_free_r+0x2c>
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	6014      	str	r4, [r2, #0]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a70:	f000 b8dc 	b.w	8005c2c <__malloc_unlock>
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d908      	bls.n	8005a8a <_free_r+0x42>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	1821      	adds	r1, r4, r0
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	bf01      	itttt	eq
 8005a80:	6819      	ldreq	r1, [r3, #0]
 8005a82:	685b      	ldreq	r3, [r3, #4]
 8005a84:	1809      	addeq	r1, r1, r0
 8005a86:	6021      	streq	r1, [r4, #0]
 8005a88:	e7ed      	b.n	8005a66 <_free_r+0x1e>
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b10b      	cbz	r3, 8005a94 <_free_r+0x4c>
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d9fa      	bls.n	8005a8a <_free_r+0x42>
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	1850      	adds	r0, r2, r1
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d10b      	bne.n	8005ab4 <_free_r+0x6c>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	1850      	adds	r0, r2, r1
 8005aa2:	4283      	cmp	r3, r0
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	d1e0      	bne.n	8005a6a <_free_r+0x22>
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	6053      	str	r3, [r2, #4]
 8005aae:	4408      	add	r0, r1
 8005ab0:	6010      	str	r0, [r2, #0]
 8005ab2:	e7da      	b.n	8005a6a <_free_r+0x22>
 8005ab4:	d902      	bls.n	8005abc <_free_r+0x74>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	e7d6      	b.n	8005a6a <_free_r+0x22>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	1821      	adds	r1, r4, r0
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf04      	itt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	bf04      	itt	eq
 8005acc:	1809      	addeq	r1, r1, r0
 8005ace:	6021      	streq	r1, [r4, #0]
 8005ad0:	6054      	str	r4, [r2, #4]
 8005ad2:	e7ca      	b.n	8005a6a <_free_r+0x22>
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200002e4 	.word	0x200002e4

08005adc <sbrk_aligned>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4e0f      	ldr	r6, [pc, #60]	@ (8005b1c <sbrk_aligned+0x40>)
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	6831      	ldr	r1, [r6, #0]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	b911      	cbnz	r1, 8005aee <sbrk_aligned+0x12>
 8005ae8:	f000 fe16 	bl	8006718 <_sbrk_r>
 8005aec:	6030      	str	r0, [r6, #0]
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 fe11 	bl	8006718 <_sbrk_r>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d103      	bne.n	8005b02 <sbrk_aligned+0x26>
 8005afa:	f04f 34ff 	mov.w	r4, #4294967295
 8005afe:	4620      	mov	r0, r4
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	1cc4      	adds	r4, r0, #3
 8005b04:	f024 0403 	bic.w	r4, r4, #3
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d0f8      	beq.n	8005afe <sbrk_aligned+0x22>
 8005b0c:	1a21      	subs	r1, r4, r0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fe02 	bl	8006718 <_sbrk_r>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d1f2      	bne.n	8005afe <sbrk_aligned+0x22>
 8005b18:	e7ef      	b.n	8005afa <sbrk_aligned+0x1e>
 8005b1a:	bf00      	nop
 8005b1c:	200002e0 	.word	0x200002e0

08005b20 <_malloc_r>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	1ccd      	adds	r5, r1, #3
 8005b26:	f025 0503 	bic.w	r5, r5, #3
 8005b2a:	3508      	adds	r5, #8
 8005b2c:	2d0c      	cmp	r5, #12
 8005b2e:	bf38      	it	cc
 8005b30:	250c      	movcc	r5, #12
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	4606      	mov	r6, r0
 8005b36:	db01      	blt.n	8005b3c <_malloc_r+0x1c>
 8005b38:	42a9      	cmp	r1, r5
 8005b3a:	d904      	bls.n	8005b46 <_malloc_r+0x26>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	6033      	str	r3, [r6, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c1c <_malloc_r+0xfc>
 8005b4a:	f000 f869 	bl	8005c20 <__malloc_lock>
 8005b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b52:	461c      	mov	r4, r3
 8005b54:	bb44      	cbnz	r4, 8005ba8 <_malloc_r+0x88>
 8005b56:	4629      	mov	r1, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f7ff ffbf 	bl	8005adc <sbrk_aligned>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	4604      	mov	r4, r0
 8005b62:	d158      	bne.n	8005c16 <_malloc_r+0xf6>
 8005b64:	f8d8 4000 	ldr.w	r4, [r8]
 8005b68:	4627      	mov	r7, r4
 8005b6a:	2f00      	cmp	r7, #0
 8005b6c:	d143      	bne.n	8005bf6 <_malloc_r+0xd6>
 8005b6e:	2c00      	cmp	r4, #0
 8005b70:	d04b      	beq.n	8005c0a <_malloc_r+0xea>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	4639      	mov	r1, r7
 8005b76:	4630      	mov	r0, r6
 8005b78:	eb04 0903 	add.w	r9, r4, r3
 8005b7c:	f000 fdcc 	bl	8006718 <_sbrk_r>
 8005b80:	4581      	cmp	r9, r0
 8005b82:	d142      	bne.n	8005c0a <_malloc_r+0xea>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	1a6d      	subs	r5, r5, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ffa6 	bl	8005adc <sbrk_aligned>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d03a      	beq.n	8005c0a <_malloc_r+0xea>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	442b      	add	r3, r5
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	bb62      	cbnz	r2, 8005bfc <_malloc_r+0xdc>
 8005ba2:	f8c8 7000 	str.w	r7, [r8]
 8005ba6:	e00f      	b.n	8005bc8 <_malloc_r+0xa8>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	1b52      	subs	r2, r2, r5
 8005bac:	d420      	bmi.n	8005bf0 <_malloc_r+0xd0>
 8005bae:	2a0b      	cmp	r2, #11
 8005bb0:	d917      	bls.n	8005be2 <_malloc_r+0xc2>
 8005bb2:	1961      	adds	r1, r4, r5
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	6025      	str	r5, [r4, #0]
 8005bb8:	bf18      	it	ne
 8005bba:	6059      	strne	r1, [r3, #4]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	bf08      	it	eq
 8005bc0:	f8c8 1000 	streq.w	r1, [r8]
 8005bc4:	5162      	str	r2, [r4, r5]
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f82f 	bl	8005c2c <__malloc_unlock>
 8005bce:	f104 000b 	add.w	r0, r4, #11
 8005bd2:	1d23      	adds	r3, r4, #4
 8005bd4:	f020 0007 	bic.w	r0, r0, #7
 8005bd8:	1ac2      	subs	r2, r0, r3
 8005bda:	bf1c      	itt	ne
 8005bdc:	1a1b      	subne	r3, r3, r0
 8005bde:	50a3      	strne	r3, [r4, r2]
 8005be0:	e7af      	b.n	8005b42 <_malloc_r+0x22>
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	bf0c      	ite	eq
 8005be8:	f8c8 2000 	streq.w	r2, [r8]
 8005bec:	605a      	strne	r2, [r3, #4]
 8005bee:	e7eb      	b.n	8005bc8 <_malloc_r+0xa8>
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	6864      	ldr	r4, [r4, #4]
 8005bf4:	e7ae      	b.n	8005b54 <_malloc_r+0x34>
 8005bf6:	463c      	mov	r4, r7
 8005bf8:	687f      	ldr	r7, [r7, #4]
 8005bfa:	e7b6      	b.n	8005b6a <_malloc_r+0x4a>
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d1fb      	bne.n	8005bfc <_malloc_r+0xdc>
 8005c04:	2300      	movs	r3, #0
 8005c06:	6053      	str	r3, [r2, #4]
 8005c08:	e7de      	b.n	8005bc8 <_malloc_r+0xa8>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 f80c 	bl	8005c2c <__malloc_unlock>
 8005c14:	e794      	b.n	8005b40 <_malloc_r+0x20>
 8005c16:	6005      	str	r5, [r0, #0]
 8005c18:	e7d6      	b.n	8005bc8 <_malloc_r+0xa8>
 8005c1a:	bf00      	nop
 8005c1c:	200002e4 	.word	0x200002e4

08005c20 <__malloc_lock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__malloc_lock+0x8>)
 8005c22:	f7ff bf0e 	b.w	8005a42 <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	200002dc 	.word	0x200002dc

08005c2c <__malloc_unlock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__malloc_unlock+0x8>)
 8005c2e:	f7ff bf09 	b.w	8005a44 <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	200002dc 	.word	0x200002dc

08005c38 <__ssputs_r>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	688e      	ldr	r6, [r1, #8]
 8005c3e:	461f      	mov	r7, r3
 8005c40:	42be      	cmp	r6, r7
 8005c42:	680b      	ldr	r3, [r1, #0]
 8005c44:	4682      	mov	sl, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	4690      	mov	r8, r2
 8005c4a:	d82d      	bhi.n	8005ca8 <__ssputs_r+0x70>
 8005c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c54:	d026      	beq.n	8005ca4 <__ssputs_r+0x6c>
 8005c56:	6965      	ldr	r5, [r4, #20]
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c5e:	eba3 0901 	sub.w	r9, r3, r1
 8005c62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c66:	1c7b      	adds	r3, r7, #1
 8005c68:	444b      	add	r3, r9
 8005c6a:	106d      	asrs	r5, r5, #1
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	bf38      	it	cc
 8005c70:	461d      	movcc	r5, r3
 8005c72:	0553      	lsls	r3, r2, #21
 8005c74:	d527      	bpl.n	8005cc6 <__ssputs_r+0x8e>
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7ff ff52 	bl	8005b20 <_malloc_r>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	b360      	cbz	r0, 8005cda <__ssputs_r+0xa2>
 8005c80:	6921      	ldr	r1, [r4, #16]
 8005c82:	464a      	mov	r2, r9
 8005c84:	f000 fd58 	bl	8006738 <memcpy>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	6126      	str	r6, [r4, #16]
 8005c96:	6165      	str	r5, [r4, #20]
 8005c98:	444e      	add	r6, r9
 8005c9a:	eba5 0509 	sub.w	r5, r5, r9
 8005c9e:	6026      	str	r6, [r4, #0]
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	463e      	mov	r6, r7
 8005ca4:	42be      	cmp	r6, r7
 8005ca6:	d900      	bls.n	8005caa <__ssputs_r+0x72>
 8005ca8:	463e      	mov	r6, r7
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	4632      	mov	r2, r6
 8005cae:	4641      	mov	r1, r8
 8005cb0:	f000 fcf6 	bl	80066a0 <memmove>
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	1b9b      	subs	r3, r3, r6
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	4433      	add	r3, r6
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	f000 fd44 	bl	8006754 <_realloc_r>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d1e0      	bne.n	8005c94 <__ssputs_r+0x5c>
 8005cd2:	6921      	ldr	r1, [r4, #16]
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f7ff feb7 	bl	8005a48 <_free_r>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	f8ca 3000 	str.w	r3, [sl]
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e7e9      	b.n	8005cc2 <__ssputs_r+0x8a>
	...

08005cf0 <_svfiprintf_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	898b      	ldrh	r3, [r1, #12]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	b09d      	sub	sp, #116	@ 0x74
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	d510      	bpl.n	8005d26 <_svfiprintf_r+0x36>
 8005d04:	690b      	ldr	r3, [r1, #16]
 8005d06:	b973      	cbnz	r3, 8005d26 <_svfiprintf_r+0x36>
 8005d08:	2140      	movs	r1, #64	@ 0x40
 8005d0a:	f7ff ff09 	bl	8005b20 <_malloc_r>
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	6128      	str	r0, [r5, #16]
 8005d12:	b930      	cbnz	r0, 8005d22 <_svfiprintf_r+0x32>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	b01d      	add	sp, #116	@ 0x74
 8005d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d22:	2340      	movs	r3, #64	@ 0x40
 8005d24:	616b      	str	r3, [r5, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d34:	2330      	movs	r3, #48	@ 0x30
 8005d36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ed4 <_svfiprintf_r+0x1e4>
 8005d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d3e:	f04f 0901 	mov.w	r9, #1
 8005d42:	4623      	mov	r3, r4
 8005d44:	469a      	mov	sl, r3
 8005d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4a:	b10a      	cbz	r2, 8005d50 <_svfiprintf_r+0x60>
 8005d4c:	2a25      	cmp	r2, #37	@ 0x25
 8005d4e:	d1f9      	bne.n	8005d44 <_svfiprintf_r+0x54>
 8005d50:	ebba 0b04 	subs.w	fp, sl, r4
 8005d54:	d00b      	beq.n	8005d6e <_svfiprintf_r+0x7e>
 8005d56:	465b      	mov	r3, fp
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff ff6b 	bl	8005c38 <__ssputs_r>
 8005d62:	3001      	adds	r0, #1
 8005d64:	f000 80a7 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6a:	445a      	add	r2, fp
 8005d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 809f 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d82:	f10a 0a01 	add.w	sl, sl, #1
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	9307      	str	r3, [sp, #28]
 8005d8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d90:	4654      	mov	r4, sl
 8005d92:	2205      	movs	r2, #5
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	484e      	ldr	r0, [pc, #312]	@ (8005ed4 <_svfiprintf_r+0x1e4>)
 8005d9a:	f7fa fa21 	bl	80001e0 <memchr>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	b9d8      	cbnz	r0, 8005dda <_svfiprintf_r+0xea>
 8005da2:	06d0      	lsls	r0, r2, #27
 8005da4:	bf44      	itt	mi
 8005da6:	2320      	movmi	r3, #32
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dac:	0711      	lsls	r1, r2, #28
 8005dae:	bf44      	itt	mi
 8005db0:	232b      	movmi	r3, #43	@ 0x2b
 8005db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dbc:	d015      	beq.n	8005dea <_svfiprintf_r+0xfa>
 8005dbe:	9a07      	ldr	r2, [sp, #28]
 8005dc0:	4654      	mov	r4, sl
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dce:	3b30      	subs	r3, #48	@ 0x30
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d94b      	bls.n	8005e6c <_svfiprintf_r+0x17c>
 8005dd4:	b1b0      	cbz	r0, 8005e04 <_svfiprintf_r+0x114>
 8005dd6:	9207      	str	r2, [sp, #28]
 8005dd8:	e014      	b.n	8005e04 <_svfiprintf_r+0x114>
 8005dda:	eba0 0308 	sub.w	r3, r0, r8
 8005dde:	fa09 f303 	lsl.w	r3, r9, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	46a2      	mov	sl, r4
 8005de8:	e7d2      	b.n	8005d90 <_svfiprintf_r+0xa0>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	9103      	str	r1, [sp, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfbb      	ittet	lt
 8005df6:	425b      	neglt	r3, r3
 8005df8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dfc:	9307      	strge	r3, [sp, #28]
 8005dfe:	9307      	strlt	r3, [sp, #28]
 8005e00:	bfb8      	it	lt
 8005e02:	9204      	strlt	r2, [sp, #16]
 8005e04:	7823      	ldrb	r3, [r4, #0]
 8005e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e08:	d10a      	bne.n	8005e20 <_svfiprintf_r+0x130>
 8005e0a:	7863      	ldrb	r3, [r4, #1]
 8005e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e0e:	d132      	bne.n	8005e76 <_svfiprintf_r+0x186>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	9203      	str	r2, [sp, #12]
 8005e18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e1c:	3402      	adds	r4, #2
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ee4 <_svfiprintf_r+0x1f4>
 8005e24:	7821      	ldrb	r1, [r4, #0]
 8005e26:	2203      	movs	r2, #3
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f7fa f9d9 	bl	80001e0 <memchr>
 8005e2e:	b138      	cbz	r0, 8005e40 <_svfiprintf_r+0x150>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	eba0 000a 	sub.w	r0, r0, sl
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	4082      	lsls	r2, r0
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	3401      	adds	r4, #1
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	4824      	ldr	r0, [pc, #144]	@ (8005ed8 <_svfiprintf_r+0x1e8>)
 8005e46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	f7fa f9c8 	bl	80001e0 <memchr>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d036      	beq.n	8005ec2 <_svfiprintf_r+0x1d2>
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <_svfiprintf_r+0x1ec>)
 8005e56:	bb1b      	cbnz	r3, 8005ea0 <_svfiprintf_r+0x1b0>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	3307      	adds	r3, #7
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	3308      	adds	r3, #8
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	4433      	add	r3, r6
 8005e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6a:	e76a      	b.n	8005d42 <_svfiprintf_r+0x52>
 8005e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e70:	460c      	mov	r4, r1
 8005e72:	2001      	movs	r0, #1
 8005e74:	e7a8      	b.n	8005dc8 <_svfiprintf_r+0xd8>
 8005e76:	2300      	movs	r3, #0
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 0c0a 	mov.w	ip, #10
 8005e82:	4620      	mov	r0, r4
 8005e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e88:	3a30      	subs	r2, #48	@ 0x30
 8005e8a:	2a09      	cmp	r2, #9
 8005e8c:	d903      	bls.n	8005e96 <_svfiprintf_r+0x1a6>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0c6      	beq.n	8005e20 <_svfiprintf_r+0x130>
 8005e92:	9105      	str	r1, [sp, #20]
 8005e94:	e7c4      	b.n	8005e20 <_svfiprintf_r+0x130>
 8005e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e7f0      	b.n	8005e82 <_svfiprintf_r+0x192>
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <_svfiprintf_r+0x1f0>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f3af 8000 	nop.w
 8005eb0:	1c42      	adds	r2, r0, #1
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	d1d6      	bne.n	8005e64 <_svfiprintf_r+0x174>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	065b      	lsls	r3, r3, #25
 8005eba:	f53f af2d 	bmi.w	8005d18 <_svfiprintf_r+0x28>
 8005ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec0:	e72c      	b.n	8005d1c <_svfiprintf_r+0x2c>
 8005ec2:	ab03      	add	r3, sp, #12
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <_svfiprintf_r+0x1f0>)
 8005eca:	a904      	add	r1, sp, #16
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f000 f9bb 	bl	8006248 <_printf_i>
 8005ed2:	e7ed      	b.n	8005eb0 <_svfiprintf_r+0x1c0>
 8005ed4:	08006938 	.word	0x08006938
 8005ed8:	08006942 	.word	0x08006942
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	08005c39 	.word	0x08005c39
 8005ee4:	0800693e 	.word	0x0800693e

08005ee8 <__sfputc_r>:
 8005ee8:	6893      	ldr	r3, [r2, #8]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	b410      	push	{r4}
 8005ef0:	6093      	str	r3, [r2, #8]
 8005ef2:	da08      	bge.n	8005f06 <__sfputc_r+0x1e>
 8005ef4:	6994      	ldr	r4, [r2, #24]
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	db01      	blt.n	8005efe <__sfputc_r+0x16>
 8005efa:	290a      	cmp	r1, #10
 8005efc:	d103      	bne.n	8005f06 <__sfputc_r+0x1e>
 8005efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f02:	f7ff bc90 	b.w	8005826 <__swbuf_r>
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	1c58      	adds	r0, r3, #1
 8005f0a:	6010      	str	r0, [r2, #0]
 8005f0c:	7019      	strb	r1, [r3, #0]
 8005f0e:	4608      	mov	r0, r1
 8005f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <__sfputs_r>:
 8005f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f18:	4606      	mov	r6, r0
 8005f1a:	460f      	mov	r7, r1
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	18d5      	adds	r5, r2, r3
 8005f20:	42ac      	cmp	r4, r5
 8005f22:	d101      	bne.n	8005f28 <__sfputs_r+0x12>
 8005f24:	2000      	movs	r0, #0
 8005f26:	e007      	b.n	8005f38 <__sfputs_r+0x22>
 8005f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff ffda 	bl	8005ee8 <__sfputc_r>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d1f3      	bne.n	8005f20 <__sfputs_r+0xa>
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f3c <_vfiprintf_r>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	460d      	mov	r5, r1
 8005f42:	b09d      	sub	sp, #116	@ 0x74
 8005f44:	4614      	mov	r4, r2
 8005f46:	4698      	mov	r8, r3
 8005f48:	4606      	mov	r6, r0
 8005f4a:	b118      	cbz	r0, 8005f54 <_vfiprintf_r+0x18>
 8005f4c:	6a03      	ldr	r3, [r0, #32]
 8005f4e:	b90b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x18>
 8005f50:	f7ff fb5e 	bl	8005610 <__sinit>
 8005f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_vfiprintf_r+0x2a>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_vfiprintf_r+0x2a>
 8005f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f62:	f7ff fd6e 	bl	8005a42 <__retarget_lock_acquire_recursive>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	071b      	lsls	r3, r3, #28
 8005f6a:	d501      	bpl.n	8005f70 <_vfiprintf_r+0x34>
 8005f6c:	692b      	ldr	r3, [r5, #16]
 8005f6e:	b99b      	cbnz	r3, 8005f98 <_vfiprintf_r+0x5c>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7ff fc96 	bl	80058a4 <__swsetup_r>
 8005f78:	b170      	cbz	r0, 8005f98 <_vfiprintf_r+0x5c>
 8005f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f7c:	07dc      	lsls	r4, r3, #31
 8005f7e:	d504      	bpl.n	8005f8a <_vfiprintf_r+0x4e>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	b01d      	add	sp, #116	@ 0x74
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	0598      	lsls	r0, r3, #22
 8005f8e:	d4f7      	bmi.n	8005f80 <_vfiprintf_r+0x44>
 8005f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f92:	f7ff fd57 	bl	8005a44 <__retarget_lock_release_recursive>
 8005f96:	e7f3      	b.n	8005f80 <_vfiprintf_r+0x44>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa6:	2330      	movs	r3, #48	@ 0x30
 8005fa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006158 <_vfiprintf_r+0x21c>
 8005fac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fb0:	f04f 0901 	mov.w	r9, #1
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	469a      	mov	sl, r3
 8005fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fbc:	b10a      	cbz	r2, 8005fc2 <_vfiprintf_r+0x86>
 8005fbe:	2a25      	cmp	r2, #37	@ 0x25
 8005fc0:	d1f9      	bne.n	8005fb6 <_vfiprintf_r+0x7a>
 8005fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc6:	d00b      	beq.n	8005fe0 <_vfiprintf_r+0xa4>
 8005fc8:	465b      	mov	r3, fp
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff ffa1 	bl	8005f16 <__sfputs_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f000 80a7 	beq.w	8006128 <_vfiprintf_r+0x1ec>
 8005fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fdc:	445a      	add	r2, fp
 8005fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 809f 	beq.w	8006128 <_vfiprintf_r+0x1ec>
 8005fea:	2300      	movs	r3, #0
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff4:	f10a 0a01 	add.w	sl, sl, #1
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006000:	931a      	str	r3, [sp, #104]	@ 0x68
 8006002:	4654      	mov	r4, sl
 8006004:	2205      	movs	r2, #5
 8006006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600a:	4853      	ldr	r0, [pc, #332]	@ (8006158 <_vfiprintf_r+0x21c>)
 800600c:	f7fa f8e8 	bl	80001e0 <memchr>
 8006010:	9a04      	ldr	r2, [sp, #16]
 8006012:	b9d8      	cbnz	r0, 800604c <_vfiprintf_r+0x110>
 8006014:	06d1      	lsls	r1, r2, #27
 8006016:	bf44      	itt	mi
 8006018:	2320      	movmi	r3, #32
 800601a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800601e:	0713      	lsls	r3, r2, #28
 8006020:	bf44      	itt	mi
 8006022:	232b      	movmi	r3, #43	@ 0x2b
 8006024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006028:	f89a 3000 	ldrb.w	r3, [sl]
 800602c:	2b2a      	cmp	r3, #42	@ 0x2a
 800602e:	d015      	beq.n	800605c <_vfiprintf_r+0x120>
 8006030:	9a07      	ldr	r2, [sp, #28]
 8006032:	4654      	mov	r4, sl
 8006034:	2000      	movs	r0, #0
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4621      	mov	r1, r4
 800603c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006040:	3b30      	subs	r3, #48	@ 0x30
 8006042:	2b09      	cmp	r3, #9
 8006044:	d94b      	bls.n	80060de <_vfiprintf_r+0x1a2>
 8006046:	b1b0      	cbz	r0, 8006076 <_vfiprintf_r+0x13a>
 8006048:	9207      	str	r2, [sp, #28]
 800604a:	e014      	b.n	8006076 <_vfiprintf_r+0x13a>
 800604c:	eba0 0308 	sub.w	r3, r0, r8
 8006050:	fa09 f303 	lsl.w	r3, r9, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	46a2      	mov	sl, r4
 800605a:	e7d2      	b.n	8006002 <_vfiprintf_r+0xc6>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	1d19      	adds	r1, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	9103      	str	r1, [sp, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbb      	ittet	lt
 8006068:	425b      	neglt	r3, r3
 800606a:	f042 0202 	orrlt.w	r2, r2, #2
 800606e:	9307      	strge	r3, [sp, #28]
 8006070:	9307      	strlt	r3, [sp, #28]
 8006072:	bfb8      	it	lt
 8006074:	9204      	strlt	r2, [sp, #16]
 8006076:	7823      	ldrb	r3, [r4, #0]
 8006078:	2b2e      	cmp	r3, #46	@ 0x2e
 800607a:	d10a      	bne.n	8006092 <_vfiprintf_r+0x156>
 800607c:	7863      	ldrb	r3, [r4, #1]
 800607e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006080:	d132      	bne.n	80060e8 <_vfiprintf_r+0x1ac>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800608e:	3402      	adds	r4, #2
 8006090:	9305      	str	r3, [sp, #20]
 8006092:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006168 <_vfiprintf_r+0x22c>
 8006096:	7821      	ldrb	r1, [r4, #0]
 8006098:	2203      	movs	r2, #3
 800609a:	4650      	mov	r0, sl
 800609c:	f7fa f8a0 	bl	80001e0 <memchr>
 80060a0:	b138      	cbz	r0, 80060b2 <_vfiprintf_r+0x176>
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	eba0 000a 	sub.w	r0, r0, sl
 80060a8:	2240      	movs	r2, #64	@ 0x40
 80060aa:	4082      	lsls	r2, r0
 80060ac:	4313      	orrs	r3, r2
 80060ae:	3401      	adds	r4, #1
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b6:	4829      	ldr	r0, [pc, #164]	@ (800615c <_vfiprintf_r+0x220>)
 80060b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060bc:	2206      	movs	r2, #6
 80060be:	f7fa f88f 	bl	80001e0 <memchr>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d03f      	beq.n	8006146 <_vfiprintf_r+0x20a>
 80060c6:	4b26      	ldr	r3, [pc, #152]	@ (8006160 <_vfiprintf_r+0x224>)
 80060c8:	bb1b      	cbnz	r3, 8006112 <_vfiprintf_r+0x1d6>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	3307      	adds	r3, #7
 80060ce:	f023 0307 	bic.w	r3, r3, #7
 80060d2:	3308      	adds	r3, #8
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d8:	443b      	add	r3, r7
 80060da:	9309      	str	r3, [sp, #36]	@ 0x24
 80060dc:	e76a      	b.n	8005fb4 <_vfiprintf_r+0x78>
 80060de:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e2:	460c      	mov	r4, r1
 80060e4:	2001      	movs	r0, #1
 80060e6:	e7a8      	b.n	800603a <_vfiprintf_r+0xfe>
 80060e8:	2300      	movs	r3, #0
 80060ea:	3401      	adds	r4, #1
 80060ec:	9305      	str	r3, [sp, #20]
 80060ee:	4619      	mov	r1, r3
 80060f0:	f04f 0c0a 	mov.w	ip, #10
 80060f4:	4620      	mov	r0, r4
 80060f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fa:	3a30      	subs	r2, #48	@ 0x30
 80060fc:	2a09      	cmp	r2, #9
 80060fe:	d903      	bls.n	8006108 <_vfiprintf_r+0x1cc>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0c6      	beq.n	8006092 <_vfiprintf_r+0x156>
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	e7c4      	b.n	8006092 <_vfiprintf_r+0x156>
 8006108:	fb0c 2101 	mla	r1, ip, r1, r2
 800610c:	4604      	mov	r4, r0
 800610e:	2301      	movs	r3, #1
 8006110:	e7f0      	b.n	80060f4 <_vfiprintf_r+0x1b8>
 8006112:	ab03      	add	r3, sp, #12
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	462a      	mov	r2, r5
 8006118:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <_vfiprintf_r+0x228>)
 800611a:	a904      	add	r1, sp, #16
 800611c:	4630      	mov	r0, r6
 800611e:	f3af 8000 	nop.w
 8006122:	4607      	mov	r7, r0
 8006124:	1c78      	adds	r0, r7, #1
 8006126:	d1d6      	bne.n	80060d6 <_vfiprintf_r+0x19a>
 8006128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612a:	07d9      	lsls	r1, r3, #31
 800612c:	d405      	bmi.n	800613a <_vfiprintf_r+0x1fe>
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	059a      	lsls	r2, r3, #22
 8006132:	d402      	bmi.n	800613a <_vfiprintf_r+0x1fe>
 8006134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006136:	f7ff fc85 	bl	8005a44 <__retarget_lock_release_recursive>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	065b      	lsls	r3, r3, #25
 800613e:	f53f af1f 	bmi.w	8005f80 <_vfiprintf_r+0x44>
 8006142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006144:	e71e      	b.n	8005f84 <_vfiprintf_r+0x48>
 8006146:	ab03      	add	r3, sp, #12
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	462a      	mov	r2, r5
 800614c:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <_vfiprintf_r+0x228>)
 800614e:	a904      	add	r1, sp, #16
 8006150:	4630      	mov	r0, r6
 8006152:	f000 f879 	bl	8006248 <_printf_i>
 8006156:	e7e4      	b.n	8006122 <_vfiprintf_r+0x1e6>
 8006158:	08006938 	.word	0x08006938
 800615c:	08006942 	.word	0x08006942
 8006160:	00000000 	.word	0x00000000
 8006164:	08005f17 	.word	0x08005f17
 8006168:	0800693e 	.word	0x0800693e

0800616c <_printf_common>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	4616      	mov	r6, r2
 8006172:	4698      	mov	r8, r3
 8006174:	688a      	ldr	r2, [r1, #8]
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800617c:	4293      	cmp	r3, r2
 800617e:	bfb8      	it	lt
 8006180:	4613      	movlt	r3, r2
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006188:	4607      	mov	r7, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b10a      	cbz	r2, 8006192 <_printf_common+0x26>
 800618e:	3301      	adds	r3, #1
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	0699      	lsls	r1, r3, #26
 8006196:	bf42      	ittt	mi
 8006198:	6833      	ldrmi	r3, [r6, #0]
 800619a:	3302      	addmi	r3, #2
 800619c:	6033      	strmi	r3, [r6, #0]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	f015 0506 	ands.w	r5, r5, #6
 80061a4:	d106      	bne.n	80061b4 <_printf_common+0x48>
 80061a6:	f104 0a19 	add.w	sl, r4, #25
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	6832      	ldr	r2, [r6, #0]
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dc26      	bgt.n	8006202 <_printf_common+0x96>
 80061b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	3b00      	subs	r3, #0
 80061bc:	bf18      	it	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	0692      	lsls	r2, r2, #26
 80061c2:	d42b      	bmi.n	800621c <_printf_common+0xb0>
 80061c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061c8:	4641      	mov	r1, r8
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c8      	blx	r9
 80061ce:	3001      	adds	r0, #1
 80061d0:	d01e      	beq.n	8006210 <_printf_common+0xa4>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	6922      	ldr	r2, [r4, #16]
 80061d6:	f003 0306 	and.w	r3, r3, #6
 80061da:	2b04      	cmp	r3, #4
 80061dc:	bf02      	ittt	eq
 80061de:	68e5      	ldreq	r5, [r4, #12]
 80061e0:	6833      	ldreq	r3, [r6, #0]
 80061e2:	1aed      	subeq	r5, r5, r3
 80061e4:	68a3      	ldr	r3, [r4, #8]
 80061e6:	bf0c      	ite	eq
 80061e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ec:	2500      	movne	r5, #0
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bfc4      	itt	gt
 80061f2:	1a9b      	subgt	r3, r3, r2
 80061f4:	18ed      	addgt	r5, r5, r3
 80061f6:	2600      	movs	r6, #0
 80061f8:	341a      	adds	r4, #26
 80061fa:	42b5      	cmp	r5, r6
 80061fc:	d11a      	bne.n	8006234 <_printf_common+0xc8>
 80061fe:	2000      	movs	r0, #0
 8006200:	e008      	b.n	8006214 <_printf_common+0xa8>
 8006202:	2301      	movs	r3, #1
 8006204:	4652      	mov	r2, sl
 8006206:	4641      	mov	r1, r8
 8006208:	4638      	mov	r0, r7
 800620a:	47c8      	blx	r9
 800620c:	3001      	adds	r0, #1
 800620e:	d103      	bne.n	8006218 <_printf_common+0xac>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	3501      	adds	r5, #1
 800621a:	e7c6      	b.n	80061aa <_printf_common+0x3e>
 800621c:	18e1      	adds	r1, r4, r3
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	2030      	movs	r0, #48	@ 0x30
 8006222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006226:	4422      	add	r2, r4
 8006228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800622c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006230:	3302      	adds	r3, #2
 8006232:	e7c7      	b.n	80061c4 <_printf_common+0x58>
 8006234:	2301      	movs	r3, #1
 8006236:	4622      	mov	r2, r4
 8006238:	4641      	mov	r1, r8
 800623a:	4638      	mov	r0, r7
 800623c:	47c8      	blx	r9
 800623e:	3001      	adds	r0, #1
 8006240:	d0e6      	beq.n	8006210 <_printf_common+0xa4>
 8006242:	3601      	adds	r6, #1
 8006244:	e7d9      	b.n	80061fa <_printf_common+0x8e>
	...

08006248 <_printf_i>:
 8006248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	7e0f      	ldrb	r7, [r1, #24]
 800624e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006250:	2f78      	cmp	r7, #120	@ 0x78
 8006252:	4691      	mov	r9, r2
 8006254:	4680      	mov	r8, r0
 8006256:	460c      	mov	r4, r1
 8006258:	469a      	mov	sl, r3
 800625a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800625e:	d807      	bhi.n	8006270 <_printf_i+0x28>
 8006260:	2f62      	cmp	r7, #98	@ 0x62
 8006262:	d80a      	bhi.n	800627a <_printf_i+0x32>
 8006264:	2f00      	cmp	r7, #0
 8006266:	f000 80d1 	beq.w	800640c <_printf_i+0x1c4>
 800626a:	2f58      	cmp	r7, #88	@ 0x58
 800626c:	f000 80b8 	beq.w	80063e0 <_printf_i+0x198>
 8006270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006278:	e03a      	b.n	80062f0 <_printf_i+0xa8>
 800627a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800627e:	2b15      	cmp	r3, #21
 8006280:	d8f6      	bhi.n	8006270 <_printf_i+0x28>
 8006282:	a101      	add	r1, pc, #4	@ (adr r1, 8006288 <_printf_i+0x40>)
 8006284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006288:	080062e1 	.word	0x080062e1
 800628c:	080062f5 	.word	0x080062f5
 8006290:	08006271 	.word	0x08006271
 8006294:	08006271 	.word	0x08006271
 8006298:	08006271 	.word	0x08006271
 800629c:	08006271 	.word	0x08006271
 80062a0:	080062f5 	.word	0x080062f5
 80062a4:	08006271 	.word	0x08006271
 80062a8:	08006271 	.word	0x08006271
 80062ac:	08006271 	.word	0x08006271
 80062b0:	08006271 	.word	0x08006271
 80062b4:	080063f3 	.word	0x080063f3
 80062b8:	0800631f 	.word	0x0800631f
 80062bc:	080063ad 	.word	0x080063ad
 80062c0:	08006271 	.word	0x08006271
 80062c4:	08006271 	.word	0x08006271
 80062c8:	08006415 	.word	0x08006415
 80062cc:	08006271 	.word	0x08006271
 80062d0:	0800631f 	.word	0x0800631f
 80062d4:	08006271 	.word	0x08006271
 80062d8:	08006271 	.word	0x08006271
 80062dc:	080063b5 	.word	0x080063b5
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6032      	str	r2, [r6, #0]
 80062e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f0:	2301      	movs	r3, #1
 80062f2:	e09c      	b.n	800642e <_printf_i+0x1e6>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	6820      	ldr	r0, [r4, #0]
 80062f8:	1d19      	adds	r1, r3, #4
 80062fa:	6031      	str	r1, [r6, #0]
 80062fc:	0606      	lsls	r6, r0, #24
 80062fe:	d501      	bpl.n	8006304 <_printf_i+0xbc>
 8006300:	681d      	ldr	r5, [r3, #0]
 8006302:	e003      	b.n	800630c <_printf_i+0xc4>
 8006304:	0645      	lsls	r5, r0, #25
 8006306:	d5fb      	bpl.n	8006300 <_printf_i+0xb8>
 8006308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800630c:	2d00      	cmp	r5, #0
 800630e:	da03      	bge.n	8006318 <_printf_i+0xd0>
 8006310:	232d      	movs	r3, #45	@ 0x2d
 8006312:	426d      	negs	r5, r5
 8006314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006318:	4858      	ldr	r0, [pc, #352]	@ (800647c <_printf_i+0x234>)
 800631a:	230a      	movs	r3, #10
 800631c:	e011      	b.n	8006342 <_printf_i+0xfa>
 800631e:	6821      	ldr	r1, [r4, #0]
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	0608      	lsls	r0, r1, #24
 8006324:	f853 5b04 	ldr.w	r5, [r3], #4
 8006328:	d402      	bmi.n	8006330 <_printf_i+0xe8>
 800632a:	0649      	lsls	r1, r1, #25
 800632c:	bf48      	it	mi
 800632e:	b2ad      	uxthmi	r5, r5
 8006330:	2f6f      	cmp	r7, #111	@ 0x6f
 8006332:	4852      	ldr	r0, [pc, #328]	@ (800647c <_printf_i+0x234>)
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	bf14      	ite	ne
 8006338:	230a      	movne	r3, #10
 800633a:	2308      	moveq	r3, #8
 800633c:	2100      	movs	r1, #0
 800633e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006342:	6866      	ldr	r6, [r4, #4]
 8006344:	60a6      	str	r6, [r4, #8]
 8006346:	2e00      	cmp	r6, #0
 8006348:	db05      	blt.n	8006356 <_printf_i+0x10e>
 800634a:	6821      	ldr	r1, [r4, #0]
 800634c:	432e      	orrs	r6, r5
 800634e:	f021 0104 	bic.w	r1, r1, #4
 8006352:	6021      	str	r1, [r4, #0]
 8006354:	d04b      	beq.n	80063ee <_printf_i+0x1a6>
 8006356:	4616      	mov	r6, r2
 8006358:	fbb5 f1f3 	udiv	r1, r5, r3
 800635c:	fb03 5711 	mls	r7, r3, r1, r5
 8006360:	5dc7      	ldrb	r7, [r0, r7]
 8006362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006366:	462f      	mov	r7, r5
 8006368:	42bb      	cmp	r3, r7
 800636a:	460d      	mov	r5, r1
 800636c:	d9f4      	bls.n	8006358 <_printf_i+0x110>
 800636e:	2b08      	cmp	r3, #8
 8006370:	d10b      	bne.n	800638a <_printf_i+0x142>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	07df      	lsls	r7, r3, #31
 8006376:	d508      	bpl.n	800638a <_printf_i+0x142>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	6861      	ldr	r1, [r4, #4]
 800637c:	4299      	cmp	r1, r3
 800637e:	bfde      	ittt	le
 8006380:	2330      	movle	r3, #48	@ 0x30
 8006382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800638a:	1b92      	subs	r2, r2, r6
 800638c:	6122      	str	r2, [r4, #16]
 800638e:	f8cd a000 	str.w	sl, [sp]
 8006392:	464b      	mov	r3, r9
 8006394:	aa03      	add	r2, sp, #12
 8006396:	4621      	mov	r1, r4
 8006398:	4640      	mov	r0, r8
 800639a:	f7ff fee7 	bl	800616c <_printf_common>
 800639e:	3001      	adds	r0, #1
 80063a0:	d14a      	bne.n	8006438 <_printf_i+0x1f0>
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	b004      	add	sp, #16
 80063a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	f043 0320 	orr.w	r3, r3, #32
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	4832      	ldr	r0, [pc, #200]	@ (8006480 <_printf_i+0x238>)
 80063b6:	2778      	movs	r7, #120	@ 0x78
 80063b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	6831      	ldr	r1, [r6, #0]
 80063c0:	061f      	lsls	r7, r3, #24
 80063c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80063c6:	d402      	bmi.n	80063ce <_printf_i+0x186>
 80063c8:	065f      	lsls	r7, r3, #25
 80063ca:	bf48      	it	mi
 80063cc:	b2ad      	uxthmi	r5, r5
 80063ce:	6031      	str	r1, [r6, #0]
 80063d0:	07d9      	lsls	r1, r3, #31
 80063d2:	bf44      	itt	mi
 80063d4:	f043 0320 	orrmi.w	r3, r3, #32
 80063d8:	6023      	strmi	r3, [r4, #0]
 80063da:	b11d      	cbz	r5, 80063e4 <_printf_i+0x19c>
 80063dc:	2310      	movs	r3, #16
 80063de:	e7ad      	b.n	800633c <_printf_i+0xf4>
 80063e0:	4826      	ldr	r0, [pc, #152]	@ (800647c <_printf_i+0x234>)
 80063e2:	e7e9      	b.n	80063b8 <_printf_i+0x170>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	f023 0320 	bic.w	r3, r3, #32
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	e7f6      	b.n	80063dc <_printf_i+0x194>
 80063ee:	4616      	mov	r6, r2
 80063f0:	e7bd      	b.n	800636e <_printf_i+0x126>
 80063f2:	6833      	ldr	r3, [r6, #0]
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	6961      	ldr	r1, [r4, #20]
 80063f8:	1d18      	adds	r0, r3, #4
 80063fa:	6030      	str	r0, [r6, #0]
 80063fc:	062e      	lsls	r6, r5, #24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	d501      	bpl.n	8006406 <_printf_i+0x1be>
 8006402:	6019      	str	r1, [r3, #0]
 8006404:	e002      	b.n	800640c <_printf_i+0x1c4>
 8006406:	0668      	lsls	r0, r5, #25
 8006408:	d5fb      	bpl.n	8006402 <_printf_i+0x1ba>
 800640a:	8019      	strh	r1, [r3, #0]
 800640c:	2300      	movs	r3, #0
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	4616      	mov	r6, r2
 8006412:	e7bc      	b.n	800638e <_printf_i+0x146>
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	6032      	str	r2, [r6, #0]
 800641a:	681e      	ldr	r6, [r3, #0]
 800641c:	6862      	ldr	r2, [r4, #4]
 800641e:	2100      	movs	r1, #0
 8006420:	4630      	mov	r0, r6
 8006422:	f7f9 fedd 	bl	80001e0 <memchr>
 8006426:	b108      	cbz	r0, 800642c <_printf_i+0x1e4>
 8006428:	1b80      	subs	r0, r0, r6
 800642a:	6060      	str	r0, [r4, #4]
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	2300      	movs	r3, #0
 8006432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006436:	e7aa      	b.n	800638e <_printf_i+0x146>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	4632      	mov	r2, r6
 800643c:	4649      	mov	r1, r9
 800643e:	4640      	mov	r0, r8
 8006440:	47d0      	blx	sl
 8006442:	3001      	adds	r0, #1
 8006444:	d0ad      	beq.n	80063a2 <_printf_i+0x15a>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	079b      	lsls	r3, r3, #30
 800644a:	d413      	bmi.n	8006474 <_printf_i+0x22c>
 800644c:	68e0      	ldr	r0, [r4, #12]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	4298      	cmp	r0, r3
 8006452:	bfb8      	it	lt
 8006454:	4618      	movlt	r0, r3
 8006456:	e7a6      	b.n	80063a6 <_printf_i+0x15e>
 8006458:	2301      	movs	r3, #1
 800645a:	4632      	mov	r2, r6
 800645c:	4649      	mov	r1, r9
 800645e:	4640      	mov	r0, r8
 8006460:	47d0      	blx	sl
 8006462:	3001      	adds	r0, #1
 8006464:	d09d      	beq.n	80063a2 <_printf_i+0x15a>
 8006466:	3501      	adds	r5, #1
 8006468:	68e3      	ldr	r3, [r4, #12]
 800646a:	9903      	ldr	r1, [sp, #12]
 800646c:	1a5b      	subs	r3, r3, r1
 800646e:	42ab      	cmp	r3, r5
 8006470:	dcf2      	bgt.n	8006458 <_printf_i+0x210>
 8006472:	e7eb      	b.n	800644c <_printf_i+0x204>
 8006474:	2500      	movs	r5, #0
 8006476:	f104 0619 	add.w	r6, r4, #25
 800647a:	e7f5      	b.n	8006468 <_printf_i+0x220>
 800647c:	08006949 	.word	0x08006949
 8006480:	0800695a 	.word	0x0800695a

08006484 <__sflush_r>:
 8006484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648c:	0716      	lsls	r6, r2, #28
 800648e:	4605      	mov	r5, r0
 8006490:	460c      	mov	r4, r1
 8006492:	d454      	bmi.n	800653e <__sflush_r+0xba>
 8006494:	684b      	ldr	r3, [r1, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dc02      	bgt.n	80064a0 <__sflush_r+0x1c>
 800649a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	dd48      	ble.n	8006532 <__sflush_r+0xae>
 80064a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064a2:	2e00      	cmp	r6, #0
 80064a4:	d045      	beq.n	8006532 <__sflush_r+0xae>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064ac:	682f      	ldr	r7, [r5, #0]
 80064ae:	6a21      	ldr	r1, [r4, #32]
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	d030      	beq.n	8006516 <__sflush_r+0x92>
 80064b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	0759      	lsls	r1, r3, #29
 80064ba:	d505      	bpl.n	80064c8 <__sflush_r+0x44>
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064c2:	b10b      	cbz	r3, 80064c8 <__sflush_r+0x44>
 80064c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	2300      	movs	r3, #0
 80064ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064cc:	6a21      	ldr	r1, [r4, #32]
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b0      	blx	r6
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	d106      	bne.n	80064e6 <__sflush_r+0x62>
 80064d8:	6829      	ldr	r1, [r5, #0]
 80064da:	291d      	cmp	r1, #29
 80064dc:	d82b      	bhi.n	8006536 <__sflush_r+0xb2>
 80064de:	4a2a      	ldr	r2, [pc, #168]	@ (8006588 <__sflush_r+0x104>)
 80064e0:	40ca      	lsrs	r2, r1
 80064e2:	07d6      	lsls	r6, r2, #31
 80064e4:	d527      	bpl.n	8006536 <__sflush_r+0xb2>
 80064e6:	2200      	movs	r2, #0
 80064e8:	6062      	str	r2, [r4, #4]
 80064ea:	04d9      	lsls	r1, r3, #19
 80064ec:	6922      	ldr	r2, [r4, #16]
 80064ee:	6022      	str	r2, [r4, #0]
 80064f0:	d504      	bpl.n	80064fc <__sflush_r+0x78>
 80064f2:	1c42      	adds	r2, r0, #1
 80064f4:	d101      	bne.n	80064fa <__sflush_r+0x76>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	b903      	cbnz	r3, 80064fc <__sflush_r+0x78>
 80064fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80064fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064fe:	602f      	str	r7, [r5, #0]
 8006500:	b1b9      	cbz	r1, 8006532 <__sflush_r+0xae>
 8006502:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006506:	4299      	cmp	r1, r3
 8006508:	d002      	beq.n	8006510 <__sflush_r+0x8c>
 800650a:	4628      	mov	r0, r5
 800650c:	f7ff fa9c 	bl	8005a48 <_free_r>
 8006510:	2300      	movs	r3, #0
 8006512:	6363      	str	r3, [r4, #52]	@ 0x34
 8006514:	e00d      	b.n	8006532 <__sflush_r+0xae>
 8006516:	2301      	movs	r3, #1
 8006518:	4628      	mov	r0, r5
 800651a:	47b0      	blx	r6
 800651c:	4602      	mov	r2, r0
 800651e:	1c50      	adds	r0, r2, #1
 8006520:	d1c9      	bne.n	80064b6 <__sflush_r+0x32>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0c6      	beq.n	80064b6 <__sflush_r+0x32>
 8006528:	2b1d      	cmp	r3, #29
 800652a:	d001      	beq.n	8006530 <__sflush_r+0xac>
 800652c:	2b16      	cmp	r3, #22
 800652e:	d11e      	bne.n	800656e <__sflush_r+0xea>
 8006530:	602f      	str	r7, [r5, #0]
 8006532:	2000      	movs	r0, #0
 8006534:	e022      	b.n	800657c <__sflush_r+0xf8>
 8006536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653a:	b21b      	sxth	r3, r3
 800653c:	e01b      	b.n	8006576 <__sflush_r+0xf2>
 800653e:	690f      	ldr	r7, [r1, #16]
 8006540:	2f00      	cmp	r7, #0
 8006542:	d0f6      	beq.n	8006532 <__sflush_r+0xae>
 8006544:	0793      	lsls	r3, r2, #30
 8006546:	680e      	ldr	r6, [r1, #0]
 8006548:	bf08      	it	eq
 800654a:	694b      	ldreq	r3, [r1, #20]
 800654c:	600f      	str	r7, [r1, #0]
 800654e:	bf18      	it	ne
 8006550:	2300      	movne	r3, #0
 8006552:	eba6 0807 	sub.w	r8, r6, r7
 8006556:	608b      	str	r3, [r1, #8]
 8006558:	f1b8 0f00 	cmp.w	r8, #0
 800655c:	dde9      	ble.n	8006532 <__sflush_r+0xae>
 800655e:	6a21      	ldr	r1, [r4, #32]
 8006560:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006562:	4643      	mov	r3, r8
 8006564:	463a      	mov	r2, r7
 8006566:	4628      	mov	r0, r5
 8006568:	47b0      	blx	r6
 800656a:	2800      	cmp	r0, #0
 800656c:	dc08      	bgt.n	8006580 <__sflush_r+0xfc>
 800656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006580:	4407      	add	r7, r0
 8006582:	eba8 0800 	sub.w	r8, r8, r0
 8006586:	e7e7      	b.n	8006558 <__sflush_r+0xd4>
 8006588:	20400001 	.word	0x20400001

0800658c <_fflush_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b913      	cbnz	r3, 800659c <_fflush_r+0x10>
 8006596:	2500      	movs	r5, #0
 8006598:	4628      	mov	r0, r5
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	b118      	cbz	r0, 80065a6 <_fflush_r+0x1a>
 800659e:	6a03      	ldr	r3, [r0, #32]
 80065a0:	b90b      	cbnz	r3, 80065a6 <_fflush_r+0x1a>
 80065a2:	f7ff f835 	bl	8005610 <__sinit>
 80065a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f3      	beq.n	8006596 <_fflush_r+0xa>
 80065ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d404      	bmi.n	80065be <_fflush_r+0x32>
 80065b4:	0599      	lsls	r1, r3, #22
 80065b6:	d402      	bmi.n	80065be <_fflush_r+0x32>
 80065b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ba:	f7ff fa42 	bl	8005a42 <__retarget_lock_acquire_recursive>
 80065be:	4628      	mov	r0, r5
 80065c0:	4621      	mov	r1, r4
 80065c2:	f7ff ff5f 	bl	8006484 <__sflush_r>
 80065c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065c8:	07da      	lsls	r2, r3, #31
 80065ca:	4605      	mov	r5, r0
 80065cc:	d4e4      	bmi.n	8006598 <_fflush_r+0xc>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	059b      	lsls	r3, r3, #22
 80065d2:	d4e1      	bmi.n	8006598 <_fflush_r+0xc>
 80065d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d6:	f7ff fa35 	bl	8005a44 <__retarget_lock_release_recursive>
 80065da:	e7dd      	b.n	8006598 <_fflush_r+0xc>

080065dc <__swhatbuf_r>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	2900      	cmp	r1, #0
 80065e6:	b096      	sub	sp, #88	@ 0x58
 80065e8:	4615      	mov	r5, r2
 80065ea:	461e      	mov	r6, r3
 80065ec:	da0d      	bge.n	800660a <__swhatbuf_r+0x2e>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	bf14      	ite	ne
 80065fa:	2340      	movne	r3, #64	@ 0x40
 80065fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006600:	2000      	movs	r0, #0
 8006602:	6031      	str	r1, [r6, #0]
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	b016      	add	sp, #88	@ 0x58
 8006608:	bd70      	pop	{r4, r5, r6, pc}
 800660a:	466a      	mov	r2, sp
 800660c:	f000 f862 	bl	80066d4 <_fstat_r>
 8006610:	2800      	cmp	r0, #0
 8006612:	dbec      	blt.n	80065ee <__swhatbuf_r+0x12>
 8006614:	9901      	ldr	r1, [sp, #4]
 8006616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800661a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800661e:	4259      	negs	r1, r3
 8006620:	4159      	adcs	r1, r3
 8006622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006626:	e7eb      	b.n	8006600 <__swhatbuf_r+0x24>

08006628 <__smakebuf_r>:
 8006628:	898b      	ldrh	r3, [r1, #12]
 800662a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662c:	079d      	lsls	r5, r3, #30
 800662e:	4606      	mov	r6, r0
 8006630:	460c      	mov	r4, r1
 8006632:	d507      	bpl.n	8006644 <__smakebuf_r+0x1c>
 8006634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	2301      	movs	r3, #1
 800663e:	6163      	str	r3, [r4, #20]
 8006640:	b003      	add	sp, #12
 8006642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006644:	ab01      	add	r3, sp, #4
 8006646:	466a      	mov	r2, sp
 8006648:	f7ff ffc8 	bl	80065dc <__swhatbuf_r>
 800664c:	9f00      	ldr	r7, [sp, #0]
 800664e:	4605      	mov	r5, r0
 8006650:	4639      	mov	r1, r7
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff fa64 	bl	8005b20 <_malloc_r>
 8006658:	b948      	cbnz	r0, 800666e <__smakebuf_r+0x46>
 800665a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665e:	059a      	lsls	r2, r3, #22
 8006660:	d4ee      	bmi.n	8006640 <__smakebuf_r+0x18>
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	f043 0302 	orr.w	r3, r3, #2
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	e7e2      	b.n	8006634 <__smakebuf_r+0xc>
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	6020      	str	r0, [r4, #0]
 8006672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800667e:	b15b      	cbz	r3, 8006698 <__smakebuf_r+0x70>
 8006680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f837 	bl	80066f8 <_isatty_r>
 800668a:	b128      	cbz	r0, 8006698 <__smakebuf_r+0x70>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	431d      	orrs	r5, r3
 800669c:	81a5      	strh	r5, [r4, #12]
 800669e:	e7cf      	b.n	8006640 <__smakebuf_r+0x18>

080066a0 <memmove>:
 80066a0:	4288      	cmp	r0, r1
 80066a2:	b510      	push	{r4, lr}
 80066a4:	eb01 0402 	add.w	r4, r1, r2
 80066a8:	d902      	bls.n	80066b0 <memmove+0x10>
 80066aa:	4284      	cmp	r4, r0
 80066ac:	4623      	mov	r3, r4
 80066ae:	d807      	bhi.n	80066c0 <memmove+0x20>
 80066b0:	1e43      	subs	r3, r0, #1
 80066b2:	42a1      	cmp	r1, r4
 80066b4:	d008      	beq.n	80066c8 <memmove+0x28>
 80066b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066be:	e7f8      	b.n	80066b2 <memmove+0x12>
 80066c0:	4402      	add	r2, r0
 80066c2:	4601      	mov	r1, r0
 80066c4:	428a      	cmp	r2, r1
 80066c6:	d100      	bne.n	80066ca <memmove+0x2a>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d2:	e7f7      	b.n	80066c4 <memmove+0x24>

080066d4 <_fstat_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	@ (80066f4 <_fstat_r+0x20>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f7fa fb2f 	bl	8000d44 <_fstat>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d102      	bne.n	80066f0 <_fstat_r+0x1c>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b103      	cbz	r3, 80066f0 <_fstat_r+0x1c>
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
 80066f2:	bf00      	nop
 80066f4:	200002d8 	.word	0x200002d8

080066f8 <_isatty_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_isatty_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fa fb2e 	bl	8000d64 <_isatty>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_isatty_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_isatty_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200002d8 	.word	0x200002d8

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	@ (8006734 <_sbrk_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fa fb36 	bl	8000d94 <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200002d8 	.word	0x200002d8

08006738 <memcpy>:
 8006738:	440a      	add	r2, r1
 800673a:	4291      	cmp	r1, r2
 800673c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006740:	d100      	bne.n	8006744 <memcpy+0xc>
 8006742:	4770      	bx	lr
 8006744:	b510      	push	{r4, lr}
 8006746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800674e:	4291      	cmp	r1, r2
 8006750:	d1f9      	bne.n	8006746 <memcpy+0xe>
 8006752:	bd10      	pop	{r4, pc}

08006754 <_realloc_r>:
 8006754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006758:	4607      	mov	r7, r0
 800675a:	4614      	mov	r4, r2
 800675c:	460d      	mov	r5, r1
 800675e:	b921      	cbnz	r1, 800676a <_realloc_r+0x16>
 8006760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	4611      	mov	r1, r2
 8006766:	f7ff b9db 	b.w	8005b20 <_malloc_r>
 800676a:	b92a      	cbnz	r2, 8006778 <_realloc_r+0x24>
 800676c:	f7ff f96c 	bl	8005a48 <_free_r>
 8006770:	4625      	mov	r5, r4
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	f000 f81a 	bl	80067b0 <_malloc_usable_size_r>
 800677c:	4284      	cmp	r4, r0
 800677e:	4606      	mov	r6, r0
 8006780:	d802      	bhi.n	8006788 <_realloc_r+0x34>
 8006782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006786:	d8f4      	bhi.n	8006772 <_realloc_r+0x1e>
 8006788:	4621      	mov	r1, r4
 800678a:	4638      	mov	r0, r7
 800678c:	f7ff f9c8 	bl	8005b20 <_malloc_r>
 8006790:	4680      	mov	r8, r0
 8006792:	b908      	cbnz	r0, 8006798 <_realloc_r+0x44>
 8006794:	4645      	mov	r5, r8
 8006796:	e7ec      	b.n	8006772 <_realloc_r+0x1e>
 8006798:	42b4      	cmp	r4, r6
 800679a:	4622      	mov	r2, r4
 800679c:	4629      	mov	r1, r5
 800679e:	bf28      	it	cs
 80067a0:	4632      	movcs	r2, r6
 80067a2:	f7ff ffc9 	bl	8006738 <memcpy>
 80067a6:	4629      	mov	r1, r5
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff f94d 	bl	8005a48 <_free_r>
 80067ae:	e7f1      	b.n	8006794 <_realloc_r+0x40>

080067b0 <_malloc_usable_size_r>:
 80067b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b4:	1f18      	subs	r0, r3, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfbc      	itt	lt
 80067ba:	580b      	ldrlt	r3, [r1, r0]
 80067bc:	18c0      	addlt	r0, r0, r3
 80067be:	4770      	bx	lr

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
