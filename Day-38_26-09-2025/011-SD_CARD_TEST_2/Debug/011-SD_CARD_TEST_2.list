
011-SD_CARD_TEST_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080060cc  080060cc  000070cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006394  08006394  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006394  08006394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800639c  0800639c  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063a0  080063a0  000073a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080063a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00000354  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfa5  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021df  00000000  00000000  00015049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00017228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000904  00000000  00000000  00017df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022199  00000000  00000000  000186f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001077d  00000000  00000000  0003a88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6674  00000000  00000000  0004b00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011167e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034b0  00000000  00000000  001116c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00114b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060b4 	.word	0x080060b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080060b4 	.word	0x080060b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005ac:	b40f      	push	{r0, r1, r2, r3}
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c2:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <myprintf+0x44>)
 80005c4:	f005 f8ea 	bl	800579c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <myprintf+0x44>)
 80005ca:	f7ff fe01 	bl	80001d0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	4905      	ldr	r1, [pc, #20]	@ (80005f0 <myprintf+0x44>)
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <myprintf+0x48>)
 80005de:	f001 feb5 	bl	800234c <HAL_UART_Transmit>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr
 80005f0:	20000130 	.word	0x20000130
 80005f4:	200000e8 	.word	0x200000e8

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fb7c 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f90e 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f9d6 	bl	80009b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800060c:	f000 f974 	bl	80008f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f9a8 	bl	8000964 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000614:	f002 fa56 	bl	8002ac4 <MX_FATFS_Init>
//  if (MX_FATFS_Init() != APP_OK) {
//    Error_Handler();
//  }


  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000618:	4873      	ldr	r0, [pc, #460]	@ (80007e8 <main+0x1f0>)
 800061a:	f7ff ffc7 	bl	80005ac <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 800061e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000622:	f000 fbdd 	bl	8000de0 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000626:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800062a:	2201      	movs	r2, #1
 800062c:	496f      	ldr	r1, [pc, #444]	@ (80007ec <main+0x1f4>)
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f9da 	bl	80049e8 <f_mount>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 800063a:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <main+0x5a>
	myprintf("f_mount error (%i)\r\n", fres);
 8000642:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000646:	4619      	mov	r1, r3
 8000648:	4869      	ldr	r0, [pc, #420]	@ (80007f0 <main+0x1f8>)
 800064a:	f7ff ffaf 	bl	80005ac <myprintf>
	while(1);
 800064e:	bf00      	nop
 8000650:	e7fd      	b.n	800064e <main+0x56>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000652:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000656:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800065a:	4619      	mov	r1, r3
 800065c:	4863      	ldr	r0, [pc, #396]	@ (80007ec <main+0x1f4>)
 800065e:	f004 ff1f 	bl	80054a0 <f_getfree>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 8000668:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800066c:	2b00      	cmp	r3, #0
 800066e:	d007      	beq.n	8000680 <main+0x88>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000670:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000674:	4619      	mov	r1, r3
 8000676:	485f      	ldr	r0, [pc, #380]	@ (80007f4 <main+0x1fc>)
 8000678:	f7ff ff98 	bl	80005ac <myprintf>
	while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x84>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000680:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000684:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	3b02      	subs	r3, #2
 800068e:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8000692:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	8952      	ldrh	r2, [r2, #10]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 80006a2:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006a6:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	895b      	ldrh	r3, [r3, #10]
 80006ae:	461a      	mov	r2, r3
 80006b0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006b4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006c2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 80006c6:	0859      	lsrs	r1, r3, #1
 80006c8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 80006cc:	085b      	lsrs	r3, r3, #1
 80006ce:	461a      	mov	r2, r3
 80006d0:	4849      	ldr	r0, [pc, #292]	@ (80007f8 <main+0x200>)
 80006d2:	f7ff ff6b 	bl	80005ac <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006da:	2201      	movs	r2, #1
 80006dc:	4947      	ldr	r1, [pc, #284]	@ (80007fc <main+0x204>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f9c8 	bl	8004a74 <f_open>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 80006ea:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <main+0x10a>
	myprintf("f_open error (%i)\r\n", fres);
 80006f2:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006f6:	4619      	mov	r1, r3
 80006f8:	4841      	ldr	r0, [pc, #260]	@ (8000800 <main+0x208>)
 80006fa:	f7ff ff57 	bl	80005ac <myprintf>
	while(1);
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <main+0x106>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000702:	4840      	ldr	r0, [pc, #256]	@ (8000804 <main+0x20c>)
 8000704:	f7ff ff52 	bl	80005ac <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000708:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	211e      	movs	r1, #30
 8000712:	4618      	mov	r0, r3
 8000714:	f004 ff79 	bl	800560a <f_gets>
 8000718:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
  if(rres != 0) {
 800071c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <main+0x13a>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	4837      	ldr	r0, [pc, #220]	@ (8000808 <main+0x210>)
 800072c:	f7ff ff3e 	bl	80005ac <myprintf>
 8000730:	e005      	b.n	800073e <main+0x146>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 8000732:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000736:	4619      	mov	r1, r3
 8000738:	4834      	ldr	r0, [pc, #208]	@ (800080c <main+0x214>)
 800073a:	f7ff ff37 	bl	80005ac <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800073e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fe82 	bl	800544c <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000748:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800074c:	221a      	movs	r2, #26
 800074e:	4930      	ldr	r1, [pc, #192]	@ (8000810 <main+0x218>)
 8000750:	4618      	mov	r0, r3
 8000752:	f004 f98f 	bl	8004a74 <f_open>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if(fres == FR_OK) {
 800075c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <main+0x174>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000764:	482b      	ldr	r0, [pc, #172]	@ (8000814 <main+0x21c>)
 8000766:	f7ff ff21 	bl	80005ac <myprintf>
 800076a:	e005      	b.n	8000778 <main+0x180>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 800076c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000770:	4619      	mov	r1, r3
 8000772:	4823      	ldr	r0, [pc, #140]	@ (8000800 <main+0x208>)
 8000774:	f7ff ff1a 	bl	80005ac <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <main+0x220>)
 800077e:	461c      	mov	r4, r3
 8000780:	4615      	mov	r5, r2
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	682b      	ldr	r3, [r5, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	8022      	strh	r2, [r4, #0]
 800078c:	3402      	adds	r4, #2
 800078e:	0c1b      	lsrs	r3, r3, #16
 8000790:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	f107 0108 	add.w	r1, r7, #8
 8000798:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800079c:	2213      	movs	r2, #19
 800079e:	f004 fc62 	bl	8005066 <f_write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if(fres == FR_OK) {
 80007a8:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d109      	bne.n	80007c4 <main+0x1cc>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007b0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80007b4:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4817      	ldr	r0, [pc, #92]	@ (800081c <main+0x224>)
 80007be:	f7ff fef5 	bl	80005ac <myprintf>
 80007c2:	e005      	b.n	80007d0 <main+0x1d8>
  } else {
	myprintf("f_write error (%i)\r\n", fres);
 80007c4:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007c8:	4619      	mov	r1, r3
 80007ca:	4815      	ldr	r0, [pc, #84]	@ (8000820 <main+0x228>)
 80007cc:	f7ff feee 	bl	80005ac <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80007d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fe39 	bl	800544c <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	4903      	ldr	r1, [pc, #12]	@ (80007ec <main+0x1f4>)
 80007de:	2000      	movs	r0, #0
 80007e0:	f004 f902 	bl	80049e8 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <main+0x1ec>
 80007e8:	080060cc 	.word	0x080060cc
 80007ec:	080060ec 	.word	0x080060ec
 80007f0:	080060f0 	.word	0x080060f0
 80007f4:	08006108 	.word	0x08006108
 80007f8:	08006120 	.word	0x08006120
 80007fc:	08006168 	.word	0x08006168
 8000800:	08006174 	.word	0x08006174
 8000804:	08006188 	.word	0x08006188
 8000808:	080061b8 	.word	0x080061b8
 800080c:	080061e4 	.word	0x080061e4
 8000810:	080061f8 	.word	0x080061f8
 8000814:	08006204 	.word	0x08006204
 8000818:	08006234 	.word	0x08006234
 800081c:	08006248 	.word	0x08006248
 8000820:	0800626c 	.word	0x0800626c

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	@ 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f004 ffc0 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a27      	ldr	r2, [pc, #156]	@ (80008f0 <SystemClock_Config+0xcc>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000898:	2332      	movs	r3, #50	@ 0x32
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fd59 	bl	8001360 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f8c2 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2101      	movs	r1, #1
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 ffba 	bl	8001850 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f8ab 	bl	8000a3c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	@ 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_SPI1_Init+0x64>)
 80008fe:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <MX_SPI1_Init+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_SPI1_Init+0x64>)
 8000904:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_SPI1_Init+0x64>)
 8000924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000928:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_SPI1_Init+0x64>)
 800092c:	2228      	movs	r2, #40	@ 0x28
 800092e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_SPI1_Init+0x64>)
 8000944:	220a      	movs	r2, #10
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_SPI1_Init+0x64>)
 800094a:	f001 f9a1 	bl	8001c90 <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 f872 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000090 	.word	0x20000090
 8000960:	40013000 	.word	0x40013000

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f001 fc86 	bl	80022ac <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f849 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000e8 	.word	0x200000e8
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_GPIO_Init+0x7c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0x80>)
 8000a0c:	f000 fc8e 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a10:	2340      	movs	r3, #64	@ 0x40
 8000a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x80>)
 8000a28:	f000 fae4 	bl	8000ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fa80 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <HAL_SPI_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_SPI_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	23e0      	movs	r3, #224	@ 0xe0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000b0e:	f000 fa71 	bl	8000ff4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_UART_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b9e:	f000 fa29 	bl	8000ff4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f8c7 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f004 fdbe 	bl	80057c8 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000230 	.word	0x20000230
 8000c80:	200003c8 	.word	0x200003c8

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f004 fd7d 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc8d 	bl	80005f8 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cec:	080063a4 	.word	0x080063a4
  ldr r2, =_sbss
 8000cf0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf4:	200003c8 	.word	0x200003c8

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f931 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fe8a 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f93b 	bl	8000fda <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f911 	bl	8000fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000234 	.word	0x20000234

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000234 	.word	0x20000234

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	@ (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff47 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff5c 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffb0 	bl	8000f48 <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e16b      	b.n	80012e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 815a 	bne.w	80012e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80b4 	beq.w	80012e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b60      	ldr	r3, [pc, #384]	@ (8001300 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a5f      	ldr	r2, [pc, #380]	@ (8001300 <HAL_GPIO_Init+0x30c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b5d      	ldr	r3, [pc, #372]	@ (8001300 <HAL_GPIO_Init+0x30c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a5b      	ldr	r2, [pc, #364]	@ (8001304 <HAL_GPIO_Init+0x310>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_GPIO_Init+0x314>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x226>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a51      	ldr	r2, [pc, #324]	@ (800130c <HAL_GPIO_Init+0x318>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d025      	beq.n	8001216 <HAL_GPIO_Init+0x222>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a50      	ldr	r2, [pc, #320]	@ (8001310 <HAL_GPIO_Init+0x31c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_GPIO_Init+0x21e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001314 <HAL_GPIO_Init+0x320>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x21a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001318 <HAL_GPIO_Init+0x324>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x216>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	@ (800131c <HAL_GPIO_Init+0x328>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x212>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001320 <HAL_GPIO_Init+0x32c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001324 <HAL_GPIO_Init+0x330>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x20a>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e00e      	b.n	800121c <HAL_GPIO_Init+0x228>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001202:	2306      	movs	r3, #6
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x228>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	@ (8001304 <HAL_GPIO_Init+0x310>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <HAL_GPIO_Init+0x334>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a32      	ldr	r2, [pc, #200]	@ (8001328 <HAL_GPIO_Init+0x334>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <HAL_GPIO_Init+0x334>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <HAL_GPIO_Init+0x334>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <HAL_GPIO_Init+0x334>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_GPIO_Init+0x334>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012dc:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f ae90 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e267      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800137e:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4b85      	ldr	r3, [pc, #532]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001392:	2b08      	cmp	r3, #8
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013a2:	d10b      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d05b      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d157      	bne.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e242      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c4:	d106      	bne.n	80013d4 <HAL_RCC_OscConfig+0x74>
 80013c6:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6f      	ldr	r2, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b6d      	ldr	r3, [pc, #436]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6c      	ldr	r2, [pc, #432]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013f8:	4b69      	ldr	r3, [pc, #420]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a68      	ldr	r2, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcd6 	bl	8000dc8 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fcd2 	bl	8000dc8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e207      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xc0>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fcc2 	bl	8000dc8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fcbe 	bl	8000dc8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1f3      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0xe8>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001476:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800148a:	2b08      	cmp	r3, #8
 800148c:	d11c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1c7      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4937      	ldr	r1, [pc, #220]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e03a      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d0:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <HAL_RCC_OscConfig+0x244>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fc77 	bl	8000dc8 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fc73 	bl	8000dc8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1a8      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4925      	ldr	r1, [pc, #148]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_RCC_OscConfig+0x244>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc56 	bl	8000dc8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fc52 	bl	8000dc8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e187      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d036      	beq.n	80015b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fc36 	bl	8000dc8 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fc32 	bl	8000dc8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e167      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x200>
 800157e:	e01b      	b.n	80015b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fc1f 	bl	8000dc8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e00e      	b.n	80015ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fc1b 	bl	8000dc8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d907      	bls.n	80015ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e150      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80015a0:	40023800 	.word	0x40023800
 80015a4:	42470000 	.word	0x42470000
 80015a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ea      	bne.n	800158e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8097 	beq.w	80016f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b81      	ldr	r3, [pc, #516]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b7d      	ldr	r3, [pc, #500]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a7c      	ldr	r2, [pc, #496]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b7a      	ldr	r3, [pc, #488]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b77      	ldr	r3, [pc, #476]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b74      	ldr	r3, [pc, #464]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a73      	ldr	r2, [pc, #460]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fbdb 	bl	8000dc8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fbd7 	bl	8000dc8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e10c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b6a      	ldr	r3, [pc, #424]	@ (80017d4 <HAL_RCC_OscConfig+0x474>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x2ea>
 800163c:	4b64      	ldr	r3, [pc, #400]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001640:	4a63      	ldr	r2, [pc, #396]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	@ 0x70
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x30c>
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	4a5e      	ldr	r2, [pc, #376]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6713      	str	r3, [r2, #112]	@ 0x70
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	4a5b      	ldr	r2, [pc, #364]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	@ 0x70
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001670:	4a57      	ldr	r2, [pc, #348]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	@ 0x70
 8001678:	4b55      	ldr	r3, [pc, #340]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	4a54      	ldr	r2, [pc, #336]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fb9c 	bl	8000dc8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fb98 	bl	8000dc8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0cb      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0ee      	beq.n	8001694 <HAL_RCC_OscConfig+0x334>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb86 	bl	8000dc8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb82 	bl	8000dc8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0b5      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ee      	bne.n	80016c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a38      	ldr	r2, [pc, #224]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a1 	beq.w	8001840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d05c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d141      	bne.n	8001796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb56 	bl	8000dc8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fb52 	bl	8000dc8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e087      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	491b      	ldr	r1, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb2b 	bl	8000dc8 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fb27 	bl	8000dc8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e05c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x416>
 8001794:	e054      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fb14 	bl	8000dc8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fb10 	bl	8000dc8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e045      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e038      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
 80017d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_RCC_OscConfig+0x4ec>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d028      	beq.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d121      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d11a      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001814:	4293      	cmp	r3, r2
 8001816:	d111      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cc      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b68      	ldr	r3, [pc, #416]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d90c      	bls.n	800188c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a58      	ldr	r2, [pc, #352]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a52      	ldr	r2, [pc, #328]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d044      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	2b03      	cmp	r3, #3
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e067      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4934      	ldr	r1, [pc, #208]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa42 	bl	8000dc8 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa3e 	bl	8000dc8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d20c      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9a2 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	080062c8 	.word	0x080062c8
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a20:	b094      	sub	sp, #80	@ 0x50
 8001a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a34:	4b79      	ldr	r3, [pc, #484]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d00d      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	f200 80e1 	bhi.w	8001c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4e:	e0db      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b73      	ldr	r3, [pc, #460]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a54:	e0db      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b73      	ldr	r3, [pc, #460]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a5a:	e0d8      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a66:	4b6d      	ldr	r3, [pc, #436]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d063      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b6a      	ldr	r3, [pc, #424]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a8e:	4622      	mov	r2, r4
 8001a90:	462b      	mov	r3, r5
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	6139      	str	r1, [r7, #16]
 8001aac:	4629      	mov	r1, r5
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	4651      	mov	r1, sl
 8001ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aca:	4651      	mov	r1, sl
 8001acc:	018a      	lsls	r2, r1, #6
 8001ace:	4651      	mov	r1, sl
 8001ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aee:	4690      	mov	r8, r2
 8001af0:	4699      	mov	r9, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	eb18 0303 	adds.w	r3, r8, r3
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	462b      	mov	r3, r5
 8001afc:	eb49 0303 	adc.w	r3, r9, r3
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	024b      	lsls	r3, r1, #9
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b18:	4621      	mov	r1, r4
 8001b1a:	024a      	lsls	r2, r1, #9
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b2c:	f7fe fba8 	bl	8000280 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b38:	e058      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	4611      	mov	r1, r2
 8001b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b54:	4642      	mov	r2, r8
 8001b56:	464b      	mov	r3, r9
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0159      	lsls	r1, r3, #5
 8001b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b66:	0150      	lsls	r0, r2, #5
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b72:	4649      	mov	r1, r9
 8001b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b90:	eb63 050b 	sbc.w	r5, r3, fp
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	00eb      	lsls	r3, r5, #3
 8001b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba2:	00e2      	lsls	r2, r4, #3
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	4643      	mov	r3, r8
 8001baa:	18e3      	adds	r3, r4, r3
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	464b      	mov	r3, r9
 8001bb0:	eb45 0303 	adc.w	r3, r5, r3
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	028b      	lsls	r3, r1, #10
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bcc:	4621      	mov	r1, r4
 8001bce:	028a      	lsls	r2, r1, #10
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	61fa      	str	r2, [r7, #28]
 8001bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be0:	f7fe fb4e 	bl	8000280 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3750      	adds	r7, #80	@ 0x50
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a9b      	lsrs	r3, r3, #10
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080062d8 	.word	0x080062d8

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffdc 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	080062d8 	.word	0x080062d8

08001c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07b      	b.n	8001d9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cb2:	d009      	beq.n	8001cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fed8 	bl	8000a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4c:	ea42 0103 	orr.w	r1, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0104 	and.w	r1, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	f003 0210 	and.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b08a      	sub	sp, #40	@ 0x28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db4:	f7ff f808 	bl	8000dc8 <HAL_GetTick>
 8001db8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d00c      	beq.n	8001dec <HAL_SPI_TransmitReceive+0x4a>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dd8:	d106      	bne.n	8001de8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_SPI_TransmitReceive+0x46>
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d001      	beq.n	8001dec <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
 8001dea:	e17f      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_SPI_TransmitReceive+0x5c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_SPI_TransmitReceive+0x5c>
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e174      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x6e>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e16d      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d003      	beq.n	8001e2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2205      	movs	r2, #5
 8001e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d007      	beq.n	8001e80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e88:	d17e      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_SPI_TransmitReceive+0xf6>
 8001e92:	8afb      	ldrh	r3, [r7, #22]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d16c      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	881a      	ldrh	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	1c9a      	adds	r2, r3, #2
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ebc:	e059      	b.n	8001f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d11b      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x162>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d016      	beq.n	8001f04 <HAL_SPI_TransmitReceive+0x162>
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d113      	bne.n	8001f04 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d119      	bne.n	8001f46 <HAL_SPI_TransmitReceive+0x1a4>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d014      	beq.n	8001f46 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	b292      	uxth	r2, r2
 8001f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2e:	1c9a      	adds	r2, r3, #2
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f42:	2301      	movs	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f46:	f7fe ff3f 	bl	8000dc8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d80d      	bhi.n	8001f72 <HAL_SPI_TransmitReceive+0x1d0>
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d009      	beq.n	8001f72 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0bc      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a0      	bne.n	8001ebe <HAL_SPI_TransmitReceive+0x11c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d19b      	bne.n	8001ebe <HAL_SPI_TransmitReceive+0x11c>
 8001f86:	e082      	b.n	800208e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x1f4>
 8001f90:	8afb      	ldrh	r3, [r7, #22]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d171      	bne.n	800207a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fbc:	e05d      	b.n	800207a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d11c      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x264>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d017      	beq.n	8002006 <HAL_SPI_TransmitReceive+0x264>
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d114      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d119      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x2a6>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d014      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002044:	2301      	movs	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002048:	f7fe febe 	bl	8000dc8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002054:	429a      	cmp	r2, r3
 8002056:	d803      	bhi.n	8002060 <HAL_SPI_TransmitReceive+0x2be>
 8002058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d102      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x2c4>
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e038      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d19c      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x21c>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d197      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800208e:	6a3a      	ldr	r2, [r7, #32]
 8002090:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f8b6 	bl	8002204 <SPI_EndRxTxTransaction>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e01d      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002104:	f7fe fe60 	bl	8000dc8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002114:	f7fe fe58 	bl	8000dc8 <HAL_GetTick>
 8002118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800211a:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	0d1b      	lsrs	r3, r3, #20
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800212a:	e055      	b.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d051      	beq.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002134:	f7fe fe48 	bl	8000dc8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d13d      	bne.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002162:	d111      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800216c:	d004      	beq.n	8002178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002176:	d107      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002190:	d10f      	bne.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e018      	b.n	80021f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e002      	b.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d19a      	bne.n	800212c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000000 	.word	0x20000000

08002204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2201      	movs	r2, #1
 8002218:	2102      	movs	r1, #2
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff ff6a 	bl	80020f4 <SPI_WaitFlagStateUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e032      	b.n	800229c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002236:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <SPI_EndRxTxTransaction+0xa0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <SPI_EndRxTxTransaction+0xa4>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002254:	d112      	bne.n	800227c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	@ 0x80
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff ff47 	bl	80020f4 <SPI_WaitFlagStateUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e00f      	b.n	800229c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3b01      	subs	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	2b80      	cmp	r3, #128	@ 0x80
 8002294:	d0f2      	beq.n	800227c <SPI_EndRxTxTransaction+0x78>
 8002296:	e000      	b.n	800229a <SPI_EndRxTxTransaction+0x96>
        break;
 8002298:	bf00      	nop
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	165e9f81 	.word	0x165e9f81

080022ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e042      	b.n	8002344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fc28 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	@ 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f973 	bl	80025dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	d175      	bne.n	8002458 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_UART_Transmit+0x2c>
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e06e      	b.n	800245a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	@ 0x21
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fd1d 	bl	8000dc8 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c0:	e02e      	b.n	8002420 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f848 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03a      	b.n	800245a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cb      	bne.n	80023c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	@ 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f814 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e006      	b.n	800245a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	e03b      	b.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d037      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7fe fca4 	bl	8000dc8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	6a3a      	ldr	r2, [r7, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e03a      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b80      	cmp	r3, #128	@ 0x80
 80024a8:	d020      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b40      	cmp	r3, #64	@ 0x40
 80024ae:	d01d      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d116      	bne.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f81d 	bl	8002514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2208      	movs	r2, #8
 80024de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e00f      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d0b4      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b095      	sub	sp, #84	@ 0x54
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800252c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800253c:	643a      	str	r2, [r7, #64]	@ 0x40
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002542:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e5      	bne.n	800251c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3314      	adds	r3, #20
 8002556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	e853 3f00 	ldrex	r3, [r3]
 800255e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3314      	adds	r3, #20
 800256e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002578:	e841 2300 	strex	r3, r2, [r1]
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e5      	bne.n	8002550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	2b01      	cmp	r3, #1
 800258a:	d119      	bne.n	80025c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	60bb      	str	r3, [r7, #8]
   return(result);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0310 	bic.w	r3, r3, #16
 80025a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ac:	61ba      	str	r2, [r7, #24]
 80025ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	e841 2300 	strex	r3, r2, [r1]
 80025b8:	613b      	str	r3, [r7, #16]
   return(result);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e5      	bne.n	800258c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025ce:	bf00      	nop
 80025d0:	3754      	adds	r7, #84	@ 0x54
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b0c0      	sub	sp, #256	@ 0x100
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	ea40 0301 	orr.w	r3, r0, r1
 8002604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	431a      	orrs	r2, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002634:	f021 010c 	bic.w	r1, r1, #12
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002656:	6999      	ldr	r1, [r3, #24]
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	ea40 0301 	orr.w	r3, r0, r1
 8002662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b8f      	ldr	r3, [pc, #572]	@ (80028a8 <UART_SetConfig+0x2cc>)
 800266c:	429a      	cmp	r2, r3
 800266e:	d005      	beq.n	800267c <UART_SetConfig+0xa0>
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b8d      	ldr	r3, [pc, #564]	@ (80028ac <UART_SetConfig+0x2d0>)
 8002678:	429a      	cmp	r2, r3
 800267a:	d104      	bne.n	8002686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff faf4 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002684:	e003      	b.n	800268e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002686:	f7ff fadb 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 800268a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002698:	f040 810c 	bne.w	80028b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800269c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026ae:	4622      	mov	r2, r4
 80026b0:	462b      	mov	r3, r5
 80026b2:	1891      	adds	r1, r2, r2
 80026b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026b6:	415b      	adcs	r3, r3
 80026b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026be:	4621      	mov	r1, r4
 80026c0:	eb12 0801 	adds.w	r8, r2, r1
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb43 0901 	adc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb49 0303 	adc.w	r3, r9, r3
 80026f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800270a:	460b      	mov	r3, r1
 800270c:	18db      	adds	r3, r3, r3
 800270e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002710:	4613      	mov	r3, r2
 8002712:	eb42 0303 	adc.w	r3, r2, r3
 8002716:	657b      	str	r3, [r7, #84]	@ 0x54
 8002718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800271c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002720:	f7fd fdae 	bl	8000280 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4b61      	ldr	r3, [pc, #388]	@ (80028b0 <UART_SetConfig+0x2d4>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011c      	lsls	r4, r3, #4
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800273c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800274c:	415b      	adcs	r3, r3
 800274e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002754:	4641      	mov	r1, r8
 8002756:	eb12 0a01 	adds.w	sl, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb43 0b01 	adc.w	fp, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800276c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002774:	4692      	mov	sl, r2
 8002776:	469b      	mov	fp, r3
 8002778:	4643      	mov	r3, r8
 800277a:	eb1a 0303 	adds.w	r3, sl, r3
 800277e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002782:	464b      	mov	r3, r9
 8002784:	eb4b 0303 	adc.w	r3, fp, r3
 8002788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800279c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027a0:	460b      	mov	r3, r1
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027a6:	4613      	mov	r3, r2
 80027a8:	eb42 0303 	adc.w	r3, r2, r3
 80027ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027b6:	f7fd fd63 	bl	8000280 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <UART_SetConfig+0x2d4>)
 80027c2:	fba3 2301 	umull	r2, r3, r3, r1
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2264      	movs	r2, #100	@ 0x64
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	1acb      	subs	r3, r1, r3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027d6:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <UART_SetConfig+0x2d4>)
 80027d8:	fba3 2302 	umull	r2, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027e4:	441c      	add	r4, r3
 80027e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002800:	415b      	adcs	r3, r3
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002808:	4641      	mov	r1, r8
 800280a:	1851      	adds	r1, r2, r1
 800280c:	6339      	str	r1, [r7, #48]	@ 0x30
 800280e:	4649      	mov	r1, r9
 8002810:	414b      	adcs	r3, r1
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002820:	4659      	mov	r1, fp
 8002822:	00cb      	lsls	r3, r1, #3
 8002824:	4651      	mov	r1, sl
 8002826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282a:	4651      	mov	r1, sl
 800282c:	00ca      	lsls	r2, r1, #3
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	4603      	mov	r3, r0
 8002834:	4642      	mov	r2, r8
 8002836:	189b      	adds	r3, r3, r2
 8002838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800283c:	464b      	mov	r3, r9
 800283e:	460a      	mov	r2, r1
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800285c:	460b      	mov	r3, r1
 800285e:	18db      	adds	r3, r3, r3
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002862:	4613      	mov	r3, r2
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800286a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800286e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002872:	f7fd fd05 	bl	8000280 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <UART_SetConfig+0x2d4>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	@ 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3332      	adds	r3, #50	@ 0x32
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <UART_SetConfig+0x2d4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4422      	add	r2, r4
 80028a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028a4:	e106      	b.n	8002ab4 <UART_SetConfig+0x4d8>
 80028a6:	bf00      	nop
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028c6:	4642      	mov	r2, r8
 80028c8:	464b      	mov	r3, r9
 80028ca:	1891      	adds	r1, r2, r2
 80028cc:	6239      	str	r1, [r7, #32]
 80028ce:	415b      	adcs	r3, r3
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d6:	4641      	mov	r1, r8
 80028d8:	1854      	adds	r4, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb43 0501 	adc.w	r5, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028fc:	464b      	mov	r3, r9
 80028fe:	eb45 0303 	adc.w	r3, r5, r3
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002922:	4629      	mov	r1, r5
 8002924:	008b      	lsls	r3, r1, #2
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292c:	4621      	mov	r1, r4
 800292e:	008a      	lsls	r2, r1, #2
 8002930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002934:	f7fd fca4 	bl	8000280 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4b60      	ldr	r3, [pc, #384]	@ (8002ac0 <UART_SetConfig+0x4e4>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	011c      	lsls	r4, r3, #4
 8002946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002958:	4642      	mov	r2, r8
 800295a:	464b      	mov	r3, r9
 800295c:	1891      	adds	r1, r2, r2
 800295e:	61b9      	str	r1, [r7, #24]
 8002960:	415b      	adcs	r3, r3
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002968:	4641      	mov	r1, r8
 800296a:	1851      	adds	r1, r2, r1
 800296c:	6139      	str	r1, [r7, #16]
 800296e:	4649      	mov	r1, r9
 8002970:	414b      	adcs	r3, r1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002980:	4659      	mov	r1, fp
 8002982:	00cb      	lsls	r3, r1, #3
 8002984:	4651      	mov	r1, sl
 8002986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298a:	4651      	mov	r1, sl
 800298c:	00ca      	lsls	r2, r1, #3
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	4603      	mov	r3, r0
 8002994:	4642      	mov	r2, r8
 8002996:	189b      	adds	r3, r3, r2
 8002998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800299c:	464b      	mov	r3, r9
 800299e:	460a      	mov	r2, r1
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029d2:	f7fd fc55 	bl	8000280 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	4b38      	ldr	r3, [pc, #224]	@ (8002ac0 <UART_SetConfig+0x4e4>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	@ 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	@ 0x32
 80029f0:	4a33      	ldr	r2, [pc, #204]	@ (8002ac0 <UART_SetConfig+0x4e4>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029fc:	441c      	add	r4, r3
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	415b      	adcs	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a4e:	464b      	mov	r3, r9
 8002a50:	460a      	mov	r2, r1
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a70:	4649      	mov	r1, r9
 8002a72:	008b      	lsls	r3, r1, #2
 8002a74:	4641      	mov	r1, r8
 8002a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	008a      	lsls	r2, r1, #2
 8002a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a82:	f7fd fbfd 	bl	8000280 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <UART_SetConfig+0x4e4>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	@ 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	3332      	adds	r3, #50	@ 0x32
 8002a9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <UART_SetConfig+0x4e4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4422      	add	r2, r4
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aba:	46bd      	mov	sp, r7
 8002abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac0:	51eb851f 	.word	0x51eb851f

08002ac4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002ac8:	4904      	ldr	r1, [pc, #16]	@ (8002adc <MX_FATFS_Init+0x18>)
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <MX_FATFS_Init+0x1c>)
 8002acc:	f002 fe28 	bl	8005720 <FATFS_LinkDriver>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <MX_FATFS_Init+0x20>)
 8002ad6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000023c 	.word	0x2000023c
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	20000238 	.word	0x20000238

08002ae8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002aec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f945 	bl	8002d94 <USER_SPI_initialize>
 8002b0a:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f937 	bl	8002d94 <USER_SPI_initialize>
 8002b26:	4603      	mov	r3, r0

  /* USER CODE END STATUS */
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_initialize(pdrv);
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f926 	bl	8002d94 <USER_SPI_initialize>
 8002b48:	4603      	mov	r3, r0

//    return RES_OK;
  /* USER CODE END READ */
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	return USER_SPI_initialize(pdrv);
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f915 	bl	8002d94 <USER_SPI_initialize>
 8002b6a:	4603      	mov	r3, r0

//    return RES_OK;
  /* USER CODE END WRITE */
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	603a      	str	r2, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	460b      	mov	r3, r1
 8002b82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
	return USER_SPI_initialize(pdrv);
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f902 	bl	8002d94 <USER_SPI_initialize>
 8002b90:	4603      	mov	r3, r0

//    return res;
  /* USER CODE END IOCTL */
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002ba4:	f7fe f910 	bl	8000dc8 <HAL_GetTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <SPI_Timer_On+0x20>)
 8002bac:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002bae:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <SPI_Timer_On+0x24>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000244 	.word	0x20000244
 8002bc0:	20000248 	.word	0x20000248

08002bc4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002bc8:	f7fe f8fe 	bl	8000dc8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <SPI_Timer_Status+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <SPI_Timer_Status+0x28>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	bf34      	ite	cc
 8002bdc:	2301      	movcc	r3, #1
 8002bde:	2300      	movcs	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000244 	.word	0x20000244
 8002bec:	20000248 	.word	0x20000248

08002bf0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002bfa:	f107 020f 	add.w	r2, r7, #15
 8002bfe:	1df9      	adds	r1, r7, #7
 8002c00:	2332      	movs	r3, #50	@ 0x32
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2301      	movs	r3, #1
 8002c06:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <xchg_spi+0x28>)
 8002c08:	f7ff f8cb 	bl	8001da2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000090 	.word	0x20000090

08002c1c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002c24:	f7fe f8d0 	bl	8000dc8 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002c2e:	20ff      	movs	r0, #255	@ 0xff
 8002c30:	f7ff ffde 	bl	8002bf0 <xchg_spi>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2bff      	cmp	r3, #255	@ 0xff
 8002c3c:	d007      	beq.n	8002c4e <wait_ready+0x32>
 8002c3e:	f7fe f8c3 	bl	8000dc8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d8ef      	bhi.n	8002c2e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2bff      	cmp	r3, #255	@ 0xff
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2140      	movs	r1, #64	@ 0x40
 8002c6c:	4803      	ldr	r0, [pc, #12]	@ (8002c7c <despiselect+0x18>)
 8002c6e:	f7fe fb5d 	bl	800132c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002c72:	20ff      	movs	r0, #255	@ 0xff
 8002c74:	f7ff ffbc 	bl	8002bf0 <xchg_spi>

}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40020400 	.word	0x40020400

08002c80 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002c84:	2200      	movs	r2, #0
 8002c86:	2140      	movs	r1, #64	@ 0x40
 8002c88:	4809      	ldr	r0, [pc, #36]	@ (8002cb0 <spiselect+0x30>)
 8002c8a:	f7fe fb4f 	bl	800132c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002c8e:	20ff      	movs	r0, #255	@ 0xff
 8002c90:	f7ff ffae 	bl	8002bf0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002c94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c98:	f7ff ffc0 	bl	8002c1c <wait_ready>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <spiselect+0x26>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e002      	b.n	8002cac <spiselect+0x2c>

	despiselect();
 8002ca6:	f7ff ffdd 	bl	8002c64 <despiselect>
	return 0;	/* Timeout */
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da0e      	bge.n	8002ce6 <send_cmd+0x32>
		cmd &= 0x7F;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cce:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2037      	movs	r0, #55	@ 0x37
 8002cd4:	f7ff ffee 	bl	8002cb4 <send_cmd>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d901      	bls.n	8002ce6 <send_cmd+0x32>
 8002ce2:	7bbb      	ldrb	r3, [r7, #14]
 8002ce4:	e051      	b.n	8002d8a <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d008      	beq.n	8002cfe <send_cmd+0x4a>
		despiselect();
 8002cec:	f7ff ffba 	bl	8002c64 <despiselect>
		if (!spiselect()) return 0xFF;
 8002cf0:	f7ff ffc6 	bl	8002c80 <spiselect>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <send_cmd+0x4a>
 8002cfa:	23ff      	movs	r3, #255	@ 0xff
 8002cfc:	e045      	b.n	8002d8a <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff72 	bl	8002bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	0e1b      	lsrs	r3, r3, #24
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff6c 	bl	8002bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff66 	bl	8002bf0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff60 	bl	8002bf0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff5b 	bl	8002bf0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <send_cmd+0x94>
 8002d44:	2395      	movs	r3, #149	@ 0x95
 8002d46:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d101      	bne.n	8002d52 <send_cmd+0x9e>
 8002d4e:	2387      	movs	r3, #135	@ 0x87
 8002d50:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff4b 	bl	8002bf0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d102      	bne.n	8002d66 <send_cmd+0xb2>
 8002d60:	20ff      	movs	r0, #255	@ 0xff
 8002d62:	f7ff ff45 	bl	8002bf0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002d66:	230a      	movs	r3, #10
 8002d68:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002d6a:	20ff      	movs	r0, #255	@ 0xff
 8002d6c:	f7ff ff40 	bl	8002bf0 <xchg_spi>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da05      	bge.n	8002d88 <send_cmd+0xd4>
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <send_cmd+0xb6>

	return res;							/* Return received response */
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <USER_SPI_initialize+0x14>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0d6      	b.n	8002f56 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002da8:	4b6d      	ldr	r3, [pc, #436]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <USER_SPI_initialize+0x2a>
 8002db6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e0cb      	b.n	8002f56 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002dbe:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <USER_SPI_initialize+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002dc8:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <USER_SPI_initialize+0x1d0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002dd0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e005      	b.n	8002de4 <USER_SPI_initialize+0x50>
 8002dd8:	20ff      	movs	r0, #255	@ 0xff
 8002dda:	f7ff ff09 	bl	8002bf0 <xchg_spi>
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f6      	bne.n	8002dd8 <USER_SPI_initialize+0x44>

	ty = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002dee:	2100      	movs	r1, #0
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff ff5f 	bl	8002cb4 <send_cmd>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	f040 808b 	bne.w	8002f14 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e02:	f7ff fecb 	bl	8002b9c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002e06:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002e0a:	2008      	movs	r0, #8
 8002e0c:	f7ff ff52 	bl	8002cb4 <send_cmd>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d151      	bne.n	8002eba <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e00d      	b.n	8002e38 <USER_SPI_initialize+0xa4>
 8002e1c:	7bfc      	ldrb	r4, [r7, #15]
 8002e1e:	20ff      	movs	r0, #255	@ 0xff
 8002e20:	f7ff fee6 	bl	8002bf0 <xchg_spi>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	f104 0310 	add.w	r3, r4, #16
 8002e2c:	443b      	add	r3, r7
 8002e2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d9ee      	bls.n	8002e1c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002e3e:	7abb      	ldrb	r3, [r7, #10]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d167      	bne.n	8002f14 <USER_SPI_initialize+0x180>
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	2baa      	cmp	r3, #170	@ 0xaa
 8002e48:	d164      	bne.n	8002f14 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002e4a:	bf00      	nop
 8002e4c:	f7ff feba 	bl	8002bc4 <SPI_Timer_Status>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <USER_SPI_initialize+0xd2>
 8002e56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e5a:	20a9      	movs	r0, #169	@ 0xa9
 8002e5c:	f7ff ff2a 	bl	8002cb4 <send_cmd>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f2      	bne.n	8002e4c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002e66:	f7ff fead 	bl	8002bc4 <SPI_Timer_Status>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d051      	beq.n	8002f14 <USER_SPI_initialize+0x180>
 8002e70:	2100      	movs	r1, #0
 8002e72:	203a      	movs	r0, #58	@ 0x3a
 8002e74:	f7ff ff1e 	bl	8002cb4 <send_cmd>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14a      	bne.n	8002f14 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	e00d      	b.n	8002ea0 <USER_SPI_initialize+0x10c>
 8002e84:	7bfc      	ldrb	r4, [r7, #15]
 8002e86:	20ff      	movs	r0, #255	@ 0xff
 8002e88:	f7ff feb2 	bl	8002bf0 <xchg_spi>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f104 0310 	add.w	r3, r4, #16
 8002e94:	443b      	add	r3, r7
 8002e96:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d9ee      	bls.n	8002e84 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002ea6:	7a3b      	ldrb	r3, [r7, #8]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <USER_SPI_initialize+0x120>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	e000      	b.n	8002eb6 <USER_SPI_initialize+0x122>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	737b      	strb	r3, [r7, #13]
 8002eb8:	e02c      	b.n	8002f14 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002eba:	2100      	movs	r1, #0
 8002ebc:	20a9      	movs	r0, #169	@ 0xa9
 8002ebe:	f7ff fef9 	bl	8002cb4 <send_cmd>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d804      	bhi.n	8002ed2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002ec8:	2302      	movs	r3, #2
 8002eca:	737b      	strb	r3, [r7, #13]
 8002ecc:	23a9      	movs	r3, #169	@ 0xa9
 8002ece:	73bb      	strb	r3, [r7, #14]
 8002ed0:	e003      	b.n	8002eda <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	737b      	strb	r3, [r7, #13]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002eda:	bf00      	nop
 8002edc:	f7ff fe72 	bl	8002bc4 <SPI_Timer_Status>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <USER_SPI_initialize+0x162>
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fee2 	bl	8002cb4 <send_cmd>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f2      	bne.n	8002edc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002ef6:	f7ff fe65 	bl	8002bc4 <SPI_Timer_Status>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <USER_SPI_initialize+0x17c>
 8002f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f04:	2010      	movs	r0, #16
 8002f06:	f7ff fed5 	bl	8002cb4 <send_cmd>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <USER_SPI_initialize+0x180>
				ty = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <USER_SPI_initialize+0x1d4>)
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
 8002f18:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002f1a:	f7ff fea3 	bl	8002c64 <despiselect>

	if (ty) {			/* OK */
 8002f1e:	7b7b      	ldrb	r3, [r7, #13]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <USER_SPI_initialize+0x1d0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <USER_SPI_initialize+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0210 	orr.w	r2, r2, #16
 8002f36:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e002      	b.n	8002f50 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <USER_SPI_initialize+0x1cc>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000020 	.word	0x20000020
 8002f64:	20000090 	.word	0x20000090
 8002f68:	20000240 	.word	0x20000240

08002f6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <disk_status+0x30>)
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	79fa      	ldrb	r2, [r7, #7]
 8002f84:	4905      	ldr	r1, [pc, #20]	@ (8002f9c <disk_status+0x30>)
 8002f86:	440a      	add	r2, r1
 8002f88:	7a12      	ldrb	r2, [r2, #8]
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000274 	.word	0x20000274

08002fa0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <disk_initialize+0x4c>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	4a0c      	ldr	r2, [pc, #48]	@ (8002fec <disk_initialize+0x4c>)
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	4909      	ldr	r1, [pc, #36]	@ (8002fec <disk_initialize+0x4c>)
 8002fc8:	440a      	add	r2, r1
 8002fca:	7a12      	ldrb	r2, [r2, #8]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4a03      	ldr	r2, [pc, #12]	@ (8002fec <disk_initialize+0x4c>)
 8002fde:	2101      	movs	r1, #1
 8002fe0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000274 	.word	0x20000274

08002ff0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <disk_read+0x3c>)
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	689c      	ldr	r4, [r3, #8]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	4a07      	ldr	r2, [pc, #28]	@ (800302c <disk_read+0x3c>)
 8003010:	4413      	add	r3, r2
 8003012:	7a18      	ldrb	r0, [r3, #8]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	47a0      	blx	r4
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	20000274 	.word	0x20000274

08003030 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <disk_write+0x3c>)
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68dc      	ldr	r4, [r3, #12]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	4a07      	ldr	r2, [pc, #28]	@ (800306c <disk_write+0x3c>)
 8003050:	4413      	add	r3, r2
 8003052:	7a18      	ldrb	r0, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	47a0      	blx	r4
 800305c:	4603      	mov	r3, r0
 800305e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	20000274 	.word	0x20000274

08003070 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	603a      	str	r2, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
 800307c:	460b      	mov	r3, r1
 800307e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <disk_ioctl+0x38>)
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	79fa      	ldrb	r2, [r7, #7]
 800308e:	4906      	ldr	r1, [pc, #24]	@ (80030a8 <disk_ioctl+0x38>)
 8003090:	440a      	add	r2, r1
 8003092:	7a10      	ldrb	r0, [r2, #8]
 8003094:	79b9      	ldrb	r1, [r7, #6]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4798      	blx	r3
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
  return res;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000274 	.word	0x20000274

080030ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80030bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	b21a      	sxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	81fb      	strh	r3, [r7, #14]
	return rv;
 80030d0:	89fb      	ldrh	r3, [r7, #14]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3303      	adds	r3, #3
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	3202      	adds	r2, #2
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	3201      	adds	r2, #1
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
	return rv;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	887a      	ldrh	r2, [r7, #2]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80031b2:	b480      	push	{r7}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	1c53      	adds	r3, r2, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	1c59      	adds	r1, r3, #1
 80031d6:	6179      	str	r1, [r7, #20]
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f1      	bne.n	80031cc <mem_cpy+0x1a>
	}
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	617a      	str	r2, [r7, #20]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f3      	bne.n	8003204 <mem_set+0x10>
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800322a:	b480      	push	{r7}
 800322c:	b089      	sub	sp, #36	@ 0x24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	61ba      	str	r2, [r7, #24]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	1acb      	subs	r3, r1, r3
 8003256:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <mem_cmp+0x40>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0eb      	beq.n	8003242 <mem_cmp+0x18>

	return r;
 800326a:	697b      	ldr	r3, [r7, #20]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3724      	adds	r7, #36	@ 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003282:	e002      	b.n	800328a <chk_chr+0x12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <chk_chr+0x26>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4293      	cmp	r3, r2
 800329c:	d1f2      	bne.n	8003284 <chk_chr+0xc>
	return *str;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e029      	b.n	8003318 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <chk_lock+0xb4>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01d      	beq.n	800330e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80032d2:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <chk_lock+0xb4>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d116      	bne.n	8003312 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80032e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <chk_lock+0xb4>)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10c      	bne.n	8003312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80032f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <chk_lock+0xb4>)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	3308      	adds	r3, #8
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003308:	429a      	cmp	r2, r3
 800330a:	d102      	bne.n	8003312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800330c:	e007      	b.n	800331e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d9d2      	bls.n	80032c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d109      	bne.n	8003338 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <chk_lock+0x80>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d101      	bne.n	8003334 <chk_lock+0x84>
 8003330:	2300      	movs	r3, #0
 8003332:	e010      	b.n	8003356 <chk_lock+0xa6>
 8003334:	2312      	movs	r3, #18
 8003336:	e00e      	b.n	8003356 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <chk_lock+0xa0>
 800333e:	4a09      	ldr	r2, [pc, #36]	@ (8003364 <chk_lock+0xb4>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	330c      	adds	r3, #12
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334e:	d101      	bne.n	8003354 <chk_lock+0xa4>
 8003350:	2310      	movs	r3, #16
 8003352:	e000      	b.n	8003356 <chk_lock+0xa6>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000254 	.word	0x20000254

08003368 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	e002      	b.n	800337a <enq_lock+0x12>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3301      	adds	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d806      	bhi.n	800338e <enq_lock+0x26>
 8003380:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <enq_lock+0x40>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f2      	bne.n	8003374 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000254 	.word	0x20000254

080033ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e01f      	b.n	80033fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80033bc:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <inc_lock+0x118>)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4413      	add	r3, r2
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d113      	bne.n	80033f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80033ce:	4a3d      	ldr	r2, [pc, #244]	@ (80034c4 <inc_lock+0x118>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80033de:	429a      	cmp	r2, r3
 80033e0:	d109      	bne.n	80033f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80033e2:	4a38      	ldr	r2, [pc, #224]	@ (80034c4 <inc_lock+0x118>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	3308      	adds	r3, #8
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d006      	beq.n	8003404 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d9dc      	bls.n	80033bc <inc_lock+0x10>
 8003402:	e000      	b.n	8003406 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003404:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d132      	bne.n	8003472 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e002      	b.n	8003418 <inc_lock+0x6c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d806      	bhi.n	800342c <inc_lock+0x80>
 800341e:	4a29      	ldr	r2, [pc, #164]	@ (80034c4 <inc_lock+0x118>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f2      	bne.n	8003412 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d101      	bne.n	8003436 <inc_lock+0x8a>
 8003432:	2300      	movs	r3, #0
 8003434:	e040      	b.n	80034b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4922      	ldr	r1, [pc, #136]	@ (80034c4 <inc_lock+0x118>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	440b      	add	r3, r1
 8003442:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	491e      	ldr	r1, [pc, #120]	@ (80034c4 <inc_lock+0x118>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	440b      	add	r3, r1
 8003450:	3304      	adds	r3, #4
 8003452:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	491a      	ldr	r1, [pc, #104]	@ (80034c4 <inc_lock+0x118>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	3308      	adds	r3, #8
 8003462:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003464:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <inc_lock+0x118>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4413      	add	r3, r2
 800346c:	330c      	adds	r3, #12
 800346e:	2200      	movs	r2, #0
 8003470:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <inc_lock+0xe0>
 8003478:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <inc_lock+0x118>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	4413      	add	r3, r2
 8003480:	330c      	adds	r3, #12
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <inc_lock+0xe0>
 8003488:	2300      	movs	r3, #0
 800348a:	e015      	b.n	80034b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <inc_lock+0xf8>
 8003492:	4a0c      	ldr	r2, [pc, #48]	@ (80034c4 <inc_lock+0x118>)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	4413      	add	r3, r2
 800349a:	330c      	adds	r3, #12
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	e001      	b.n	80034a8 <inc_lock+0xfc>
 80034a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034a8:	4906      	ldr	r1, [pc, #24]	@ (80034c4 <inc_lock+0x118>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	440b      	add	r3, r1
 80034b0:	330c      	adds	r3, #12
 80034b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000254 	.word	0x20000254

080034c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d825      	bhi.n	8003528 <dec_lock+0x60>
		n = Files[i].ctr;
 80034dc:	4a17      	ldr	r2, [pc, #92]	@ (800353c <dec_lock+0x74>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	330c      	adds	r3, #12
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f0:	d101      	bne.n	80034f6 <dec_lock+0x2e>
 80034f2:	2300      	movs	r3, #0
 80034f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <dec_lock+0x3a>
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	3b01      	subs	r3, #1
 8003500:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003502:	4a0e      	ldr	r2, [pc, #56]	@ (800353c <dec_lock+0x74>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	4413      	add	r3, r2
 800350a:	330c      	adds	r3, #12
 800350c:	89fa      	ldrh	r2, [r7, #14]
 800350e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003510:	89fb      	ldrh	r3, [r7, #14]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <dec_lock+0x5a>
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <dec_lock+0x74>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4413      	add	r3, r2
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	737b      	strb	r3, [r7, #13]
 8003526:	e001      	b.n	800352c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003528:	2302      	movs	r3, #2
 800352a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800352c:	7b7b      	ldrb	r3, [r7, #13]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000254 	.word	0x20000254

08003540 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e010      	b.n	8003570 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800354e:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <clear_lock+0x44>)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4413      	add	r3, r2
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d105      	bne.n	800356a <clear_lock+0x2a>
 800355e:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <clear_lock+0x44>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d9eb      	bls.n	800354e <clear_lock+0xe>
	}
}
 8003576:	bf00      	nop
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000254 	.word	0x20000254

08003588 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d034      	beq.n	8003606 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7858      	ldrb	r0, [r3, #1]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80035ac:	2301      	movs	r3, #1
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	f7ff fd3e 	bl	8003030 <disk_write>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e022      	b.n	8003606 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	1ad2      	subs	r2, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d217      	bcs.n	8003606 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	789b      	ldrb	r3, [r3, #2]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e010      	b.n	8003600 <sync_window+0x78>
					wsect += fs->fsize;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4413      	add	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7858      	ldrb	r0, [r3, #1]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80035f2:	2301      	movs	r3, #1
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	f7ff fd1b 	bl	8003030 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d8eb      	bhi.n	80035de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d01b      	beq.n	8003660 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ffad 	bl	8003588 <sync_window>
 800362e:	4603      	mov	r3, r0
 8003630:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7858      	ldrb	r0, [r3, #1]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003642:	2301      	movs	r3, #1
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	f7ff fcd3 	bl	8002ff0 <disk_read>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
 8003654:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff87 	bl	8003588 <sync_window>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d158      	bne.n	8003736 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d148      	bne.n	800371e <sync_fs+0xb2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d144      	bne.n	800371e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3330      	adds	r3, #48	@ 0x30
 8003698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fda8 	bl	80031f4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3330      	adds	r3, #48	@ 0x30
 80036a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80036ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fd37 	bl	8003124 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3330      	adds	r3, #48	@ 0x30
 80036ba:	4921      	ldr	r1, [pc, #132]	@ (8003740 <sync_fs+0xd4>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fd4c 	bl	800315a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3330      	adds	r3, #48	@ 0x30
 80036c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80036ca:	491e      	ldr	r1, [pc, #120]	@ (8003744 <sync_fs+0xd8>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fd44 	bl	800315a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3330      	adds	r3, #48	@ 0x30
 80036d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7ff fd3a 	bl	800315a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3330      	adds	r3, #48	@ 0x30
 80036ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7ff fd30 	bl	800315a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7858      	ldrb	r0, [r3, #1]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003712:	2301      	movs	r3, #1
 8003714:	f7ff fc8c 	bl	8003030 <disk_write>
			fs->fsi_flag = 0;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fca2 	bl	8003070 <disk_ioctl>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <sync_fs+0xca>
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	41615252 	.word	0x41615252
 8003744:	61417272 	.word	0x61417272

08003748 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	3b02      	subs	r3, #2
 8003756:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	3b02      	subs	r3, #2
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d301      	bcc.n	8003768 <clust2sect+0x20>
 8003764:	2300      	movs	r3, #0
 8003766:	e008      	b.n	800377a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	895b      	ldrh	r3, [r3, #10]
 800376c:	461a      	mov	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	fb03 f202 	mul.w	r2, r3, r2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	4413      	add	r3, r2
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d904      	bls.n	80037a6 <get_fat+0x20>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e08e      	b.n	80038ca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d061      	beq.n	800387e <get_fat+0xf8>
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	dc7b      	bgt.n	80038b6 <get_fat+0x130>
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d002      	beq.n	80037c8 <get_fat+0x42>
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d041      	beq.n	800384a <get_fat+0xc4>
 80037c6:	e076      	b.n	80038b6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	0a5b      	lsrs	r3, r3, #9
 80037de:	4413      	add	r3, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	6938      	ldr	r0, [r7, #16]
 80037e4:	f7ff ff14 	bl	8003610 <move_window>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d166      	bne.n	80038bc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	60fa      	str	r2, [r7, #12]
 80037f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003800:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0a5b      	lsrs	r3, r3, #9
 800380a:	4413      	add	r3, r2
 800380c:	4619      	mov	r1, r3
 800380e:	6938      	ldr	r0, [r7, #16]
 8003810:	f7ff fefe 	bl	8003610 <move_window>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d152      	bne.n	80038c0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <get_fat+0xba>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	e002      	b.n	8003846 <get_fat+0xc0>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	617b      	str	r3, [r7, #20]
			break;
 8003848:	e03f      	b.n	80038ca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	4413      	add	r3, r2
 8003854:	4619      	mov	r1, r3
 8003856:	6938      	ldr	r0, [r7, #16]
 8003858:	f7ff feda 	bl	8003610 <move_window>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d130      	bne.n	80038c4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003870:	4413      	add	r3, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fc1a 	bl	80030ac <ld_word>
 8003878:	4603      	mov	r3, r0
 800387a:	617b      	str	r3, [r7, #20]
			break;
 800387c:	e025      	b.n	80038ca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	09db      	lsrs	r3, r3, #7
 8003886:	4413      	add	r3, r2
 8003888:	4619      	mov	r1, r3
 800388a:	6938      	ldr	r0, [r7, #16]
 800388c:	f7ff fec0 	bl	8003610 <move_window>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80038a4:	4413      	add	r3, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fc19 	bl	80030de <ld_dword>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038b2:	617b      	str	r3, [r7, #20]
			break;
 80038b4:	e009      	b.n	80038ca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e006      	b.n	80038ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038bc:	bf00      	nop
 80038be:	e004      	b.n	80038ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80038c8:	bf00      	nop
		}
	}

	return val;
 80038ca:	697b      	ldr	r3, [r7, #20]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b089      	sub	sp, #36	@ 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80038e0:	2302      	movs	r3, #2
 80038e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	f240 80d9 	bls.w	8003a9e <put_fat+0x1ca>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f080 80d3 	bcs.w	8003a9e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	f000 8096 	beq.w	8003a2e <put_fat+0x15a>
 8003902:	2b03      	cmp	r3, #3
 8003904:	f300 80cb 	bgt.w	8003a9e <put_fat+0x1ca>
 8003908:	2b01      	cmp	r3, #1
 800390a:	d002      	beq.n	8003912 <put_fat+0x3e>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d06e      	beq.n	80039ee <put_fat+0x11a>
 8003910:	e0c5      	b.n	8003a9e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1a      	ldr	r2, [r3, #32]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	0a5b      	lsrs	r3, r3, #9
 8003928:	4413      	add	r3, r2
 800392a:	4619      	mov	r1, r3
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff fe6f 	bl	8003610 <move_window>
 8003932:	4603      	mov	r3, r0
 8003934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 80a9 	bne.w	8003a90 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	61b9      	str	r1, [r7, #24]
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <put_fat+0xa4>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b25b      	sxtb	r3, r3
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	b25a      	sxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	b25b      	sxtb	r3, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	b25b      	sxtb	r3, r3
 8003970:	4313      	orrs	r3, r2
 8003972:	b25b      	sxtb	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e001      	b.n	800397c <put_fat+0xa8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	0a5b      	lsrs	r3, r3, #9
 800398e:	4413      	add	r3, r2
 8003990:	4619      	mov	r1, r3
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fe3c 	bl	8003610 <move_window>
 8003998:	4603      	mov	r3, r0
 800399a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800399c:	7ffb      	ldrb	r3, [r7, #31]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d178      	bne.n	8003a94 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	4413      	add	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <put_fat+0xf0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e00e      	b.n	80039e2 <put_fat+0x10e>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f023 030f 	bic.w	r3, r3, #15
 80039ce:	b25a      	sxtb	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	70da      	strb	r2, [r3, #3]
			break;
 80039ec:	e057      	b.n	8003a9e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	4413      	add	r3, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff fe08 	bl	8003610 <move_window>
 8003a00:	4603      	mov	r3, r0
 8003a02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d146      	bne.n	8003a98 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003a18:	4413      	add	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fb7f 	bl	8003124 <st_word>
			fs->wflag = 1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	70da      	strb	r2, [r3, #3]
			break;
 8003a2c:	e037      	b.n	8003a9e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	09db      	lsrs	r3, r3, #7
 8003a36:	4413      	add	r3, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fde8 	bl	8003610 <move_window>
 8003a40:	4603      	mov	r3, r0
 8003a42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d128      	bne.n	8003a9c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003a5e:	4413      	add	r3, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fb3c 	bl	80030de <ld_dword>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a6c:	4323      	orrs	r3, r4
 8003a6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003a7e:	4413      	add	r3, r2
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fb69 	bl	800315a <st_dword>
			fs->wflag = 1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	70da      	strb	r2, [r3, #3]
			break;
 8003a8e:	e006      	b.n	8003a9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a90:	bf00      	nop
 8003a92:	e004      	b.n	8003a9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a94:	bf00      	nop
 8003a96:	e002      	b.n	8003a9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a98:	bf00      	nop
 8003a9a:	e000      	b.n	8003a9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a9c:	bf00      	nop
		}
	}
	return res;
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3724      	adds	r7, #36	@ 0x24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}

08003aa8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d904      	bls.n	8003ace <remove_chain+0x26>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d301      	bcc.n	8003ad2 <remove_chain+0x2a>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e04b      	b.n	8003b6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	69b8      	ldr	r0, [r7, #24]
 8003ae0:	f7ff fef8 	bl	80038d4 <put_fat>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003ae8:	7ffb      	ldrb	r3, [r7, #31]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <remove_chain+0x4a>
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
 8003af0:	e03b      	b.n	8003b6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fe46 	bl	8003786 <get_fat>
 8003afa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d031      	beq.n	8003b66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <remove_chain+0x64>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e02e      	b.n	8003b6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d101      	bne.n	8003b18 <remove_chain+0x70>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e028      	b.n	8003b6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003b18:	2200      	movs	r2, #0
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	69b8      	ldr	r0, [r7, #24]
 8003b1e:	f7ff fed9 	bl	80038d4 <put_fat>
 8003b22:	4603      	mov	r3, r0
 8003b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <remove_chain+0x88>
 8003b2c:	7ffb      	ldrb	r3, [r7, #31]
 8003b2e:	e01c      	b.n	8003b6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	3b02      	subs	r3, #2
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20b      	bcs.n	8003b56 <remove_chain+0xae>
			fs->free_clst++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3c6      	bcc.n	8003af2 <remove_chain+0x4a>
 8003b64:	e000      	b.n	8003b68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003b66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b088      	sub	sp, #32
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10d      	bne.n	8003ba4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <create_chain+0x2c>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d31b      	bcc.n	8003bd6 <create_chain+0x64>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e018      	b.n	8003bd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fded 	bl	8003786 <get_fat>
 8003bac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d801      	bhi.n	8003bb8 <create_chain+0x46>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e070      	b.n	8003c9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d101      	bne.n	8003bc4 <create_chain+0x52>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	e06a      	b.n	8003c9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d201      	bcs.n	8003bd2 <create_chain+0x60>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	e063      	b.n	8003c9a <create_chain+0x128>
		scl = clst;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d307      	bcc.n	8003bfa <create_chain+0x88>
				ncl = 2;
 8003bea:	2302      	movs	r3, #2
 8003bec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d901      	bls.n	8003bfa <create_chain+0x88>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e04f      	b.n	8003c9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003bfa:	69f9      	ldr	r1, [r7, #28]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fdc2 	bl	8003786 <get_fat>
 8003c02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d003      	beq.n	8003c18 <create_chain+0xa6>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d101      	bne.n	8003c1c <create_chain+0xaa>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	e03e      	b.n	8003c9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1da      	bne.n	8003bda <create_chain+0x68>
 8003c24:	2300      	movs	r3, #0
 8003c26:	e038      	b.n	8003c9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003c28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	6938      	ldr	r0, [r7, #16]
 8003c32:	f7ff fe4f 	bl	80038d4 <put_fat>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <create_chain+0xe2>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	6938      	ldr	r0, [r7, #16]
 8003c4c:	f7ff fe42 	bl	80038d4 <put_fat>
 8003c50:	4603      	mov	r3, r0
 8003c52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <create_chain+0x116>
		fs->last_clst = ncl;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	3b02      	subs	r3, #2
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d804      	bhi.n	8003c78 <create_chain+0x106>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	791b      	ldrb	r3, [r3, #4]
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	711a      	strb	r2, [r3, #4]
 8003c86:	e007      	b.n	8003c98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <create_chain+0x122>
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	e000      	b.n	8003c96 <create_chain+0x124>
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003c98:	69fb      	ldr	r3, [r7, #28]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	0a5b      	lsrs	r3, r3, #9
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	8952      	ldrh	r2, [r2, #10]
 8003cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	613a      	str	r2, [r7, #16]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <clmt_clust+0x3a>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e010      	b.n	8003cfe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d307      	bcc.n	8003cf4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cf2:	e7e9      	b.n	8003cc8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003cf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4413      	add	r3, r2
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d20:	d204      	bcs.n	8003d2c <dir_sdi+0x22>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e063      	b.n	8003df8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <dir_sdi+0x46>
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d902      	bls.n	8003d50 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	8912      	ldrh	r2, [r2, #8]
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d301      	bcc.n	8003d66 <dir_sdi+0x5c>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e048      	b.n	8003df8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	61da      	str	r2, [r3, #28]
 8003d6e:	e029      	b.n	8003dc4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	895b      	ldrh	r3, [r3, #10]
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003d78:	e019      	b.n	8003dae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fd01 	bl	8003786 <get_fat>
 8003d84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d101      	bne.n	8003d92 <dir_sdi+0x88>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e032      	b.n	8003df8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d904      	bls.n	8003da2 <dir_sdi+0x98>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d301      	bcc.n	8003da6 <dir_sdi+0x9c>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e028      	b.n	8003df8 <dir_sdi+0xee>
			ofs -= csz;
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d2e1      	bcs.n	8003d7a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	6938      	ldr	r0, [r7, #16]
 8003dba:	f7ff fcc5 	bl	8003748 <clust2sect>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <dir_sdi+0xcc>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e010      	b.n	8003df8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	0a5b      	lsrs	r3, r3, #9
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	3320      	adds	r3, #32
 8003e16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <dir_next+0x28>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e26:	d301      	bcc.n	8003e2c <dir_next+0x2c>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	e0aa      	b.n	8003f82 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 8098 	bne.w	8003f68 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	8912      	ldrh	r2, [r2, #8]
 8003e52:	4293      	cmp	r3, r2
 8003e54:	f0c0 8088 	bcc.w	8003f68 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e08f      	b.n	8003f82 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0a5b      	lsrs	r3, r3, #9
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	8952      	ldrh	r2, [r2, #10]
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d17a      	bne.n	8003f68 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f7ff fc83 	bl	8003786 <get_fat>
 8003e80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d801      	bhi.n	8003e8c <dir_next+0x8c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e07a      	b.n	8003f82 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d101      	bne.n	8003e98 <dir_next+0x98>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e074      	b.n	8003f82 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d358      	bcc.n	8003f54 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e067      	b.n	8003f82 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7ff fe59 	bl	8003b72 <create_chain>
 8003ec0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <dir_next+0xcc>
 8003ec8:	2307      	movs	r3, #7
 8003eca:	e05a      	b.n	8003f82 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <dir_next+0xd6>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e055      	b.n	8003f82 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d101      	bne.n	8003ee2 <dir_next+0xe2>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e04f      	b.n	8003f82 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fb50 	bl	8003588 <sync_window>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <dir_next+0xf2>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e047      	b.n	8003f82 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3330      	adds	r3, #48	@ 0x30
 8003ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff f979 	bl	80031f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	6979      	ldr	r1, [r7, #20]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fc1d 	bl	8003748 <clust2sect>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f14:	e012      	b.n	8003f3c <dir_next+0x13c>
						fs->wflag = 1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fb33 	bl	8003588 <sync_window>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <dir_next+0x12c>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e02a      	b.n	8003f82 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	895b      	ldrh	r3, [r3, #10]
 8003f40:	461a      	mov	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d3e6      	bcc.n	8003f16 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff fbf3 	bl	8003748 <clust2sect>
 8003f62:	4602      	mov	r2, r0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff feb4 	bl	8003d0a <dir_sdi>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d12b      	bne.n	8004004 <dir_alloc+0x7a>
		n = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fb2a 	bl	8003610 <move_window>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2be5      	cmp	r3, #229	@ 0xe5
 8003fce:	d004      	beq.n	8003fda <dir_alloc+0x50>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d107      	bne.n	8003fea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d102      	bne.n	8003fee <dir_alloc+0x64>
 8003fe8:	e00c      	b.n	8004004 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff05 	bl	8003e00 <dir_next>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0d7      	beq.n	8003fb0 <dir_alloc+0x26>
 8004000:	e000      	b.n	8004004 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004002:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d101      	bne.n	800400e <dir_alloc+0x84>
 800400a:	2307      	movs	r3, #7
 800400c:	75fb      	strb	r3, [r7, #23]
	return res;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	331a      	adds	r3, #26
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f840 	bl	80030ac <ld_word>
 800402c:	4603      	mov	r3, r0
 800402e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d109      	bne.n	800404c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f835 	bl	80030ac <ld_word>
 8004042:	4603      	mov	r3, r0
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800404c:	68fb      	ldr	r3, [r7, #12]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	331a      	adds	r3, #26
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	b292      	uxth	r2, r2
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f859 	bl	8003124 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d109      	bne.n	800408e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f103 0214 	add.w	r2, r3, #20
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	b29b      	uxth	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7ff f84b 	bl	8003124 <st_word>
	}
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80040a4:	2100      	movs	r1, #0
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fe2f 	bl	8003d0a <dir_sdi>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <dir_find+0x24>
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	e03e      	b.n	8004138 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4619      	mov	r1, r3
 80040c0:	6938      	ldr	r0, [r7, #16]
 80040c2:	f7ff faa5 	bl	8003610 <move_window>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d12f      	bne.n	8004130 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <dir_find+0x4e>
 80040de:	2304      	movs	r3, #4
 80040e0:	75fb      	strb	r3, [r7, #23]
 80040e2:	e028      	b.n	8004136 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	330b      	adds	r3, #11
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	330b      	adds	r3, #11
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <dir_find+0x86>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a18      	ldr	r0, [r3, #32]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3324      	adds	r3, #36	@ 0x24
 800410e:	220b      	movs	r2, #11
 8004110:	4619      	mov	r1, r3
 8004112:	f7ff f88a 	bl	800322a <mem_cmp>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800411c:	2100      	movs	r1, #0
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe6e 	bl	8003e00 <dir_next>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0c5      	beq.n	80040ba <dir_find+0x24>
 800412e:	e002      	b.n	8004136 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004134:	bf00      	nop

	return res;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800414e:	2101      	movs	r1, #1
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff1a 	bl	8003f8a <dir_alloc>
 8004156:	4603      	mov	r3, r0
 8004158:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11c      	bne.n	800419a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4619      	mov	r1, r3
 8004166:	68b8      	ldr	r0, [r7, #8]
 8004168:	f7ff fa52 	bl	8003610 <move_window>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	2220      	movs	r2, #32
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff f838 	bl	80031f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a18      	ldr	r0, [r3, #32]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	@ 0x24
 800418c:	220b      	movs	r2, #11
 800418e:	4619      	mov	r1, r3
 8004190:	f7ff f80f 	bl	80031b2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2201      	movs	r2, #1
 8004198:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3324      	adds	r3, #36	@ 0x24
 80041b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80041ba:	220b      	movs	r2, #11
 80041bc:	2120      	movs	r1, #32
 80041be:	68b8      	ldr	r0, [r7, #8]
 80041c0:	f7ff f818 	bl	80031f4 <mem_set>
	si = i = 0; ni = 8;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	2308      	movs	r3, #8
 80041ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80041de:	7efb      	ldrb	r3, [r7, #27]
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d94e      	bls.n	8004282 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80041e4:	7efb      	ldrb	r3, [r7, #27]
 80041e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80041e8:	d006      	beq.n	80041f8 <create_name+0x54>
 80041ea:	7efb      	ldrb	r3, [r7, #27]
 80041ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80041ee:	d110      	bne.n	8004212 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80041f0:	e002      	b.n	80041f8 <create_name+0x54>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b2f      	cmp	r3, #47	@ 0x2f
 8004202:	d0f6      	beq.n	80041f2 <create_name+0x4e>
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b5c      	cmp	r3, #92	@ 0x5c
 800420e:	d0f0      	beq.n	80041f2 <create_name+0x4e>
			break;
 8004210:	e038      	b.n	8004284 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004212:	7efb      	ldrb	r3, [r7, #27]
 8004214:	2b2e      	cmp	r3, #46	@ 0x2e
 8004216:	d003      	beq.n	8004220 <create_name+0x7c>
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d30c      	bcc.n	800423a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b0b      	cmp	r3, #11
 8004224:	d002      	beq.n	800422c <create_name+0x88>
 8004226:	7efb      	ldrb	r3, [r7, #27]
 8004228:	2b2e      	cmp	r3, #46	@ 0x2e
 800422a:	d001      	beq.n	8004230 <create_name+0x8c>
 800422c:	2306      	movs	r3, #6
 800422e:	e044      	b.n	80042ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004230:	2308      	movs	r3, #8
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	230b      	movs	r3, #11
 8004236:	617b      	str	r3, [r7, #20]
			continue;
 8004238:	e022      	b.n	8004280 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800423a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da04      	bge.n	800424c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004242:	7efb      	ldrb	r3, [r7, #27]
 8004244:	3b80      	subs	r3, #128	@ 0x80
 8004246:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <create_name+0x120>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800424c:	7efb      	ldrb	r3, [r7, #27]
 800424e:	4619      	mov	r1, r3
 8004250:	481d      	ldr	r0, [pc, #116]	@ (80042c8 <create_name+0x124>)
 8004252:	f7ff f811 	bl	8003278 <chk_chr>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <create_name+0xbc>
 800425c:	2306      	movs	r3, #6
 800425e:	e02c      	b.n	80042ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004260:	7efb      	ldrb	r3, [r7, #27]
 8004262:	2b60      	cmp	r3, #96	@ 0x60
 8004264:	d905      	bls.n	8004272 <create_name+0xce>
 8004266:	7efb      	ldrb	r3, [r7, #27]
 8004268:	2b7a      	cmp	r3, #122	@ 0x7a
 800426a:	d802      	bhi.n	8004272 <create_name+0xce>
 800426c:	7efb      	ldrb	r3, [r7, #27]
 800426e:	3b20      	subs	r3, #32
 8004270:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	613a      	str	r2, [r7, #16]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	4413      	add	r3, r2
 800427c:	7efa      	ldrb	r2, [r7, #27]
 800427e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004280:	e7a6      	b.n	80041d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004282:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	441a      	add	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <create_name+0xf4>
 8004294:	2306      	movs	r3, #6
 8004296:	e010      	b.n	80042ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2be5      	cmp	r3, #229	@ 0xe5
 800429e:	d102      	bne.n	80042a6 <create_name+0x102>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2205      	movs	r2, #5
 80042a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80042a6:	7efb      	ldrb	r3, [r7, #27]
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d801      	bhi.n	80042b0 <create_name+0x10c>
 80042ac:	2204      	movs	r2, #4
 80042ae:	e000      	b.n	80042b2 <create_name+0x10e>
 80042b0:	2200      	movs	r2, #0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	330b      	adds	r3, #11
 80042b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80042b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	080062e0 	.word	0x080062e0
 80042c8:	08006284 	.word	0x08006284

080042cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80042e0:	e002      	b.n	80042e8 <follow_path+0x1c>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80042ee:	d0f8      	beq.n	80042e2 <follow_path+0x16>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80042f6:	d0f4      	beq.n	80042e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b1f      	cmp	r3, #31
 8004304:	d80a      	bhi.n	800431c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800430e:	2100      	movs	r1, #0
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fcfa 	bl	8003d0a <dir_sdi>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]
 800431a:	e043      	b.n	80043a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800431c:	463b      	mov	r3, r7
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff3f 	bl	80041a4 <create_name>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d134      	bne.n	800439a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff feb0 	bl	8004096 <dir_find>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004340:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d127      	bne.n	800439e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d122      	bne.n	800439e <follow_path+0xd2>
 8004358:	2305      	movs	r3, #5
 800435a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800435c:	e01f      	b.n	800439e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11c      	bne.n	80043a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	799b      	ldrb	r3, [r3, #6]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004374:	2305      	movs	r3, #5
 8004376:	75fb      	strb	r3, [r7, #23]
 8004378:	e014      	b.n	80043a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004388:	4413      	add	r3, r2
 800438a:	4619      	mov	r1, r3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff fe43 	bl	8004018 <ld_clust>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004398:	e7c0      	b.n	800431c <follow_path+0x50>
			if (res != FR_OK) break;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <follow_path+0xd8>
				break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80043a2:	bf00      	nop
			}
		}
	}

	return res;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d031      	beq.n	8004428 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e002      	b.n	80043d2 <get_ldnumber+0x24>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3301      	adds	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d903      	bls.n	80043e2 <get_ldnumber+0x34>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b3a      	cmp	r3, #58	@ 0x3a
 80043e0:	d1f4      	bne.n	80043cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b3a      	cmp	r3, #58	@ 0x3a
 80043e8:	d11c      	bne.n	8004424 <get_ldnumber+0x76>
			tp = *path;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	60fa      	str	r2, [r7, #12]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	3b30      	subs	r3, #48	@ 0x30
 80043fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b09      	cmp	r3, #9
 8004400:	d80e      	bhi.n	8004420 <get_ldnumber+0x72>
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	429a      	cmp	r2, r3
 8004408:	d10a      	bne.n	8004420 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <get_ldnumber+0x72>
					vol = (int)i;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	e002      	b.n	800442a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004428:	693b      	ldr	r3, [r7, #16]
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	70da      	strb	r2, [r3, #3]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff f8dc 	bl	8003610 <move_window>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <check_fs+0x2a>
 800445e:	2304      	movs	r3, #4
 8004460:	e038      	b.n	80044d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3330      	adds	r3, #48	@ 0x30
 8004466:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fe1e 	bl	80030ac <ld_word>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <check_fs+0x48>
 800447c:	2303      	movs	r3, #3
 800447e:	e029      	b.n	80044d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004486:	2be9      	cmp	r3, #233	@ 0xe9
 8004488:	d009      	beq.n	800449e <check_fs+0x66>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004490:	2beb      	cmp	r3, #235	@ 0xeb
 8004492:	d11e      	bne.n	80044d2 <check_fs+0x9a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800449a:	2b90      	cmp	r3, #144	@ 0x90
 800449c:	d119      	bne.n	80044d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3330      	adds	r3, #48	@ 0x30
 80044a2:	3336      	adds	r3, #54	@ 0x36
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fe1a 	bl	80030de <ld_dword>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044b0:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <check_fs+0xa4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <check_fs+0x82>
 80044b6:	2300      	movs	r3, #0
 80044b8:	e00c      	b.n	80044d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3330      	adds	r3, #48	@ 0x30
 80044be:	3352      	adds	r3, #82	@ 0x52
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fe0c 	bl	80030de <ld_dword>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <check_fs+0xa8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <check_fs+0x9a>
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80044d2:	2302      	movs	r3, #2
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	00544146 	.word	0x00544146
 80044e0:	33544146 	.word	0x33544146

080044e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b096      	sub	sp, #88	@ 0x58
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff ff58 	bl	80043ae <get_ldnumber>
 80044fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	da01      	bge.n	800450a <find_volume+0x26>
 8004506:	230b      	movs	r3, #11
 8004508:	e22d      	b.n	8004966 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800450a:	4aa1      	ldr	r2, [pc, #644]	@ (8004790 <find_volume+0x2ac>)
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <find_volume+0x3a>
 800451a:	230c      	movs	r3, #12
 800451c:	e223      	b.n	8004966 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004522:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fd17 	bl	8002f6c <disk_status>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10c      	bne.n	800456a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <find_volume+0x82>
 8004556:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004562:	230a      	movs	r3, #10
 8004564:	e1ff      	b.n	8004966 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004566:	2300      	movs	r3, #0
 8004568:	e1fd      	b.n	8004966 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004572:	b2da      	uxtb	r2, r3
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fd0f 	bl	8002fa0 <disk_initialize>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004594:	2303      	movs	r3, #3
 8004596:	e1e6      	b.n	8004966 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <find_volume+0xca>
 800459e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80045aa:	230a      	movs	r3, #10
 80045ac:	e1db      	b.n	8004966 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80045b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045b6:	f7ff ff3f 	bl	8004438 <check_fs>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80045c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d149      	bne.n	800465c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80045c8:	2300      	movs	r3, #0
 80045ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80045cc:	e01e      	b.n	800460c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80045d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80045dc:	4413      	add	r3, r2
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	3304      	adds	r3, #4
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <find_volume+0x114>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	3308      	adds	r3, #8
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fd75 	bl	80030de <ld_dword>
 80045f4:	4602      	mov	r2, r0
 80045f6:	e000      	b.n	80045fa <find_volume+0x116>
 80045f8:	2200      	movs	r2, #0
 80045fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	3358      	adds	r3, #88	@ 0x58
 8004600:	443b      	add	r3, r7
 8004602:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004608:	3301      	adds	r3, #1
 800460a:	643b      	str	r3, [r7, #64]	@ 0x40
 800460c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800460e:	2b03      	cmp	r3, #3
 8004610:	d9dd      	bls.n	80045ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004612:	2300      	movs	r3, #0
 8004614:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <find_volume+0x13e>
 800461c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800461e:	3b01      	subs	r3, #1
 8004620:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3358      	adds	r3, #88	@ 0x58
 8004628:	443b      	add	r3, r7
 800462a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800462e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <find_volume+0x15e>
 8004636:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004638:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800463a:	f7ff fefd 	bl	8004438 <check_fs>
 800463e:	4603      	mov	r3, r0
 8004640:	e000      	b.n	8004644 <find_volume+0x160>
 8004642:	2303      	movs	r3, #3
 8004644:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004648:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800464c:	2b01      	cmp	r3, #1
 800464e:	d905      	bls.n	800465c <find_volume+0x178>
 8004650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004652:	3301      	adds	r3, #1
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004658:	2b03      	cmp	r3, #3
 800465a:	d9e2      	bls.n	8004622 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800465c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004660:	2b04      	cmp	r3, #4
 8004662:	d101      	bne.n	8004668 <find_volume+0x184>
 8004664:	2301      	movs	r3, #1
 8004666:	e17e      	b.n	8004966 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800466c:	2b01      	cmp	r3, #1
 800466e:	d901      	bls.n	8004674 <find_volume+0x190>
 8004670:	230d      	movs	r3, #13
 8004672:	e178      	b.n	8004966 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	3330      	adds	r3, #48	@ 0x30
 8004678:	330b      	adds	r3, #11
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fd16 	bl	80030ac <ld_word>
 8004680:	4603      	mov	r3, r0
 8004682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004686:	d001      	beq.n	800468c <find_volume+0x1a8>
 8004688:	230d      	movs	r3, #13
 800468a:	e16c      	b.n	8004966 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	3330      	adds	r3, #48	@ 0x30
 8004690:	3316      	adds	r3, #22
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fd0a 	bl	80030ac <ld_word>
 8004698:	4603      	mov	r3, r0
 800469a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800469c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <find_volume+0x1cc>
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	3330      	adds	r3, #48	@ 0x30
 80046a6:	3324      	adds	r3, #36	@ 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fd18 	bl	80030de <ld_dword>
 80046ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	789b      	ldrb	r3, [r3, #2]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d005      	beq.n	80046d4 <find_volume+0x1f0>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	789b      	ldrb	r3, [r3, #2]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d001      	beq.n	80046d4 <find_volume+0x1f0>
 80046d0:	230d      	movs	r3, #13
 80046d2:	e148      	b.n	8004966 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	789b      	ldrb	r3, [r3, #2]
 80046d8:	461a      	mov	r2, r3
 80046da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e8:	461a      	mov	r2, r3
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	895b      	ldrh	r3, [r3, #10]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <find_volume+0x224>
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	895b      	ldrh	r3, [r3, #10]
 80046fa:	461a      	mov	r2, r3
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	895b      	ldrh	r3, [r3, #10]
 8004700:	3b01      	subs	r3, #1
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <find_volume+0x228>
 8004708:	230d      	movs	r3, #13
 800470a:	e12c      	b.n	8004966 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	3330      	adds	r3, #48	@ 0x30
 8004710:	3311      	adds	r3, #17
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fcca 	bl	80030ac <ld_word>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	891b      	ldrh	r3, [r3, #8]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <find_volume+0x24e>
 800472e:	230d      	movs	r3, #13
 8004730:	e119      	b.n	8004966 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	3330      	adds	r3, #48	@ 0x30
 8004736:	3313      	adds	r3, #19
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fcb7 	bl	80030ac <ld_word>
 800473e:	4603      	mov	r3, r0
 8004740:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <find_volume+0x272>
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	3330      	adds	r3, #48	@ 0x30
 800474c:	3320      	adds	r3, #32
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fcc5 	bl	80030de <ld_dword>
 8004754:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	3330      	adds	r3, #48	@ 0x30
 800475a:	330e      	adds	r3, #14
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fca5 	bl	80030ac <ld_word>
 8004762:	4603      	mov	r3, r0
 8004764:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004766:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <find_volume+0x28c>
 800476c:	230d      	movs	r3, #13
 800476e:	e0fa      	b.n	8004966 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004770:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004774:	4413      	add	r3, r2
 8004776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004778:	8912      	ldrh	r2, [r2, #8]
 800477a:	0912      	lsrs	r2, r2, #4
 800477c:	b292      	uxth	r2, r2
 800477e:	4413      	add	r3, r2
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	429a      	cmp	r2, r3
 8004788:	d204      	bcs.n	8004794 <find_volume+0x2b0>
 800478a:	230d      	movs	r3, #13
 800478c:	e0eb      	b.n	8004966 <find_volume+0x482>
 800478e:	bf00      	nop
 8004790:	2000024c 	.word	0x2000024c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800479c:	8952      	ldrh	r2, [r2, #10]
 800479e:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <find_volume+0x2ca>
 80047aa:	230d      	movs	r3, #13
 80047ac:	e0db      	b.n	8004966 <find_volume+0x482>
		fmt = FS_FAT32;
 80047ae:	2303      	movs	r3, #3
 80047b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d802      	bhi.n	80047c4 <find_volume+0x2e0>
 80047be:	2302      	movs	r3, #2
 80047c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d802      	bhi.n	80047d4 <find_volume+0x2f0>
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80047e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80047e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e6:	441a      	add	r2, r3
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80047ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	441a      	add	r2, r3
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80047f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d11e      	bne.n	800483c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	3330      	adds	r3, #48	@ 0x30
 8004802:	332a      	adds	r3, #42	@ 0x2a
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fc51 	bl	80030ac <ld_word>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <find_volume+0x330>
 8004810:	230d      	movs	r3, #13
 8004812:	e0a8      	b.n	8004966 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004816:	891b      	ldrh	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <find_volume+0x33c>
 800481c:	230d      	movs	r3, #13
 800481e:	e0a2      	b.n	8004966 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004822:	3330      	adds	r3, #48	@ 0x30
 8004824:	332c      	adds	r3, #44	@ 0x2c
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fc59 	bl	80030de <ld_dword>
 800482c:	4602      	mov	r2, r0
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	647b      	str	r3, [r7, #68]	@ 0x44
 800483a:	e01f      	b.n	800487c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	891b      	ldrh	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <find_volume+0x364>
 8004844:	230d      	movs	r3, #13
 8004846:	e08e      	b.n	8004966 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484e:	441a      	add	r2, r3
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004858:	2b02      	cmp	r3, #2
 800485a:	d103      	bne.n	8004864 <find_volume+0x380>
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	e00a      	b.n	800487a <find_volume+0x396>
 8004864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	085a      	lsrs	r2, r3, #1
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800487a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004882:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004886:	0a5b      	lsrs	r3, r3, #9
 8004888:	429a      	cmp	r2, r3
 800488a:	d201      	bcs.n	8004890 <find_volume+0x3ac>
 800488c:	230d      	movs	r3, #13
 800488e:	e06a      	b.n	8004966 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
 8004896:	611a      	str	r2, [r3, #16]
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80048a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d149      	bne.n	8004942 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	3330      	adds	r3, #48	@ 0x30
 80048b2:	3330      	adds	r3, #48	@ 0x30
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fbf9 	bl	80030ac <ld_word>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d140      	bne.n	8004942 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80048c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c2:	3301      	adds	r3, #1
 80048c4:	4619      	mov	r1, r3
 80048c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048c8:	f7fe fea2 	bl	8003610 <move_window>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d137      	bne.n	8004942 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	2200      	movs	r2, #0
 80048d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	3330      	adds	r3, #48	@ 0x30
 80048dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fbe3 	bl	80030ac <ld_word>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d127      	bne.n	8004942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80048f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f4:	3330      	adds	r3, #48	@ 0x30
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fbf1 	bl	80030de <ld_dword>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <find_volume+0x48c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d11e      	bne.n	8004942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004906:	3330      	adds	r3, #48	@ 0x30
 8004908:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fbe6 	bl	80030de <ld_dword>
 8004912:	4603      	mov	r3, r0
 8004914:	4a17      	ldr	r2, [pc, #92]	@ (8004974 <find_volume+0x490>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d113      	bne.n	8004942 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	3330      	adds	r3, #48	@ 0x30
 800491e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fbdb 	bl	80030de <ld_dword>
 8004928:	4602      	mov	r2, r0
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	3330      	adds	r3, #48	@ 0x30
 8004932:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fbd1 	bl	80030de <ld_dword>
 800493c:	4602      	mov	r2, r0
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004948:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <find_volume+0x494>)
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <find_volume+0x494>)
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <find_volume+0x494>)
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800495e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004960:	f7fe fdee 	bl	8003540 <clear_lock>
#endif
	return FR_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3758      	adds	r7, #88	@ 0x58
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	41615252 	.word	0x41615252
 8004974:	61417272 	.word	0x61417272
 8004978:	20000250 	.word	0x20000250

0800497c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004986:	2309      	movs	r3, #9
 8004988:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01c      	beq.n	80049ca <validate+0x4e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <validate+0x4e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <validate+0x4e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	889a      	ldrh	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	88db      	ldrh	r3, [r3, #6]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d10c      	bne.n	80049ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fad8 	bl	8002f6c <disk_status>
 80049bc:	4603      	mov	r3, r0
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <validate+0x4e>
			res = FR_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <validate+0x5a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	e000      	b.n	80049d8 <validate+0x5c>
 80049d6:	2300      	movs	r3, #0
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	6013      	str	r3, [r2, #0]
	return res;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fcd5 	bl	80043ae <get_ldnumber>
 8004a04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da01      	bge.n	8004a10 <f_mount+0x28>
 8004a0c:	230b      	movs	r3, #11
 8004a0e:	e02b      	b.n	8004a68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004a10:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <f_mount+0x88>)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004a20:	69b8      	ldr	r0, [r7, #24]
 8004a22:	f7fe fd8d 	bl	8003540 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	490d      	ldr	r1, [pc, #52]	@ (8004a70 <f_mount+0x88>)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <f_mount+0x66>
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <f_mount+0x6a>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e00a      	b.n	8004a68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004a52:	f107 010c 	add.w	r1, r7, #12
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fd41 	bl	80044e4 <find_volume>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	2000024c 	.word	0x2000024c

08004a74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b098      	sub	sp, #96	@ 0x60
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <f_open+0x18>
 8004a88:	2309      	movs	r3, #9
 8004a8a:	e1a9      	b.n	8004de0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004a94:	79fa      	ldrb	r2, [r7, #7]
 8004a96:	f107 0110 	add.w	r1, r7, #16
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fd20 	bl	80044e4 <find_volume>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8004aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 818d 	bne.w	8004dce <f_open+0x35a>
		dj.obj.fs = fs;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	f107 0314 	add.w	r3, r7, #20
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fc03 	bl	80042cc <follow_path>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004acc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d118      	bne.n	8004b06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da03      	bge.n	8004ae6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004ade:	2306      	movs	r3, #6
 8004ae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004ae4:	e00f      	b.n	8004b06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf8c      	ite	hi
 8004aec:	2301      	movhi	r3, #1
 8004aee:	2300      	movls	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fbd8 	bl	80032b0 <chk_lock>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	f003 031c 	and.w	r3, r3, #28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d07f      	beq.n	8004c10 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8004b10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d017      	beq.n	8004b48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004b18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d10e      	bne.n	8004b3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004b20:	f7fe fc22 	bl	8003368 <enq_lock>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <f_open+0xc4>
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fb06 	bl	8004140 <dir_register>
 8004b34:	4603      	mov	r3, r0
 8004b36:	e000      	b.n	8004b3a <f_open+0xc6>
 8004b38:	2312      	movs	r3, #18
 8004b3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f043 0308 	orr.w	r3, r3, #8
 8004b44:	71fb      	strb	r3, [r7, #7]
 8004b46:	e010      	b.n	8004b6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004b48:	7ebb      	ldrb	r3, [r7, #26]
 8004b4a:	f003 0311 	and.w	r3, r3, #17
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <f_open+0xe6>
					res = FR_DENIED;
 8004b52:	2307      	movs	r3, #7
 8004b54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004b58:	e007      	b.n	8004b6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <f_open+0xf6>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d168      	bne.n	8004c44 <f_open+0x1d0>
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d063      	beq.n	8004c44 <f_open+0x1d0>
				dw = GET_FATTIME();
 8004b7c:	f7fd ffb4 	bl	8002ae8 <get_fattime>
 8004b80:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b84:	330e      	adds	r3, #14
 8004b86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fae6 	bl	800315a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b90:	3316      	adds	r3, #22
 8004b92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fe fae0 	bl	800315a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	330b      	adds	r3, #11
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fa35 	bl	8004018 <ld_clust>
 8004bae:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fa4d 	bl	8004056 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	331c      	adds	r3, #28
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fac9 	bl	800315a <st_dword>
					fs->wflag = 1;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d037      	beq.n	8004c44 <f_open+0x1d0>
						dw = fs->winsect;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	2200      	movs	r2, #0
 8004be0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe ff60 	bl	8003aa8 <remove_chain>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8004bee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d126      	bne.n	8004c44 <f_open+0x1d0>
							res = move_window(fs, dw);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fd08 	bl	8003610 <move_window>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	e019      	b.n	8004c44 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004c10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d115      	bne.n	8004c44 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004c18:	7ebb      	ldrb	r3, [r7, #26]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <f_open+0x1b6>
					res = FR_NO_FILE;
 8004c22:	2304      	movs	r3, #4
 8004c24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004c28:	e00c      	b.n	8004c44 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <f_open+0x1d0>
 8004c34:	7ebb      	ldrb	r3, [r7, #26]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <f_open+0x1d0>
						res = FR_DENIED;
 8004c3e:	2307      	movs	r3, #7
 8004c40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004c44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d126      	bne.n	8004c9a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8004c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	bf8c      	ite	hi
 8004c72:	2301      	movhi	r3, #1
 8004c74:	2300      	movls	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f107 0314 	add.w	r3, r7, #20
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe fb93 	bl	80033ac <inc_lock>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <f_open+0x226>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 8095 	bne.w	8004dce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f9b4 	bl	8004018 <ld_clust>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	331c      	adds	r3, #28
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fa0f 	bl	80030de <ld_dword>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	88da      	ldrh	r2, [r3, #6]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	79fa      	ldrb	r2, [r7, #7]
 8004cde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3330      	adds	r3, #48	@ 0x30
 8004cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fa79 	bl	80031f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d060      	beq.n	8004dce <f_open+0x35a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05c      	beq.n	8004dce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	895b      	ldrh	r3, [r3, #10]
 8004d20:	025b      	lsls	r3, r3, #9
 8004d22:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d30:	e016      	b.n	8004d60 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fd25 	bl	8003786 <get_fat>
 8004d3c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d802      	bhi.n	8004d4a <f_open+0x2d6>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d102      	bne.n	8004d58 <f_open+0x2e4>
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <f_open+0x2fc>
 8004d68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d8e0      	bhi.n	8004d32 <f_open+0x2be>
				}
				fp->clust = clst;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004d76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d127      	bne.n	8004dce <f_open+0x35a>
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d022      	beq.n	8004dce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fcdb 	bl	8003748 <clust2sect>
 8004d92:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <f_open+0x32e>
						res = FR_INT_ERR;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004da0:	e015      	b.n	8004dce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da4:	0a5a      	lsrs	r2, r3, #9
 8004da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da8:	441a      	add	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	7858      	ldrb	r0, [r3, #1]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f7fe f917 	bl	8002ff0 <disk_read>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <f_open+0x35a>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004dce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <f_open+0x368>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3760      	adds	r7, #96	@ 0x60
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08e      	sub	sp, #56	@ 0x38
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f107 0214 	add.w	r2, r7, #20
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fdb7 	bl	800497c <validate>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <f_read+0x44>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	7d5b      	ldrb	r3, [r3, #21]
 8004e20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004e24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <f_read+0x4a>
 8004e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004e30:	e115      	b.n	800505e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	7d1b      	ldrb	r3, [r3, #20]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <f_read+0x5a>
 8004e3e:	2307      	movs	r3, #7
 8004e40:	e10d      	b.n	800505e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f240 80fe 	bls.w	8005054 <f_read+0x26c>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004e5c:	e0fa      	b.n	8005054 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 80c6 	bne.w	8004ff8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	0a5b      	lsrs	r3, r3, #9
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	8952      	ldrh	r2, [r2, #10]
 8004e76:	3a01      	subs	r2, #1
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d12f      	bne.n	8004ee2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e90:	e013      	b.n	8004eba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7fe fefe 	bl	8003ca2 <clmt_clust>
 8004ea6:	6338      	str	r0, [r7, #48]	@ 0x30
 8004ea8:	e007      	b.n	8004eba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe fc67 	bl	8003786 <get_fat>
 8004eb8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d804      	bhi.n	8004eca <f_read+0xe2>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	755a      	strb	r2, [r3, #21]
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e0c9      	b.n	800505e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d104      	bne.n	8004edc <f_read+0xf4>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	755a      	strb	r2, [r3, #21]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0c0      	b.n	800505e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fc2c 	bl	8003748 <clust2sect>
 8004ef0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <f_read+0x11a>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2202      	movs	r2, #2
 8004efc:	755a      	strb	r2, [r3, #21]
 8004efe:	2302      	movs	r3, #2
 8004f00:	e0ad      	b.n	800505e <f_read+0x276>
			sect += csect;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0a5b      	lsrs	r3, r3, #9
 8004f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d039      	beq.n	8004f8a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	4413      	add	r3, r2
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	8952      	ldrh	r2, [r2, #10]
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d905      	bls.n	8004f30 <f_read+0x148>
					cc = fs->csize - csect;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	895b      	ldrh	r3, [r3, #10]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	7858      	ldrb	r0, [r3, #1]
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f3a:	f7fe f859 	bl	8002ff0 <disk_read>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <f_read+0x166>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	755a      	strb	r2, [r3, #21]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e087      	b.n	800505e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	7d1b      	ldrb	r3, [r3, #20]
 8004f52:	b25b      	sxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da14      	bge.n	8004f82 <f_read+0x19a>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90d      	bls.n	8004f82 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	025b      	lsls	r3, r3, #9
 8004f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f72:	18d0      	adds	r0, r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3330      	adds	r3, #48	@ 0x30
 8004f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f7fe f918 	bl	80031b2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8004f88:	e050      	b.n	800502c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d02e      	beq.n	8004ff2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	7d1b      	ldrb	r3, [r3, #20]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da18      	bge.n	8004fd0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	7858      	ldrb	r0, [r3, #1]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	2301      	movs	r3, #1
 8004fae:	f7fe f83f 	bl	8003030 <disk_write>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <f_read+0x1da>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	755a      	strb	r2, [r3, #21]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e04d      	b.n	800505e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	7d1b      	ldrb	r3, [r3, #20]
 8004fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	7858      	ldrb	r0, [r3, #1]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004fda:	2301      	movs	r3, #1
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	f7fe f807 	bl	8002ff0 <disk_read>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <f_read+0x20a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	755a      	strb	r2, [r3, #21]
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e035      	b.n	800505e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005000:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005004:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d901      	bls.n	8005012 <f_read+0x22a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005020:	4413      	add	r3, r2
 8005022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005024:	4619      	mov	r1, r3
 8005026:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005028:	f7fe f8c3 	bl	80031b2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800502c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	4413      	add	r3, r2
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	619a      	str	r2, [r3, #24]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005046:	441a      	add	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f af01 	bne.w	8004e5e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3738      	adds	r7, #56	@ 0x38
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08c      	sub	sp, #48	@ 0x30
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f107 0210 	add.w	r2, r7, #16
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fc78 	bl	800497c <validate>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <f_write+0x44>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	7d5b      	ldrb	r3, [r3, #21]
 800509e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80050a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <f_write+0x4a>
 80050aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050ae:	e14b      	b.n	8005348 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	7d1b      	ldrb	r3, [r3, #20]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <f_write+0x5a>
 80050bc:	2307      	movs	r3, #7
 80050be:	e143      	b.n	8005348 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	f080 812d 	bcs.w	800532c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80050da:	e127      	b.n	800532c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 80e3 	bne.w	80052b0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	0a5b      	lsrs	r3, r3, #9
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	8952      	ldrh	r2, [r2, #10]
 80050f4:	3a01      	subs	r2, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d143      	bne.n	8005188 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10c      	bne.n	8005122 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d11a      	bne.n	800514a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fd2a 	bl	8003b72 <create_chain>
 800511e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005120:	e013      	b.n	800514a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7fe fdb6 	bl	8003ca2 <clmt_clust>
 8005136:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005138:	e007      	b.n	800514a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7fe fd15 	bl	8003b72 <create_chain>
 8005148:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80f2 	beq.w	8005336 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	2b01      	cmp	r3, #1
 8005156:	d104      	bne.n	8005162 <f_write+0xfc>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2202      	movs	r2, #2
 800515c:	755a      	strb	r2, [r3, #21]
 800515e:	2302      	movs	r3, #2
 8005160:	e0f2      	b.n	8005348 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d104      	bne.n	8005174 <f_write+0x10e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	755a      	strb	r2, [r3, #21]
 8005170:	2301      	movs	r3, #1
 8005172:	e0e9      	b.n	8005348 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005178:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <f_write+0x122>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005186:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	7d1b      	ldrb	r3, [r3, #20]
 800518c:	b25b      	sxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	da18      	bge.n	80051c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	7858      	ldrb	r0, [r3, #1]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	2301      	movs	r3, #1
 80051a2:	f7fd ff45 	bl	8003030 <disk_write>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <f_write+0x150>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	755a      	strb	r2, [r3, #21]
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0c8      	b.n	8005348 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	7d1b      	ldrb	r3, [r3, #20]
 80051ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7fe fabb 	bl	8003748 <clust2sect>
 80051d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <f_write+0x17e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2202      	movs	r2, #2
 80051de:	755a      	strb	r2, [r3, #21]
 80051e0:	2302      	movs	r3, #2
 80051e2:	e0b1      	b.n	8005348 <f_write+0x2e2>
			sect += csect;
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03c      	beq.n	8005272 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	4413      	add	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	8952      	ldrh	r2, [r2, #10]
 8005202:	4293      	cmp	r3, r2
 8005204:	d905      	bls.n	8005212 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	895b      	ldrh	r3, [r3, #10]
 800520a:	461a      	mov	r2, r3
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	7858      	ldrb	r0, [r3, #1]
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	69f9      	ldr	r1, [r7, #28]
 800521c:	f7fd ff08 	bl	8003030 <disk_write>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <f_write+0x1ca>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	755a      	strb	r2, [r3, #21]
 800522c:	2301      	movs	r3, #1
 800522e:	e08b      	b.n	8005348 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	429a      	cmp	r2, r3
 800523c:	d915      	bls.n	800526a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	025b      	lsls	r3, r3, #9
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005256:	4619      	mov	r1, r3
 8005258:	f7fd ffab 	bl	80031b2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	7d1b      	ldrb	r3, [r3, #20]
 8005260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005270:	e03f      	b.n	80052f2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	d016      	beq.n	80052aa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005284:	429a      	cmp	r2, r3
 8005286:	d210      	bcs.n	80052aa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	7858      	ldrb	r0, [r3, #1]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005292:	2301      	movs	r3, #1
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	f7fd feab 	bl	8002ff0 <disk_read>
 800529a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	755a      	strb	r2, [r3, #21]
 80052a6:	2301      	movs	r3, #1
 80052a8:	e04e      	b.n	8005348 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80052be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d901      	bls.n	80052ca <f_write+0x264>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	4413      	add	r3, r2
 80052da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd ff67 	bl	80031b2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	7d1b      	ldrb	r3, [r3, #20]
 80052e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	4413      	add	r3, r2
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf38      	it	cc
 8005312:	461a      	movcc	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	441a      	add	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f47f aed4 	bne.w	80050dc <f_write+0x76>
 8005334:	e000      	b.n	8005338 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005336:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	7d1b      	ldrb	r3, [r3, #20]
 800533c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3730      	adds	r7, #48	@ 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f107 0208 	add.w	r2, r7, #8
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fb0b 	bl	800497c <validate>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d168      	bne.n	8005442 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7d1b      	ldrb	r3, [r3, #20]
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d062      	beq.n	8005442 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7d1b      	ldrb	r3, [r3, #20]
 8005380:	b25b      	sxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	da15      	bge.n	80053b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	7858      	ldrb	r0, [r3, #1]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	2301      	movs	r3, #1
 8005396:	f7fd fe4b 	bl	8003030 <disk_write>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <f_sync+0x54>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04f      	b.n	8005444 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7d1b      	ldrb	r3, [r3, #20]
 80053a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80053b2:	f7fd fb99 	bl	8002ae8 <get_fattime>
 80053b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fe f925 	bl	8003610 <move_window>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d138      	bne.n	8005442 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	330b      	adds	r3, #11
 80053da:	781a      	ldrb	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	330b      	adds	r3, #11
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f7fe fe2f 	bl	8004056 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f103 021c 	add.w	r2, r3, #28
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f7fd fea8 	bl	800315a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3316      	adds	r3, #22
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fd fea2 	bl	800315a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3312      	adds	r3, #18
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd fe81 	bl	8003124 <st_word>
					fs->wflag = 1;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2201      	movs	r2, #1
 8005426:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe f91e 	bl	800366c <sync_fs>
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	7d1b      	ldrb	r3, [r3, #20]
 8005438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800543c:	b2da      	uxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005442:	7dfb      	ldrb	r3, [r7, #23]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff7b 	bl	8005350 <f_sync>
 800545a:	4603      	mov	r3, r0
 800545c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d118      	bne.n	8005496 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f107 0208 	add.w	r2, r7, #8
 800546a:	4611      	mov	r1, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fa85 	bl	800497c <validate>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe f821 	bl	80034c8 <dec_lock>
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b092      	sub	sp, #72	@ 0x48
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80054ac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	2200      	movs	r2, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff f814 	bl	80044e4 <find_volume>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80054c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8099 	bne.w	80055fe <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80054cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	3b02      	subs	r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d804      	bhi.n	80054ea <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e089      	b.n	80055fe <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d128      	bne.n	8005548 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80054f6:	2302      	movs	r3, #2
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80054fe:	f107 0314 	add.w	r3, r7, #20
 8005502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe f93e 	bl	8003786 <get_fat>
 800550a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d103      	bne.n	800551c <f_getfree+0x7c>
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800551a:	e063      	b.n	80055e4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d103      	bne.n	800552a <f_getfree+0x8a>
 8005522:	2302      	movs	r3, #2
 8005524:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005528:	e05c      	b.n	80055e4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <f_getfree+0x96>
 8005530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005532:	3301      	adds	r3, #1
 8005534:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8005536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005538:	3301      	adds	r3, #1
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005542:	429a      	cmp	r2, r3
 8005544:	d3db      	bcc.n	80054fe <f_getfree+0x5e>
 8005546:	e04d      	b.n	80055e4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
 8005558:	2300      	movs	r3, #0
 800555a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	d113      	bne.n	800558a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	63ba      	str	r2, [r7, #56]	@ 0x38
 800556a:	4619      	mov	r1, r3
 800556c:	f7fe f850 	bl	8003610 <move_window>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8005576:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800557a:	2b00      	cmp	r3, #0
 800557c:	d131      	bne.n	80055e2 <f_getfree+0x142>
							p = fs->win;
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	3330      	adds	r3, #48	@ 0x30
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8005584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d10f      	bne.n	80055b2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005594:	f7fd fd8a 	bl	80030ac <ld_word>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <f_getfree+0x104>
 800559e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a0:	3301      	adds	r3, #1
 80055a2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	3302      	adds	r3, #2
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	3b02      	subs	r3, #2
 80055ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b0:	e010      	b.n	80055d4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80055b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055b4:	f7fd fd93 	bl	80030de <ld_dword>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <f_getfree+0x128>
 80055c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c4:	3301      	adds	r3, #1
 80055c6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	3304      	adds	r3, #4
 80055cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d0:	3b04      	subs	r3, #4
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d6:	3b01      	subs	r3, #1
 80055d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1bd      	bne.n	800555c <f_getfree+0xbc>
 80055e0:	e000      	b.n	80055e4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80055e2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055e8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	791a      	ldrb	r2, [r3, #4]
 80055f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80055fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005602:	4618      	mov	r0, r3
 8005604:	3748      	adds	r7, #72	@ 0x48
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800561e:	e01c      	b.n	800565a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	f107 0114 	add.w	r1, r7, #20
 8005628:	2201      	movs	r2, #1
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fbdc 	bl	8004de8 <f_read>
		if (rc != 1) break;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d117      	bne.n	8005666 <f_gets+0x5c>
		c = s[0];
 8005636:	7d3b      	ldrb	r3, [r7, #20]
 8005638:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b0d      	cmp	r3, #13
 800563e:	d00b      	beq.n	8005658 <f_gets+0x4e>
		*p++ = c;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	61ba      	str	r2, [r7, #24]
 8005646:	7dfa      	ldrb	r2, [r7, #23]
 8005648:	701a      	strb	r2, [r3, #0]
		n++;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	3301      	adds	r3, #1
 800564e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b0a      	cmp	r3, #10
 8005654:	d009      	beq.n	800566a <f_gets+0x60>
 8005656:	e000      	b.n	800565a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005658:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	3b01      	subs	r3, #1
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	429a      	cmp	r2, r3
 8005662:	dbdd      	blt.n	8005620 <f_gets+0x16>
 8005664:	e002      	b.n	800566c <f_gets+0x62>
		if (rc != 1) break;
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800566a:	bf00      	nop
	}
	*p = 0;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <f_gets+0x72>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	e000      	b.n	800567e <f_gets+0x74>
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800569e:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056a0:	7a5b      	ldrb	r3, [r3, #9]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d131      	bne.n	800570c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056a8:	4b1c      	ldr	r3, [pc, #112]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056aa:	7a5b      	ldrb	r3, [r3, #9]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056b2:	2100      	movs	r1, #0
 80056b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80056b6:	4b19      	ldr	r3, [pc, #100]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056b8:	7a5b      	ldrb	r3, [r3, #9]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4a17      	ldr	r2, [pc, #92]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80056c6:	4b15      	ldr	r3, [pc, #84]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056c8:	7a5b      	ldrb	r3, [r3, #9]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056d0:	4413      	add	r3, r2
 80056d2:	79fa      	ldrb	r2, [r7, #7]
 80056d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056d6:	4b11      	ldr	r3, [pc, #68]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056d8:	7a5b      	ldrb	r3, [r3, #9]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	b2d1      	uxtb	r1, r2
 80056e0:	4a0e      	ldr	r2, [pc, #56]	@ (800571c <FATFS_LinkDriverEx+0x94>)
 80056e2:	7251      	strb	r1, [r2, #9]
 80056e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056e6:	7dbb      	ldrb	r3, [r7, #22]
 80056e8:	3330      	adds	r3, #48	@ 0x30
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3301      	adds	r3, #1
 80056f4:	223a      	movs	r2, #58	@ 0x3a
 80056f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3302      	adds	r3, #2
 80056fc:	222f      	movs	r2, #47	@ 0x2f
 80056fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3303      	adds	r3, #3
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
}
 800570e:	4618      	mov	r0, r3
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000274 	.word	0x20000274

08005720 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800572a:	2200      	movs	r2, #0
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffaa 	bl	8005688 <FATFS_LinkDriverEx>
 8005734:	4603      	mov	r3, r0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_vsniprintf_r>:
 800573e:	b530      	push	{r4, r5, lr}
 8005740:	4614      	mov	r4, r2
 8005742:	2c00      	cmp	r4, #0
 8005744:	b09b      	sub	sp, #108	@ 0x6c
 8005746:	4605      	mov	r5, r0
 8005748:	461a      	mov	r2, r3
 800574a:	da05      	bge.n	8005758 <_vsniprintf_r+0x1a>
 800574c:	238b      	movs	r3, #139	@ 0x8b
 800574e:	6003      	str	r3, [r0, #0]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	b01b      	add	sp, #108	@ 0x6c
 8005756:	bd30      	pop	{r4, r5, pc}
 8005758:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800575c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	9319      	str	r3, [sp, #100]	@ 0x64
 8005766:	bf14      	ite	ne
 8005768:	f104 33ff 	addne.w	r3, r4, #4294967295
 800576c:	4623      	moveq	r3, r4
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005776:	9100      	str	r1, [sp, #0]
 8005778:	9104      	str	r1, [sp, #16]
 800577a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800577e:	4669      	mov	r1, sp
 8005780:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005782:	f000 f9a1 	bl	8005ac8 <_svfiprintf_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	bfbc      	itt	lt
 800578a:	238b      	movlt	r3, #139	@ 0x8b
 800578c:	602b      	strlt	r3, [r5, #0]
 800578e:	2c00      	cmp	r4, #0
 8005790:	d0e0      	beq.n	8005754 <_vsniprintf_r+0x16>
 8005792:	9b00      	ldr	r3, [sp, #0]
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e7dc      	b.n	8005754 <_vsniprintf_r+0x16>
	...

0800579c <vsniprintf>:
 800579c:	b507      	push	{r0, r1, r2, lr}
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	460a      	mov	r2, r1
 80057a4:	4601      	mov	r1, r0
 80057a6:	4803      	ldr	r0, [pc, #12]	@ (80057b4 <vsniprintf+0x18>)
 80057a8:	6800      	ldr	r0, [r0, #0]
 80057aa:	f7ff ffc8 	bl	800573e <_vsniprintf_r>
 80057ae:	b003      	add	sp, #12
 80057b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80057b4:	20000024 	.word	0x20000024

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	@ (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000024 	.word	0x20000024

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	@ (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 fc64 	bl	80060b4 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	0800639c 	.word	0x0800639c
 8005810:	0800639c 	.word	0x0800639c
 8005814:	0800639c 	.word	0x0800639c
 8005818:	080063a0 	.word	0x080063a0

0800581c <__retarget_lock_acquire_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_release_recursive>:
 800581e:	4770      	bx	lr

08005820 <_free_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	2900      	cmp	r1, #0
 8005826:	d041      	beq.n	80058ac <_free_r+0x8c>
 8005828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582c:	1f0c      	subs	r4, r1, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	18e4      	addlt	r4, r4, r3
 8005834:	f000 f8e0 	bl	80059f8 <__malloc_lock>
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <_free_r+0x90>)
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	b933      	cbnz	r3, 800584c <_free_r+0x2c>
 800583e:	6063      	str	r3, [r4, #4]
 8005840:	6014      	str	r4, [r2, #0]
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f000 b8dc 	b.w	8005a04 <__malloc_unlock>
 800584c:	42a3      	cmp	r3, r4
 800584e:	d908      	bls.n	8005862 <_free_r+0x42>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf01      	itttt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	e7ed      	b.n	800583e <_free_r+0x1e>
 8005862:	461a      	mov	r2, r3
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b10b      	cbz	r3, 800586c <_free_r+0x4c>
 8005868:	42a3      	cmp	r3, r4
 800586a:	d9fa      	bls.n	8005862 <_free_r+0x42>
 800586c:	6811      	ldr	r1, [r2, #0]
 800586e:	1850      	adds	r0, r2, r1
 8005870:	42a0      	cmp	r0, r4
 8005872:	d10b      	bne.n	800588c <_free_r+0x6c>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	4401      	add	r1, r0
 8005878:	1850      	adds	r0, r2, r1
 800587a:	4283      	cmp	r3, r0
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	d1e0      	bne.n	8005842 <_free_r+0x22>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	6053      	str	r3, [r2, #4]
 8005886:	4408      	add	r0, r1
 8005888:	6010      	str	r0, [r2, #0]
 800588a:	e7da      	b.n	8005842 <_free_r+0x22>
 800588c:	d902      	bls.n	8005894 <_free_r+0x74>
 800588e:	230c      	movs	r3, #12
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	e7d6      	b.n	8005842 <_free_r+0x22>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf04      	itt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	bf04      	itt	eq
 80058a4:	1809      	addeq	r1, r1, r0
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	6054      	str	r4, [r2, #4]
 80058aa:	e7ca      	b.n	8005842 <_free_r+0x22>
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	200003c4 	.word	0x200003c4

080058b4 <sbrk_aligned>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4e0f      	ldr	r6, [pc, #60]	@ (80058f4 <sbrk_aligned+0x40>)
 80058b8:	460c      	mov	r4, r1
 80058ba:	6831      	ldr	r1, [r6, #0]
 80058bc:	4605      	mov	r5, r0
 80058be:	b911      	cbnz	r1, 80058c6 <sbrk_aligned+0x12>
 80058c0:	f000 fba4 	bl	800600c <_sbrk_r>
 80058c4:	6030      	str	r0, [r6, #0]
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 fb9f 	bl	800600c <_sbrk_r>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d103      	bne.n	80058da <sbrk_aligned+0x26>
 80058d2:	f04f 34ff 	mov.w	r4, #4294967295
 80058d6:	4620      	mov	r0, r4
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	1cc4      	adds	r4, r0, #3
 80058dc:	f024 0403 	bic.w	r4, r4, #3
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d0f8      	beq.n	80058d6 <sbrk_aligned+0x22>
 80058e4:	1a21      	subs	r1, r4, r0
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fb90 	bl	800600c <_sbrk_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d1f2      	bne.n	80058d6 <sbrk_aligned+0x22>
 80058f0:	e7ef      	b.n	80058d2 <sbrk_aligned+0x1e>
 80058f2:	bf00      	nop
 80058f4:	200003c0 	.word	0x200003c0

080058f8 <_malloc_r>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	1ccd      	adds	r5, r1, #3
 80058fe:	f025 0503 	bic.w	r5, r5, #3
 8005902:	3508      	adds	r5, #8
 8005904:	2d0c      	cmp	r5, #12
 8005906:	bf38      	it	cc
 8005908:	250c      	movcc	r5, #12
 800590a:	2d00      	cmp	r5, #0
 800590c:	4606      	mov	r6, r0
 800590e:	db01      	blt.n	8005914 <_malloc_r+0x1c>
 8005910:	42a9      	cmp	r1, r5
 8005912:	d904      	bls.n	800591e <_malloc_r+0x26>
 8005914:	230c      	movs	r3, #12
 8005916:	6033      	str	r3, [r6, #0]
 8005918:	2000      	movs	r0, #0
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059f4 <_malloc_r+0xfc>
 8005922:	f000 f869 	bl	80059f8 <__malloc_lock>
 8005926:	f8d8 3000 	ldr.w	r3, [r8]
 800592a:	461c      	mov	r4, r3
 800592c:	bb44      	cbnz	r4, 8005980 <_malloc_r+0x88>
 800592e:	4629      	mov	r1, r5
 8005930:	4630      	mov	r0, r6
 8005932:	f7ff ffbf 	bl	80058b4 <sbrk_aligned>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	4604      	mov	r4, r0
 800593a:	d158      	bne.n	80059ee <_malloc_r+0xf6>
 800593c:	f8d8 4000 	ldr.w	r4, [r8]
 8005940:	4627      	mov	r7, r4
 8005942:	2f00      	cmp	r7, #0
 8005944:	d143      	bne.n	80059ce <_malloc_r+0xd6>
 8005946:	2c00      	cmp	r4, #0
 8005948:	d04b      	beq.n	80059e2 <_malloc_r+0xea>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	4639      	mov	r1, r7
 800594e:	4630      	mov	r0, r6
 8005950:	eb04 0903 	add.w	r9, r4, r3
 8005954:	f000 fb5a 	bl	800600c <_sbrk_r>
 8005958:	4581      	cmp	r9, r0
 800595a:	d142      	bne.n	80059e2 <_malloc_r+0xea>
 800595c:	6821      	ldr	r1, [r4, #0]
 800595e:	1a6d      	subs	r5, r5, r1
 8005960:	4629      	mov	r1, r5
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ffa6 	bl	80058b4 <sbrk_aligned>
 8005968:	3001      	adds	r0, #1
 800596a:	d03a      	beq.n	80059e2 <_malloc_r+0xea>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	442b      	add	r3, r5
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	f8d8 3000 	ldr.w	r3, [r8]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	bb62      	cbnz	r2, 80059d4 <_malloc_r+0xdc>
 800597a:	f8c8 7000 	str.w	r7, [r8]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xa8>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d420      	bmi.n	80059c8 <_malloc_r+0xd0>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xc2>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f82f 	bl	8005a04 <__malloc_unlock>
 80059a6:	f104 000b 	add.w	r0, r4, #11
 80059aa:	1d23      	adds	r3, r4, #4
 80059ac:	f020 0007 	bic.w	r0, r0, #7
 80059b0:	1ac2      	subs	r2, r0, r3
 80059b2:	bf1c      	itt	ne
 80059b4:	1a1b      	subne	r3, r3, r0
 80059b6:	50a3      	strne	r3, [r4, r2]
 80059b8:	e7af      	b.n	800591a <_malloc_r+0x22>
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	42a3      	cmp	r3, r4
 80059be:	bf0c      	ite	eq
 80059c0:	f8c8 2000 	streq.w	r2, [r8]
 80059c4:	605a      	strne	r2, [r3, #4]
 80059c6:	e7eb      	b.n	80059a0 <_malloc_r+0xa8>
 80059c8:	4623      	mov	r3, r4
 80059ca:	6864      	ldr	r4, [r4, #4]
 80059cc:	e7ae      	b.n	800592c <_malloc_r+0x34>
 80059ce:	463c      	mov	r4, r7
 80059d0:	687f      	ldr	r7, [r7, #4]
 80059d2:	e7b6      	b.n	8005942 <_malloc_r+0x4a>
 80059d4:	461a      	mov	r2, r3
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d1fb      	bne.n	80059d4 <_malloc_r+0xdc>
 80059dc:	2300      	movs	r3, #0
 80059de:	6053      	str	r3, [r2, #4]
 80059e0:	e7de      	b.n	80059a0 <_malloc_r+0xa8>
 80059e2:	230c      	movs	r3, #12
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	4630      	mov	r0, r6
 80059e8:	f000 f80c 	bl	8005a04 <__malloc_unlock>
 80059ec:	e794      	b.n	8005918 <_malloc_r+0x20>
 80059ee:	6005      	str	r5, [r0, #0]
 80059f0:	e7d6      	b.n	80059a0 <_malloc_r+0xa8>
 80059f2:	bf00      	nop
 80059f4:	200003c4 	.word	0x200003c4

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	@ (8005a00 <__malloc_lock+0x8>)
 80059fa:	f7ff bf0f 	b.w	800581c <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	200003bc 	.word	0x200003bc

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	@ (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f7ff bf0a 	b.w	800581e <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	200003bc 	.word	0x200003bc

08005a10 <__ssputs_r>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	688e      	ldr	r6, [r1, #8]
 8005a16:	461f      	mov	r7, r3
 8005a18:	42be      	cmp	r6, r7
 8005a1a:	680b      	ldr	r3, [r1, #0]
 8005a1c:	4682      	mov	sl, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4690      	mov	r8, r2
 8005a22:	d82d      	bhi.n	8005a80 <__ssputs_r+0x70>
 8005a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a2c:	d026      	beq.n	8005a7c <__ssputs_r+0x6c>
 8005a2e:	6965      	ldr	r5, [r4, #20]
 8005a30:	6909      	ldr	r1, [r1, #16]
 8005a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a36:	eba3 0901 	sub.w	r9, r3, r1
 8005a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a3e:	1c7b      	adds	r3, r7, #1
 8005a40:	444b      	add	r3, r9
 8005a42:	106d      	asrs	r5, r5, #1
 8005a44:	429d      	cmp	r5, r3
 8005a46:	bf38      	it	cc
 8005a48:	461d      	movcc	r5, r3
 8005a4a:	0553      	lsls	r3, r2, #21
 8005a4c:	d527      	bpl.n	8005a9e <__ssputs_r+0x8e>
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7ff ff52 	bl	80058f8 <_malloc_r>
 8005a54:	4606      	mov	r6, r0
 8005a56:	b360      	cbz	r0, 8005ab2 <__ssputs_r+0xa2>
 8005a58:	6921      	ldr	r1, [r4, #16]
 8005a5a:	464a      	mov	r2, r9
 8005a5c:	f000 fae6 	bl	800602c <memcpy>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	6126      	str	r6, [r4, #16]
 8005a6e:	6165      	str	r5, [r4, #20]
 8005a70:	444e      	add	r6, r9
 8005a72:	eba5 0509 	sub.w	r5, r5, r9
 8005a76:	6026      	str	r6, [r4, #0]
 8005a78:	60a5      	str	r5, [r4, #8]
 8005a7a:	463e      	mov	r6, r7
 8005a7c:	42be      	cmp	r6, r7
 8005a7e:	d900      	bls.n	8005a82 <__ssputs_r+0x72>
 8005a80:	463e      	mov	r6, r7
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	4632      	mov	r2, r6
 8005a86:	4641      	mov	r1, r8
 8005a88:	f000 faa6 	bl	8005fd8 <memmove>
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	1b9b      	subs	r3, r3, r6
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	4433      	add	r3, r6
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	f000 fad2 	bl	8006048 <_realloc_r>
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1e0      	bne.n	8005a6c <__ssputs_r+0x5c>
 8005aaa:	6921      	ldr	r1, [r4, #16]
 8005aac:	4650      	mov	r0, sl
 8005aae:	f7ff feb7 	bl	8005820 <_free_r>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	f8ca 3000 	str.w	r3, [sl]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e7e9      	b.n	8005a9a <__ssputs_r+0x8a>
	...

08005ac8 <_svfiprintf_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4698      	mov	r8, r3
 8005ace:	898b      	ldrh	r3, [r1, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	b09d      	sub	sp, #116	@ 0x74
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	d510      	bpl.n	8005afe <_svfiprintf_r+0x36>
 8005adc:	690b      	ldr	r3, [r1, #16]
 8005ade:	b973      	cbnz	r3, 8005afe <_svfiprintf_r+0x36>
 8005ae0:	2140      	movs	r1, #64	@ 0x40
 8005ae2:	f7ff ff09 	bl	80058f8 <_malloc_r>
 8005ae6:	6028      	str	r0, [r5, #0]
 8005ae8:	6128      	str	r0, [r5, #16]
 8005aea:	b930      	cbnz	r0, 8005afa <_svfiprintf_r+0x32>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	b01d      	add	sp, #116	@ 0x74
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	2340      	movs	r3, #64	@ 0x40
 8005afc:	616b      	str	r3, [r5, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b02:	2320      	movs	r3, #32
 8005b04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0c:	2330      	movs	r3, #48	@ 0x30
 8005b0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cac <_svfiprintf_r+0x1e4>
 8005b12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b16:	f04f 0901 	mov.w	r9, #1
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	469a      	mov	sl, r3
 8005b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b22:	b10a      	cbz	r2, 8005b28 <_svfiprintf_r+0x60>
 8005b24:	2a25      	cmp	r2, #37	@ 0x25
 8005b26:	d1f9      	bne.n	8005b1c <_svfiprintf_r+0x54>
 8005b28:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2c:	d00b      	beq.n	8005b46 <_svfiprintf_r+0x7e>
 8005b2e:	465b      	mov	r3, fp
 8005b30:	4622      	mov	r2, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ff6b 	bl	8005a10 <__ssputs_r>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f000 80a7 	beq.w	8005c8e <_svfiprintf_r+0x1c6>
 8005b40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b42:	445a      	add	r2, fp
 8005b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b46:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 809f 	beq.w	8005c8e <_svfiprintf_r+0x1c6>
 8005b50:	2300      	movs	r3, #0
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295
 8005b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5a:	f10a 0a01 	add.w	sl, sl, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	9307      	str	r3, [sp, #28]
 8005b62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b68:	4654      	mov	r4, sl
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b70:	484e      	ldr	r0, [pc, #312]	@ (8005cac <_svfiprintf_r+0x1e4>)
 8005b72:	f7fa fb35 	bl	80001e0 <memchr>
 8005b76:	9a04      	ldr	r2, [sp, #16]
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_svfiprintf_r+0xea>
 8005b7a:	06d0      	lsls	r0, r2, #27
 8005b7c:	bf44      	itt	mi
 8005b7e:	2320      	movmi	r3, #32
 8005b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b84:	0711      	lsls	r1, r2, #28
 8005b86:	bf44      	itt	mi
 8005b88:	232b      	movmi	r3, #43	@ 0x2b
 8005b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b94:	d015      	beq.n	8005bc2 <_svfiprintf_r+0xfa>
 8005b96:	9a07      	ldr	r2, [sp, #28]
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f04f 0c0a 	mov.w	ip, #10
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba6:	3b30      	subs	r3, #48	@ 0x30
 8005ba8:	2b09      	cmp	r3, #9
 8005baa:	d94b      	bls.n	8005c44 <_svfiprintf_r+0x17c>
 8005bac:	b1b0      	cbz	r0, 8005bdc <_svfiprintf_r+0x114>
 8005bae:	9207      	str	r2, [sp, #28]
 8005bb0:	e014      	b.n	8005bdc <_svfiprintf_r+0x114>
 8005bb2:	eba0 0308 	sub.w	r3, r0, r8
 8005bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	e7d2      	b.n	8005b68 <_svfiprintf_r+0xa0>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	9103      	str	r1, [sp, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfbb      	ittet	lt
 8005bce:	425b      	neglt	r3, r3
 8005bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd4:	9307      	strge	r3, [sp, #28]
 8005bd6:	9307      	strlt	r3, [sp, #28]
 8005bd8:	bfb8      	it	lt
 8005bda:	9204      	strlt	r2, [sp, #16]
 8005bdc:	7823      	ldrb	r3, [r4, #0]
 8005bde:	2b2e      	cmp	r3, #46	@ 0x2e
 8005be0:	d10a      	bne.n	8005bf8 <_svfiprintf_r+0x130>
 8005be2:	7863      	ldrb	r3, [r4, #1]
 8005be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be6:	d132      	bne.n	8005c4e <_svfiprintf_r+0x186>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	9203      	str	r2, [sp, #12]
 8005bf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bf4:	3402      	adds	r4, #2
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cbc <_svfiprintf_r+0x1f4>
 8005bfc:	7821      	ldrb	r1, [r4, #0]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	4650      	mov	r0, sl
 8005c02:	f7fa faed 	bl	80001e0 <memchr>
 8005c06:	b138      	cbz	r0, 8005c18 <_svfiprintf_r+0x150>
 8005c08:	9b04      	ldr	r3, [sp, #16]
 8005c0a:	eba0 000a 	sub.w	r0, r0, sl
 8005c0e:	2240      	movs	r2, #64	@ 0x40
 8005c10:	4082      	lsls	r2, r0
 8005c12:	4313      	orrs	r3, r2
 8005c14:	3401      	adds	r4, #1
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	4824      	ldr	r0, [pc, #144]	@ (8005cb0 <_svfiprintf_r+0x1e8>)
 8005c1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c22:	2206      	movs	r2, #6
 8005c24:	f7fa fadc 	bl	80001e0 <memchr>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d036      	beq.n	8005c9a <_svfiprintf_r+0x1d2>
 8005c2c:	4b21      	ldr	r3, [pc, #132]	@ (8005cb4 <_svfiprintf_r+0x1ec>)
 8005c2e:	bb1b      	cbnz	r3, 8005c78 <_svfiprintf_r+0x1b0>
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	3307      	adds	r3, #7
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3e:	4433      	add	r3, r6
 8005c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c42:	e76a      	b.n	8005b1a <_svfiprintf_r+0x52>
 8005c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c48:	460c      	mov	r4, r1
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7a8      	b.n	8005ba0 <_svfiprintf_r+0xd8>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	3401      	adds	r4, #1
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	4619      	mov	r1, r3
 8005c56:	f04f 0c0a 	mov.w	ip, #10
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c60:	3a30      	subs	r2, #48	@ 0x30
 8005c62:	2a09      	cmp	r2, #9
 8005c64:	d903      	bls.n	8005c6e <_svfiprintf_r+0x1a6>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c6      	beq.n	8005bf8 <_svfiprintf_r+0x130>
 8005c6a:	9105      	str	r1, [sp, #20]
 8005c6c:	e7c4      	b.n	8005bf8 <_svfiprintf_r+0x130>
 8005c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c72:	4604      	mov	r4, r0
 8005c74:	2301      	movs	r3, #1
 8005c76:	e7f0      	b.n	8005c5a <_svfiprintf_r+0x192>
 8005c78:	ab03      	add	r3, sp, #12
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <_svfiprintf_r+0x1f0>)
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	4638      	mov	r0, r7
 8005c84:	f3af 8000 	nop.w
 8005c88:	1c42      	adds	r2, r0, #1
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	d1d6      	bne.n	8005c3c <_svfiprintf_r+0x174>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	065b      	lsls	r3, r3, #25
 8005c92:	f53f af2d 	bmi.w	8005af0 <_svfiprintf_r+0x28>
 8005c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c98:	e72c      	b.n	8005af4 <_svfiprintf_r+0x2c>
 8005c9a:	ab03      	add	r3, sp, #12
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <_svfiprintf_r+0x1f0>)
 8005ca2:	a904      	add	r1, sp, #16
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f000 f879 	bl	8005d9c <_printf_i>
 8005caa:	e7ed      	b.n	8005c88 <_svfiprintf_r+0x1c0>
 8005cac:	08006360 	.word	0x08006360
 8005cb0:	0800636a 	.word	0x0800636a
 8005cb4:	00000000 	.word	0x00000000
 8005cb8:	08005a11 	.word	0x08005a11
 8005cbc:	08006366 	.word	0x08006366

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3b00      	subs	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c8      	blx	r9
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf02      	ittt	eq
 8005d32:	68e5      	ldreq	r5, [r4, #12]
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	1aed      	subeq	r5, r5, r3
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c8      	blx	r9
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	@ 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c8      	blx	r9
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005da4:	2f78      	cmp	r7, #120	@ 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	@ 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d1 	beq.w	8005f60 <_printf_i+0x1c4>
 8005dbe:	2f58      	cmp	r7, #88	@ 0x58
 8005dc0:	f000 80b8 	beq.w	8005f34 <_printf_i+0x198>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f47 	.word	0x08005f47
 8005e0c:	08005e73 	.word	0x08005e73
 8005e10:	08005f01 	.word	0x08005f01
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f69 	.word	0x08005f69
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e73 	.word	0x08005e73
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f09 	.word	0x08005f09
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6032      	str	r2, [r6, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e09c      	b.n	8005f82 <_printf_i+0x1e6>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xbc>
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <_printf_i+0xc4>
 8005e58:	0645      	lsls	r5, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xb8>
 8005e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_i+0xd0>
 8005e64:	232d      	movs	r3, #45	@ 0x2d
 8005e66:	426d      	negs	r5, r5
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	4858      	ldr	r0, [pc, #352]	@ (8005fd0 <_printf_i+0x234>)
 8005e6e:	230a      	movs	r3, #10
 8005e70:	e011      	b.n	8005e96 <_printf_i+0xfa>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	0608      	lsls	r0, r1, #24
 8005e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e7c:	d402      	bmi.n	8005e84 <_printf_i+0xe8>
 8005e7e:	0649      	lsls	r1, r1, #25
 8005e80:	bf48      	it	mi
 8005e82:	b2ad      	uxthmi	r5, r5
 8005e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e86:	4852      	ldr	r0, [pc, #328]	@ (8005fd0 <_printf_i+0x234>)
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	bf14      	ite	ne
 8005e8c:	230a      	movne	r3, #10
 8005e8e:	2308      	moveq	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	db05      	blt.n	8005eaa <_printf_i+0x10e>
 8005e9e:	6821      	ldr	r1, [r4, #0]
 8005ea0:	432e      	orrs	r6, r5
 8005ea2:	f021 0104 	bic.w	r1, r1, #4
 8005ea6:	6021      	str	r1, [r4, #0]
 8005ea8:	d04b      	beq.n	8005f42 <_printf_i+0x1a6>
 8005eaa:	4616      	mov	r6, r2
 8005eac:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb0:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb4:	5dc7      	ldrb	r7, [r0, r7]
 8005eb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eba:	462f      	mov	r7, r5
 8005ebc:	42bb      	cmp	r3, r7
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	d9f4      	bls.n	8005eac <_printf_i+0x110>
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d10b      	bne.n	8005ede <_printf_i+0x142>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07df      	lsls	r7, r3, #31
 8005eca:	d508      	bpl.n	8005ede <_printf_i+0x142>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	6861      	ldr	r1, [r4, #4]
 8005ed0:	4299      	cmp	r1, r3
 8005ed2:	bfde      	ittt	le
 8005ed4:	2330      	movle	r3, #48	@ 0x30
 8005ed6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ede:	1b92      	subs	r2, r2, r6
 8005ee0:	6122      	str	r2, [r4, #16]
 8005ee2:	f8cd a000 	str.w	sl, [sp]
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	aa03      	add	r2, sp, #12
 8005eea:	4621      	mov	r1, r4
 8005eec:	4640      	mov	r0, r8
 8005eee:	f7ff fee7 	bl	8005cc0 <_printf_common>
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d14a      	bne.n	8005f8c <_printf_i+0x1f0>
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f043 0320 	orr.w	r3, r3, #32
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	4832      	ldr	r0, [pc, #200]	@ (8005fd4 <_printf_i+0x238>)
 8005f0a:	2778      	movs	r7, #120	@ 0x78
 8005f0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	6831      	ldr	r1, [r6, #0]
 8005f14:	061f      	lsls	r7, r3, #24
 8005f16:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f1a:	d402      	bmi.n	8005f22 <_printf_i+0x186>
 8005f1c:	065f      	lsls	r7, r3, #25
 8005f1e:	bf48      	it	mi
 8005f20:	b2ad      	uxthmi	r5, r5
 8005f22:	6031      	str	r1, [r6, #0]
 8005f24:	07d9      	lsls	r1, r3, #31
 8005f26:	bf44      	itt	mi
 8005f28:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2c:	6023      	strmi	r3, [r4, #0]
 8005f2e:	b11d      	cbz	r5, 8005f38 <_printf_i+0x19c>
 8005f30:	2310      	movs	r3, #16
 8005f32:	e7ad      	b.n	8005e90 <_printf_i+0xf4>
 8005f34:	4826      	ldr	r0, [pc, #152]	@ (8005fd0 <_printf_i+0x234>)
 8005f36:	e7e9      	b.n	8005f0c <_printf_i+0x170>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	e7f6      	b.n	8005f30 <_printf_i+0x194>
 8005f42:	4616      	mov	r6, r2
 8005f44:	e7bd      	b.n	8005ec2 <_printf_i+0x126>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	6961      	ldr	r1, [r4, #20]
 8005f4c:	1d18      	adds	r0, r3, #4
 8005f4e:	6030      	str	r0, [r6, #0]
 8005f50:	062e      	lsls	r6, r5, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	d501      	bpl.n	8005f5a <_printf_i+0x1be>
 8005f56:	6019      	str	r1, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <_printf_i+0x1c4>
 8005f5a:	0668      	lsls	r0, r5, #25
 8005f5c:	d5fb      	bpl.n	8005f56 <_printf_i+0x1ba>
 8005f5e:	8019      	strh	r1, [r3, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	4616      	mov	r6, r2
 8005f66:	e7bc      	b.n	8005ee2 <_printf_i+0x146>
 8005f68:	6833      	ldr	r3, [r6, #0]
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	6032      	str	r2, [r6, #0]
 8005f6e:	681e      	ldr	r6, [r3, #0]
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	2100      	movs	r1, #0
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7fa f933 	bl	80001e0 <memchr>
 8005f7a:	b108      	cbz	r0, 8005f80 <_printf_i+0x1e4>
 8005f7c:	1b80      	subs	r0, r0, r6
 8005f7e:	6060      	str	r0, [r4, #4]
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f8a:	e7aa      	b.n	8005ee2 <_printf_i+0x146>
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	4632      	mov	r2, r6
 8005f90:	4649      	mov	r1, r9
 8005f92:	4640      	mov	r0, r8
 8005f94:	47d0      	blx	sl
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0ad      	beq.n	8005ef6 <_printf_i+0x15a>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	079b      	lsls	r3, r3, #30
 8005f9e:	d413      	bmi.n	8005fc8 <_printf_i+0x22c>
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	bfb8      	it	lt
 8005fa8:	4618      	movlt	r0, r3
 8005faa:	e7a6      	b.n	8005efa <_printf_i+0x15e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	47d0      	blx	sl
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d09d      	beq.n	8005ef6 <_printf_i+0x15a>
 8005fba:	3501      	adds	r5, #1
 8005fbc:	68e3      	ldr	r3, [r4, #12]
 8005fbe:	9903      	ldr	r1, [sp, #12]
 8005fc0:	1a5b      	subs	r3, r3, r1
 8005fc2:	42ab      	cmp	r3, r5
 8005fc4:	dcf2      	bgt.n	8005fac <_printf_i+0x210>
 8005fc6:	e7eb      	b.n	8005fa0 <_printf_i+0x204>
 8005fc8:	2500      	movs	r5, #0
 8005fca:	f104 0619 	add.w	r6, r4, #25
 8005fce:	e7f5      	b.n	8005fbc <_printf_i+0x220>
 8005fd0:	08006371 	.word	0x08006371
 8005fd4:	08006382 	.word	0x08006382

08005fd8 <memmove>:
 8005fd8:	4288      	cmp	r0, r1
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	eb01 0402 	add.w	r4, r1, r2
 8005fe0:	d902      	bls.n	8005fe8 <memmove+0x10>
 8005fe2:	4284      	cmp	r4, r0
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	d807      	bhi.n	8005ff8 <memmove+0x20>
 8005fe8:	1e43      	subs	r3, r0, #1
 8005fea:	42a1      	cmp	r1, r4
 8005fec:	d008      	beq.n	8006000 <memmove+0x28>
 8005fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ff6:	e7f8      	b.n	8005fea <memmove+0x12>
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	428a      	cmp	r2, r1
 8005ffe:	d100      	bne.n	8006002 <memmove+0x2a>
 8006000:	bd10      	pop	{r4, pc}
 8006002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800600a:	e7f7      	b.n	8005ffc <memmove+0x24>

0800600c <_sbrk_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d06      	ldr	r5, [pc, #24]	@ (8006028 <_sbrk_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fa fdfe 	bl	8000c18 <_sbrk>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_sbrk_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_sbrk_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	200003b8 	.word	0x200003b8

0800602c <memcpy>:
 800602c:	440a      	add	r2, r1
 800602e:	4291      	cmp	r1, r2
 8006030:	f100 33ff 	add.w	r3, r0, #4294967295
 8006034:	d100      	bne.n	8006038 <memcpy+0xc>
 8006036:	4770      	bx	lr
 8006038:	b510      	push	{r4, lr}
 800603a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006042:	4291      	cmp	r1, r2
 8006044:	d1f9      	bne.n	800603a <memcpy+0xe>
 8006046:	bd10      	pop	{r4, pc}

08006048 <_realloc_r>:
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604c:	4607      	mov	r7, r0
 800604e:	4614      	mov	r4, r2
 8006050:	460d      	mov	r5, r1
 8006052:	b921      	cbnz	r1, 800605e <_realloc_r+0x16>
 8006054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006058:	4611      	mov	r1, r2
 800605a:	f7ff bc4d 	b.w	80058f8 <_malloc_r>
 800605e:	b92a      	cbnz	r2, 800606c <_realloc_r+0x24>
 8006060:	f7ff fbde 	bl	8005820 <_free_r>
 8006064:	4625      	mov	r5, r4
 8006066:	4628      	mov	r0, r5
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	f000 f81a 	bl	80060a4 <_malloc_usable_size_r>
 8006070:	4284      	cmp	r4, r0
 8006072:	4606      	mov	r6, r0
 8006074:	d802      	bhi.n	800607c <_realloc_r+0x34>
 8006076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800607a:	d8f4      	bhi.n	8006066 <_realloc_r+0x1e>
 800607c:	4621      	mov	r1, r4
 800607e:	4638      	mov	r0, r7
 8006080:	f7ff fc3a 	bl	80058f8 <_malloc_r>
 8006084:	4680      	mov	r8, r0
 8006086:	b908      	cbnz	r0, 800608c <_realloc_r+0x44>
 8006088:	4645      	mov	r5, r8
 800608a:	e7ec      	b.n	8006066 <_realloc_r+0x1e>
 800608c:	42b4      	cmp	r4, r6
 800608e:	4622      	mov	r2, r4
 8006090:	4629      	mov	r1, r5
 8006092:	bf28      	it	cs
 8006094:	4632      	movcs	r2, r6
 8006096:	f7ff ffc9 	bl	800602c <memcpy>
 800609a:	4629      	mov	r1, r5
 800609c:	4638      	mov	r0, r7
 800609e:	f7ff fbbf 	bl	8005820 <_free_r>
 80060a2:	e7f1      	b.n	8006088 <_realloc_r+0x40>

080060a4 <_malloc_usable_size_r>:
 80060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a8:	1f18      	subs	r0, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bfbc      	itt	lt
 80060ae:	580b      	ldrlt	r3, [r1, r0]
 80060b0:	18c0      	addlt	r0, r0, r3
 80060b2:	4770      	bx	lr

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
