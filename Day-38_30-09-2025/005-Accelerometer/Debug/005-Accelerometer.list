
005-Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f6c  08003f6c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f74  08003f74  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f78  08003f78  00004f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000210  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009509  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e4  00000000  00000000  0000e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0000fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006da  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211a7  00000000  00000000  00010d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a356  00000000  00000000  00031f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6270  00000000  00000000  0003c257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001024c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bbc  00000000  00000000  0010250c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ef4 	.word	0x08003ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003ef4 	.word	0x08003ef4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <accel_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void accel_write(uint8_t reg, uint8_t val) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, val};
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	733b      	strb	r3, [r7, #12]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ACCEL_CS_PORT, ACCEL_CS_PIN, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4809      	ldr	r0, [pc, #36]	@ (80005e0 <accel_write+0x44>)
 80005ba:	f000 fedd 	bl	8001378 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2202      	movs	r2, #2
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <accel_write+0x48>)
 80005ca:	f001 fc10 	bl	8001dee <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ACCEL_CS_PORT, ACCEL_CS_PIN, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <accel_write+0x44>)
 80005d4:	f000 fed0 	bl	8001378 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	20000084 	.word	0x20000084

080005e8 <accel_read>:

void accel_read(uint8_t reg, uint8_t *buf, uint16_t len) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80; // read
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	71fb      	strb	r3, [r7, #7]
    if (len > 1) reg |= 0x40; // auto-increment
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d904      	bls.n	8000612 <accel_read+0x2a>
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800060e:	b2db      	uxtb	r3, r3
 8000610:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ACCEL_CS_PORT, ACCEL_CS_PIN, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2108      	movs	r1, #8
 8000616:	480d      	ldr	r0, [pc, #52]	@ (800064c <accel_read+0x64>)
 8000618:	f000 feae 	bl	8001378 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 800061c:	1df9      	adds	r1, r7, #7
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2201      	movs	r2, #1
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <accel_read+0x68>)
 8000626:	f001 fbe2 	bl	8001dee <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buf, len, HAL_MAX_DELAY);
 800062a:	88ba      	ldrh	r2, [r7, #4]
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	6839      	ldr	r1, [r7, #0]
 8000632:	4807      	ldr	r0, [pc, #28]	@ (8000650 <accel_read+0x68>)
 8000634:	f001 fd1f 	bl	8002076 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ACCEL_CS_PORT, ACCEL_CS_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <accel_read+0x64>)
 800063e:	f000 fe9b 	bl	8001378 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	20000084 	.word	0x20000084

08000654 <accel_init>:

void accel_init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    accel_write(0x20, 0x67); // CTRL_REG4: 100Hz, all axes enabled
 8000658:	2167      	movs	r1, #103	@ 0x67
 800065a:	2020      	movs	r0, #32
 800065c:	f7ff ff9e 	bl	800059c <accel_write>
    accel_write(0x24, 0x00); // CTRL_REG5: ±2g
 8000660:	2100      	movs	r1, #0
 8000662:	2024      	movs	r0, #36	@ 0x24
 8000664:	f7ff ff9a 	bl	800059c <accel_write>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <__io_putchar>:

// Redirect printf to UART
int __io_putchar(int ch) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4803      	ldr	r0, [pc, #12]	@ (800068c <__io_putchar+0x20>)
 800067e:	f002 f94f 	bl	8002920 <HAL_UART_Transmit>
    return ch;
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000dc 	.word	0x200000dc

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fb57 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f857 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f91f 	bl	80008e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006a2:	f000 f8bd 	bl	8000820 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006a6:	f000 f8f1 	bl	800088c <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  accel_init();
 80006aa:	f7ff ffd3 	bl	8000654 <accel_init>

  uint8_t data[6];
  while (1)
  {

	  accel_read(0x28, data, 6);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2206      	movs	r2, #6
 80006b2:	4619      	mov	r1, r3
 80006b4:	2028      	movs	r0, #40	@ 0x28
 80006b6:	f7ff ff97 	bl	80005e8 <accel_read>

	  int16_t x = (int16_t)(data[1] << 8 | data[0]);
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	793b      	ldrb	r3, [r7, #4]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81fb      	strh	r3, [r7, #14]
	  int16_t y = (int16_t)(data[3] << 8 | data[2]);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	81bb      	strh	r3, [r7, #12]
	  int16_t z = (int16_t)(data[5] << 8 | data[4]);
 80006da:	7a7b      	ldrb	r3, [r7, #9]
 80006dc:	b21b      	sxth	r3, r3
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7a3b      	ldrb	r3, [r7, #8]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	817b      	strh	r3, [r7, #10]

	  printf("X=%d, Y=%d, Z=%d\r\n", x, y, z);
 80006ea:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80006ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80006f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006f6:	4813      	ldr	r0, [pc, #76]	@ (8000744 <main+0xb4>)
 80006f8:	f002 fd90 	bl	800321c <iprintf>

	  if (abs(x) > CRASH_THRESHOLD || abs(y) > CRASH_THRESHOLD) {
 80006fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000700:	2b00      	cmp	r3, #0
 8000702:	bfb8      	it	lt
 8000704:	425b      	neglt	r3, r3
 8000706:	b29b      	uxth	r3, r3
 8000708:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800070c:	d808      	bhi.n	8000720 <main+0x90>
 800070e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	bfb8      	it	lt
 8000716:	425b      	neglt	r3, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800071e:	d906      	bls.n	800072e <main+0x9e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // turn LED (or buzzer) on
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000726:	4808      	ldr	r0, [pc, #32]	@ (8000748 <main+0xb8>)
 8000728:	f000 fe26 	bl	8001378 <HAL_GPIO_WritePin>
 800072c:	e005      	b.n	800073a <main+0xaa>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // turn LED off
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <main+0xb8>)
 8000736:	f000 fe1f 	bl	8001378 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(100);
 800073a:	2064      	movs	r0, #100	@ 0x64
 800073c:	f000 fb76 	bl	8000e2c <HAL_Delay>
  {
 8000740:	e7b5      	b.n	80006ae <main+0x1e>
 8000742:	bf00      	nop
 8000744:	08003f0c 	.word	0x08003f0c
 8000748:	40020c00 	.word	0x40020c00

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fdb3 	bl	80032c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c0:	23a8      	movs	r3, #168	@ 0xa8
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c8:	2307      	movs	r3, #7
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fdeb 	bl	80013ac <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f8e8 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2105      	movs	r1, #5
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f84c 	bl	800189c <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f8d1 	bl	80009b0 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <MX_SPI1_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000850:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000854:	2218      	movs	r2, #24
 8000856:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_SPI1_Init+0x64>)
 800086c:	220a      	movs	r2, #10
 800086e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_SPI1_Init+0x64>)
 8000872:	f001 fa33 	bl	8001cdc <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800087c:	f000 f898 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000084 	.word	0x20000084
 8000888:	40013000 	.word	0x40013000

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f001 ffdc 	bl	8002880 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f86f 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000dc 	.word	0x200000dc
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a29      	ldr	r2, [pc, #164]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_GPIO_Init+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	4816      	ldr	r0, [pc, #88]	@ (80009a8 <MX_GPIO_Init+0xc8>)
 8000950:	f000 fd12 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800095a:	4814      	ldr	r0, [pc, #80]	@ (80009ac <MX_GPIO_Init+0xcc>)
 800095c:	f000 fd0c 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000960:	2308      	movs	r3, #8
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_GPIO_Init+0xc8>)
 8000978:	f000 fb62 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800097c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_GPIO_Init+0xcc>)
 8000996:	f000 fb53 	bl	8001040 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <Error_Handler+0x8>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 faec 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_SPI_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a66:	23e0      	movs	r3, #224	@ 0xe0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a76:	2305      	movs	r3, #5
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <HAL_SPI_MspInit+0x8c>)
 8000a82:	f000 fadd 	bl	8001040 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40013000 	.word	0x40013000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a17      	ldr	r2, [pc, #92]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <HAL_UART_MspInit+0x8c>)
 8000b12:	f000 fa95 	bl	8001040 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f933 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e00a      	b.n	8000bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	60ba      	str	r2, [r7, #8]
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dbf0      	blt.n	8000b9c <_read+0x12>
  }

  return len;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e009      	b.n	8000bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	60ba      	str	r2, [r7, #8]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd44 	bl	800066c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dbf1      	blt.n	8000bd6 <_write+0x12>
  }
  return len;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_close>:

int _close(int file)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c24:	605a      	str	r2, [r3, #4]
  return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_isatty>:

int _isatty(int file)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f002 fb66 	bl	8003364 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000124 	.word	0x20000124
 8000ccc:	20000278 	.word	0x20000278

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf8:	f7ff ffea 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d22:	f002 fb25 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fcb3 	bl	8000690 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d38:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 8000d3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d40:	20000278 	.word	0x20000278

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f931 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe1e 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f93b 	bl	8001026 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f911 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000128 	.word	0x20000128

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000128 	.word	0x20000128

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b60      	ldr	r3, [pc, #384]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a5f      	ldr	r2, [pc, #380]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <HAL_GPIO_Init+0x310>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <HAL_GPIO_Init+0x314>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	@ (8001358 <HAL_GPIO_Init+0x318>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	@ (800135c <HAL_GPIO_Init+0x31c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	@ (8001360 <HAL_GPIO_Init+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <HAL_GPIO_Init+0x324>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	@ (8001368 <HAL_GPIO_Init+0x328>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_GPIO_Init+0x310>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a32      	ldr	r2, [pc, #200]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e267      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d075      	beq.n	80014b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ca:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b82      	ldr	r3, [pc, #520]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b7e      	ldr	r3, [pc, #504]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d05b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x108>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e242      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x74>
 8001412:	4b76      	ldr	r3, [pc, #472]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a75      	ldr	r2, [pc, #468]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b70      	ldr	r3, [pc, #448]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6f      	ldr	r2, [pc, #444]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6d      	ldr	r3, [pc, #436]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6c      	ldr	r2, [pc, #432]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001444:	4b69      	ldr	r3, [pc, #420]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a68      	ldr	r2, [pc, #416]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b66      	ldr	r3, [pc, #408]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a65      	ldr	r2, [pc, #404]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcd6 	bl	8000e14 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcd2 	bl	8000e14 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e207      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fcc2 	bl	8000e14 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fcbe 	bl	8000e14 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1f3      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b51      	ldr	r3, [pc, #324]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0xe8>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014c2:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b44      	ldr	r3, [pc, #272]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c7      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4937      	ldr	r1, [pc, #220]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <HAL_RCC_OscConfig+0x244>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fc77 	bl	8000e14 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc73 	bl	8000e14 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a8      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4925      	ldr	r1, [pc, #148]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <HAL_RCC_OscConfig+0x244>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fc56 	bl	8000e14 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fc52 	bl	8000e14 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e187      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d036      	beq.n	8001604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fc36 	bl	8000e14 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc32 	bl	8000e14 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e167      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x200>
 80015ca:	e01b      	b.n	8001604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fc1f 	bl	8000e14 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e00e      	b.n	80015f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fc1b 	bl	8000e14 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d907      	bls.n	80015f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e150      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b88      	ldr	r3, [pc, #544]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ea      	bne.n	80015da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8097 	beq.w	8001740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b81      	ldr	r3, [pc, #516]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b7d      	ldr	r3, [pc, #500]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a7c      	ldr	r2, [pc, #496]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b7a      	ldr	r3, [pc, #488]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b77      	ldr	r3, [pc, #476]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b74      	ldr	r3, [pc, #464]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a73      	ldr	r2, [pc, #460]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fbdb 	bl	8000e14 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fbd7 	bl	8000e14 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e10c      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x2ea>
 8001688:	4b64      	ldr	r3, [pc, #400]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168c:	4a63      	ldr	r2, [pc, #396]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	@ 0x70
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x30c>
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a2:	4a5e      	ldr	r2, [pc, #376]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016aa:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	4a5b      	ldr	r2, [pc, #364]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 80016b8:	4b58      	ldr	r3, [pc, #352]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a57      	ldr	r2, [pc, #348]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	4b55      	ldr	r3, [pc, #340]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c8:	4a54      	ldr	r2, [pc, #336]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d015      	beq.n	8001704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fb9c 	bl	8000e14 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb98 	bl	8000e14 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0cb      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	4b49      	ldr	r3, [pc, #292]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ee      	beq.n	80016e0 <HAL_RCC_OscConfig+0x334>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fb86 	bl	8000e14 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fb82 	bl	8000e14 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0b5      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ee      	bne.n	800170c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a38      	ldr	r2, [pc, #224]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80a1 	beq.w	800188c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d05c      	beq.n	8001810 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d141      	bne.n	80017e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb56 	bl	8000e14 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fb52 	bl	8000e14 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e087      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	491b      	ldr	r1, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb2b 	bl	8000e14 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fb27 	bl	8000e14 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e05c      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x416>
 80017e0:	e054      	b.n	800188c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb14 	bl	8000e14 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb10 	bl	8000e14 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e045      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
 800180e:	e03d      	b.n	800188c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e038      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000
 8001824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x4ec>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d028      	beq.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d121      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800185e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001860:	4293      	cmp	r3, r2
 8001862:	d111      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0cc      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d90c      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b65      	ldr	r3, [pc, #404]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d044      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d119      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	2b03      	cmp	r3, #3
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e067      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4934      	ldr	r1, [pc, #208]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff fa42 	bl	8000e14 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff fa3e 	bl	8000e14 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d20c      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f9a2 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003f20 	.word	0x08003f20
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a6c:	b094      	sub	sp, #80	@ 0x50
 8001a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a80:	4b79      	ldr	r3, [pc, #484]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	f200 80e1 	bhi.w	8001c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9a:	e0db      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b73      	ldr	r3, [pc, #460]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa0:	e0db      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa6:	e0d8      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0159      	lsls	r1, r3, #5
 8001ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aec:	0150      	lsls	r0, r2, #5
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4621      	mov	r1, r4
 8001af4:	1a51      	subs	r1, r2, r1
 8001af6:	6139      	str	r1, [r7, #16]
 8001af8:	4629      	mov	r1, r5
 8001afa:	eb63 0301 	sbc.w	r3, r3, r1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	018b      	lsls	r3, r1, #6
 8001b10:	4651      	mov	r1, sl
 8001b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b16:	4651      	mov	r1, sl
 8001b18:	018a      	lsls	r2, r1, #6
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b20:	4659      	mov	r1, fp
 8001b22:	eb63 0901 	sbc.w	r9, r3, r1
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3a:	4690      	mov	r8, r2
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	4623      	mov	r3, r4
 8001b40:	eb18 0303 	adds.w	r3, r8, r3
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	462b      	mov	r3, r5
 8001b48:	eb49 0303 	adc.w	r3, r9, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	024b      	lsls	r3, r1, #9
 8001b5e:	4621      	mov	r1, r4
 8001b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b64:	4621      	mov	r1, r4
 8001b66:	024a      	lsls	r2, r1, #9
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6e:	2200      	movs	r2, #0
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b78:	f7fe fb7a 	bl	8000270 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b84:	e058      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b38      	ldr	r3, [pc, #224]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4611      	mov	r1, r2
 8001b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	0159      	lsls	r1, r3, #5
 8001bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb2:	0150      	lsls	r0, r2, #5
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4641      	mov	r1, r8
 8001bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	00eb      	lsls	r3, r5, #3
 8001bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bee:	00e2      	lsls	r2, r4, #3
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	18e3      	adds	r3, r4, r3
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	eb45 0303 	adc.w	r3, r5, r3
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c0e:	4629      	mov	r1, r5
 8001c10:	028b      	lsls	r3, r1, #10
 8001c12:	4621      	mov	r1, r4
 8001c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c18:	4621      	mov	r1, r4
 8001c1a:	028a      	lsls	r2, r1, #10
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c22:	2200      	movs	r2, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	61fa      	str	r2, [r7, #28]
 8001c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c2c:	f7fe fb20 	bl	8000270 <__aeabi_uldivmod>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4613      	mov	r3, r2
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	3301      	adds	r3, #1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c52:	e002      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3750      	adds	r7, #80	@ 0x50
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	@ (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08003f30 	.word	0x08003f30

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb8:	f7ff ffdc 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	@ (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08003f30 	.word	0x08003f30

08001cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e07b      	b.n	8001de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cfe:	d009      	beq.n	8001d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
 8001d06:	e005      	b.n	8001d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fe6c 	bl	8000a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	ea42 0103 	orr.w	r1, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0104 	and.w	r1, r3, #4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	f003 0210 	and.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dfe:	f7ff f809 	bl	8000e14 <HAL_GetTick>
 8001e02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d001      	beq.n	8001e18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	e12a      	b.n	800206e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_SPI_Transmit+0x36>
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e122      	b.n	800206e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_SPI_Transmit+0x48>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e11b      	b.n	800206e <HAL_SPI_Transmit+0x280>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	88fa      	ldrh	r2, [r7, #6]
 8001e56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e84:	d10f      	bne.n	8001ea6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ea4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b40      	cmp	r3, #64	@ 0x40
 8001eb2:	d007      	beq.n	8001ec4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ecc:	d152      	bne.n	8001f74 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_SPI_Transmit+0xee>
 8001ed6:	8b7b      	ldrh	r3, [r7, #26]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d145      	bne.n	8001f68 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f00:	e032      	b.n	8001f68 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d112      	bne.n	8001f36 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f34:	e018      	b.n	8001f68 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f36:	f7fe ff6d 	bl	8000e14 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d803      	bhi.n	8001f4e <HAL_SPI_Transmit+0x160>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d102      	bne.n	8001f54 <HAL_SPI_Transmit+0x166>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e082      	b.n	800206e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1c7      	bne.n	8001f02 <HAL_SPI_Transmit+0x114>
 8001f72:	e053      	b.n	800201c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_SPI_Transmit+0x194>
 8001f7c:	8b7b      	ldrh	r3, [r7, #26]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d147      	bne.n	8002012 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fa8:	e033      	b.n	8002012 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d113      	bne.n	8001fe0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001fde:	e018      	b.n	8002012 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe0:	f7fe ff18 	bl	8000e14 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d803      	bhi.n	8001ff8 <HAL_SPI_Transmit+0x20a>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d102      	bne.n	8001ffe <HAL_SPI_Transmit+0x210>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e02d      	b.n	800206e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1c6      	bne.n	8001faa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fbd9 	bl	80027d8 <SPI_EndRxTxTransaction>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800206c:	2300      	movs	r3, #0
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	e104      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_SPI_Receive+0x2c>
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0fc      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ae:	d112      	bne.n	80020d6 <HAL_SPI_Receive+0x60>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10e      	bne.n	80020d6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2204      	movs	r2, #4
 80020bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f8eb 	bl	80022a8 <HAL_SPI_TransmitReceive>
 80020d2:	4603      	mov	r3, r0
 80020d4:	e0e4      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020d6:	f7fe fe9d 	bl	8000e14 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_SPI_Receive+0x74>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0da      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2204      	movs	r2, #4
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002138:	d10f      	bne.n	800215a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002164:	2b40      	cmp	r3, #64	@ 0x40
 8002166:	d007      	beq.n	8002178 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d170      	bne.n	8002262 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002180:	e035      	b.n	80021ee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d115      	bne.n	80021bc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f103 020c 	add.w	r2, r3, #12
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	7812      	ldrb	r2, [r2, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021ba:	e018      	b.n	80021ee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021bc:	f7fe fe2a 	bl	8000e14 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d803      	bhi.n	80021d4 <HAL_SPI_Receive+0x15e>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d102      	bne.n	80021da <HAL_SPI_Receive+0x164>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e058      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1c4      	bne.n	8002182 <HAL_SPI_Receive+0x10c>
 80021f8:	e038      	b.n	800226c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d113      	bne.n	8002230 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	b292      	uxth	r2, r2
 8002214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	1c9a      	adds	r2, r3, #2
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800222e:	e018      	b.n	8002262 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002230:	f7fe fdf0 	bl	8000e14 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d803      	bhi.n	8002248 <HAL_SPI_Receive+0x1d2>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d102      	bne.n	800224e <HAL_SPI_Receive+0x1d8>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e01e      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1c6      	bne.n	80021fa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fa4b 	bl	800270c <SPI_EndRxTransaction>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800229e:	2300      	movs	r3, #0
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ba:	f7fe fdab 	bl	8000e14 <HAL_GetTick>
 80022be:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022c6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00c      	beq.n	80022f2 <HAL_SPI_TransmitReceive+0x4a>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022de:	d106      	bne.n	80022ee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_TransmitReceive+0x46>
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d001      	beq.n	80022f2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	e17f      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x5c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x5c>
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e174      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x6e>
 8002312:	2302      	movs	r3, #2
 8002314:	e16d      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b04      	cmp	r3, #4
 8002328:	d003      	beq.n	8002332 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	887a      	ldrh	r2, [r7, #2]
 8002342:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d007      	beq.n	8002386 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800238e:	d17e      	bne.n	800248e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_TransmitReceive+0xf6>
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d16c      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	1c9a      	adds	r2, r3, #2
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c2:	e059      	b.n	8002478 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_SPI_TransmitReceive+0x162>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_SPI_TransmitReceive+0x162>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d113      	bne.n	800240a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d119      	bne.n	800244c <HAL_SPI_TransmitReceive+0x1a4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	b292      	uxth	r2, r2
 800242e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800244c:	f7fe fce2 	bl	8000e14 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002458:	429a      	cmp	r2, r3
 800245a:	d80d      	bhi.n	8002478 <HAL_SPI_TransmitReceive+0x1d0>
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d009      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0bc      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1a0      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x11c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d19b      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x11c>
 800248c:	e082      	b.n	8002594 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_TransmitReceive+0x1f4>
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d171      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	330c      	adds	r3, #12
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c2:	e05d      	b.n	8002580 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d11c      	bne.n	800250c <HAL_SPI_TransmitReceive+0x264>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_SPI_TransmitReceive+0x264>
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d114      	bne.n	800250c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d119      	bne.n	800254e <HAL_SPI_TransmitReceive+0x2a6>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800254a:	2301      	movs	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800254e:	f7fe fc61 	bl	8000e14 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255a:	429a      	cmp	r2, r3
 800255c:	d803      	bhi.n	8002566 <HAL_SPI_TransmitReceive+0x2be>
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <HAL_SPI_TransmitReceive+0x2c4>
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e038      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d19c      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x21c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d197      	bne.n	80024c4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f91d 	bl	80027d8 <SPI_EndRxTxTransaction>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01d      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3728      	adds	r7, #40	@ 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800260c:	f7fe fc02 	bl	8000e14 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800261c:	f7fe fbfa 	bl	8000e14 <HAL_GetTick>
 8002620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002622:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	0d1b      	lsrs	r3, r3, #20
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002632:	e055      	b.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263a:	d051      	beq.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800263c:	f7fe fbea 	bl	8000e14 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	d902      	bls.n	8002652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13d      	bne.n	80026ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800266a:	d111      	bne.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002674:	d004      	beq.n	8002680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267e:	d107      	bne.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800268e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002698:	d10f      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e018      	b.n	8002700 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e002      	b.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3b01      	subs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4013      	ands	r3, r2
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d19a      	bne.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000000 	.word	0x20000000

0800270c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002720:	d111      	bne.n	8002746 <SPI_EndRxTransaction+0x3a>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800272a:	d004      	beq.n	8002736 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002734:	d107      	bne.n	8002746 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800274e:	d12a      	bne.n	80027a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002758:	d012      	beq.n	8002780 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff ff49 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02d      	beq.n	80027cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e026      	b.n	80027ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	2101      	movs	r1, #1
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ff36 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01a      	beq.n	80027cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e013      	b.n	80027ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2101      	movs	r1, #1
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff ff23 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e000      	b.n	80027ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2201      	movs	r2, #1
 80027ec:	2102      	movs	r1, #2
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff ff04 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e032      	b.n	8002870 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <SPI_EndRxTxTransaction+0xa0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <SPI_EndRxTxTransaction+0xa4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0d5b      	lsrs	r3, r3, #21
 8002816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002828:	d112      	bne.n	8002850 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	@ 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fee1 	bl	80025fc <SPI_WaitFlagStateUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e00f      	b.n	8002870 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3b01      	subs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d0f2      	beq.n	8002850 <SPI_EndRxTxTransaction+0x78>
 800286a:	e000      	b.n	800286e <SPI_EndRxTxTransaction+0x96>
        break;
 800286c:	bf00      	nop
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000000 	.word	0x20000000
 800287c:	165e9f81 	.word	0x165e9f81

08002880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e042      	b.n	8002918 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe f8f8 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f973 	bl	8002bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d175      	bne.n	8002a2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_UART_Transmit+0x2c>
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e06e      	b.n	8002a2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2221      	movs	r2, #33	@ 0x21
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295e:	f7fe fa59 	bl	8000e14 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002978:	d108      	bne.n	800298c <HAL_UART_Transmit+0x6c>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e003      	b.n	8002994 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002994:	e02e      	b.n	80029f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f848 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e03a      	b.n	8002a2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3302      	adds	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e007      	b.n	80029e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3301      	adds	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1cb      	bne.n	8002996 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2140      	movs	r1, #64	@ 0x40
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f814 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a46:	e03b      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d037      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7fe f9e0 	bl	8000e14 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e03a      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b80      	cmp	r3, #128	@ 0x80
 8002a7c:	d020      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b40      	cmp	r3, #64	@ 0x40
 8002a82:	d01d      	beq.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d116      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f81d 	bl	8002ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00f      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d0b4      	beq.n	8002a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b095      	sub	sp, #84	@ 0x54
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b10:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e5      	bne.n	8002af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3314      	adds	r3, #20
 8002b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e5      	bne.n	8002b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 0310 	bic.w	r3, r3, #16
 8002b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b80:	61ba      	str	r2, [r7, #24]
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e5      	bne.n	8002b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ba2:	bf00      	nop
 8002ba4:	3754      	adds	r7, #84	@ 0x54
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b0c0      	sub	sp, #256	@ 0x100
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	ea40 0301 	orr.w	r3, r0, r1
 8002bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c08:	f021 010c 	bic.w	r1, r1, #12
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c16:	430b      	orrs	r3, r1
 8002c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2a:	6999      	ldr	r1, [r3, #24]
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	ea40 0301 	orr.w	r3, r0, r1
 8002c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8002e7c <UART_SetConfig+0x2cc>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d005      	beq.n	8002c50 <UART_SetConfig+0xa0>
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e80 <UART_SetConfig+0x2d0>)
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d104      	bne.n	8002c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7ff f830 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c58:	e003      	b.n	8002c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c5a:	f7ff f817 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8002c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c6c:	f040 810c 	bne.w	8002e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c92:	4621      	mov	r1, r4
 8002c94:	eb12 0801 	adds.w	r8, r2, r1
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb43 0901 	adc.w	r9, r3, r1
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	eb18 0303 	adds.w	r3, r8, r3
 8002cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	eb49 0303 	adc.w	r3, r9, r3
 8002cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cde:	460b      	mov	r3, r1
 8002ce0:	18db      	adds	r3, r3, r3
 8002ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	eb42 0303 	adc.w	r3, r2, r3
 8002cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002cf4:	f7fd fabc 	bl	8000270 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <UART_SetConfig+0x2d4>)
 8002cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	011c      	lsls	r4, r3, #4
 8002d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	1891      	adds	r1, r2, r2
 8002d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d20:	415b      	adcs	r3, r3
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d28:	4641      	mov	r1, r8
 8002d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb43 0b01 	adc.w	fp, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d48:	4692      	mov	sl, r2
 8002d4a:	469b      	mov	fp, r3
 8002d4c:	4643      	mov	r3, r8
 8002d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb4b 0303 	adc.w	r3, fp, r3
 8002d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d74:	460b      	mov	r3, r1
 8002d76:	18db      	adds	r3, r3, r3
 8002d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d8a:	f7fd fa71 	bl	8000270 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <UART_SetConfig+0x2d4>)
 8002d96:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2264      	movs	r2, #100	@ 0x64
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	1acb      	subs	r3, r1, r3
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <UART_SetConfig+0x2d4>)
 8002dac:	fba3 2302 	umull	r2, r3, r3, r2
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002db8:	441c      	add	r4, r3
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1891      	adds	r1, r2, r2
 8002dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dd4:	415b      	adcs	r3, r3
 8002dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ddc:	4641      	mov	r1, r8
 8002dde:	1851      	adds	r1, r2, r1
 8002de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002de2:	4649      	mov	r1, r9
 8002de4:	414b      	adcs	r3, r1
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002df4:	4659      	mov	r1, fp
 8002df6:	00cb      	lsls	r3, r1, #3
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfe:	4651      	mov	r1, sl
 8002e00:	00ca      	lsls	r2, r1, #3
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	4642      	mov	r2, r8
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e10:	464b      	mov	r3, r9
 8002e12:	460a      	mov	r2, r1
 8002e14:	eb42 0303 	adc.w	r3, r2, r3
 8002e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e30:	460b      	mov	r3, r1
 8002e32:	18db      	adds	r3, r3, r3
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e36:	4613      	mov	r3, r2
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e46:	f7fd fa13 	bl	8000270 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <UART_SetConfig+0x2d4>)
 8002e50:	fba3 1302 	umull	r1, r3, r3, r2
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	2164      	movs	r1, #100	@ 0x64
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	3332      	adds	r3, #50	@ 0x32
 8002e62:	4a08      	ldr	r2, [pc, #32]	@ (8002e84 <UART_SetConfig+0x2d4>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 0207 	and.w	r2, r3, #7
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4422      	add	r2, r4
 8002e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e78:	e106      	b.n	8003088 <UART_SetConfig+0x4d8>
 8002e7a:	bf00      	nop
 8002e7c:	40011000 	.word	0x40011000
 8002e80:	40011400 	.word	0x40011400
 8002e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e9a:	4642      	mov	r2, r8
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	1891      	adds	r1, r2, r2
 8002ea0:	6239      	str	r1, [r7, #32]
 8002ea2:	415b      	adcs	r3, r3
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eaa:	4641      	mov	r1, r8
 8002eac:	1854      	adds	r4, r2, r1
 8002eae:	4649      	mov	r1, r9
 8002eb0:	eb43 0501 	adc.w	r5, r3, r1
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	00eb      	lsls	r3, r5, #3
 8002ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec2:	00e2      	lsls	r2, r4, #3
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	4643      	mov	r3, r8
 8002eca:	18e3      	adds	r3, r4, r3
 8002ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	eb45 0303 	adc.w	r3, r5, r3
 8002ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	008b      	lsls	r3, r1, #2
 8002efa:	4621      	mov	r1, r4
 8002efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f00:	4621      	mov	r1, r4
 8002f02:	008a      	lsls	r2, r1, #2
 8002f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f08:	f7fd f9b2 	bl	8000270 <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4b60      	ldr	r3, [pc, #384]	@ (8003094 <UART_SetConfig+0x4e4>)
 8002f12:	fba3 2302 	umull	r2, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	011c      	lsls	r4, r3, #4
 8002f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	464b      	mov	r3, r9
 8002f30:	1891      	adds	r1, r2, r2
 8002f32:	61b9      	str	r1, [r7, #24]
 8002f34:	415b      	adcs	r3, r3
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	1851      	adds	r1, r2, r1
 8002f40:	6139      	str	r1, [r7, #16]
 8002f42:	4649      	mov	r1, r9
 8002f44:	414b      	adcs	r3, r1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f54:	4659      	mov	r1, fp
 8002f56:	00cb      	lsls	r3, r1, #3
 8002f58:	4651      	mov	r1, sl
 8002f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f5e:	4651      	mov	r1, sl
 8002f60:	00ca      	lsls	r2, r1, #3
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	4642      	mov	r2, r8
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f70:	464b      	mov	r3, r9
 8002f72:	460a      	mov	r2, r1
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f94:	4649      	mov	r1, r9
 8002f96:	008b      	lsls	r3, r1, #2
 8002f98:	4641      	mov	r1, r8
 8002f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	008a      	lsls	r2, r1, #2
 8002fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fa6:	f7fd f963 	bl	8000270 <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <UART_SetConfig+0x4e4>)
 8002fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2264      	movs	r2, #100	@ 0x64
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	1acb      	subs	r3, r1, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	@ 0x32
 8002fc4:	4a33      	ldr	r2, [pc, #204]	@ (8003094 <UART_SetConfig+0x4e4>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd0:	441c      	add	r4, r3
 8002fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	1851      	adds	r1, r2, r1
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	414b      	adcs	r3, r1
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003008:	4659      	mov	r1, fp
 800300a:	00cb      	lsls	r3, r1, #3
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003012:	4651      	mov	r1, sl
 8003014:	00ca      	lsls	r2, r1, #3
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	4603      	mov	r3, r0
 800301c:	4642      	mov	r2, r8
 800301e:	189b      	adds	r3, r3, r2
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003022:	464b      	mov	r3, r9
 8003024:	460a      	mov	r2, r1
 8003026:	eb42 0303 	adc.w	r3, r2, r3
 800302a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	663b      	str	r3, [r7, #96]	@ 0x60
 8003036:	667a      	str	r2, [r7, #100]	@ 0x64
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003044:	4649      	mov	r1, r9
 8003046:	008b      	lsls	r3, r1, #2
 8003048:	4641      	mov	r1, r8
 800304a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304e:	4641      	mov	r1, r8
 8003050:	008a      	lsls	r2, r1, #2
 8003052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003056:	f7fd f90b 	bl	8000270 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <UART_SetConfig+0x4e4>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	@ 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	3332      	adds	r3, #50	@ 0x32
 8003072:	4a08      	ldr	r2, [pc, #32]	@ (8003094 <UART_SetConfig+0x4e4>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4422      	add	r2, r4
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800308e:	46bd      	mov	sp, r7
 8003090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003094:	51eb851f 	.word	0x51eb851f

08003098 <std>:
 8003098:	2300      	movs	r3, #0
 800309a:	b510      	push	{r4, lr}
 800309c:	4604      	mov	r4, r0
 800309e:	e9c0 3300 	strd	r3, r3, [r0]
 80030a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030a6:	6083      	str	r3, [r0, #8]
 80030a8:	8181      	strh	r1, [r0, #12]
 80030aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80030ac:	81c2      	strh	r2, [r0, #14]
 80030ae:	6183      	str	r3, [r0, #24]
 80030b0:	4619      	mov	r1, r3
 80030b2:	2208      	movs	r2, #8
 80030b4:	305c      	adds	r0, #92	@ 0x5c
 80030b6:	f000 f906 	bl	80032c6 <memset>
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <std+0x58>)
 80030bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <std+0x5c>)
 80030c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <std+0x60>)
 80030c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <std+0x64>)
 80030c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80030ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <std+0x68>)
 80030cc:	6224      	str	r4, [r4, #32]
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d006      	beq.n	80030e0 <std+0x48>
 80030d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030d6:	4294      	cmp	r4, r2
 80030d8:	d002      	beq.n	80030e0 <std+0x48>
 80030da:	33d0      	adds	r3, #208	@ 0xd0
 80030dc:	429c      	cmp	r4, r3
 80030de:	d105      	bne.n	80030ec <std+0x54>
 80030e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e8:	f000 b966 	b.w	80033b8 <__retarget_lock_init_recursive>
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	bf00      	nop
 80030f0:	08003241 	.word	0x08003241
 80030f4:	08003263 	.word	0x08003263
 80030f8:	0800329b 	.word	0x0800329b
 80030fc:	080032bf 	.word	0x080032bf
 8003100:	2000012c 	.word	0x2000012c

08003104 <stdio_exit_handler>:
 8003104:	4a02      	ldr	r2, [pc, #8]	@ (8003110 <stdio_exit_handler+0xc>)
 8003106:	4903      	ldr	r1, [pc, #12]	@ (8003114 <stdio_exit_handler+0x10>)
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <stdio_exit_handler+0x14>)
 800310a:	f000 b869 	b.w	80031e0 <_fwalk_sglue>
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c
 8003114:	08003c55 	.word	0x08003c55
 8003118:	2000001c 	.word	0x2000001c

0800311c <cleanup_stdio>:
 800311c:	6841      	ldr	r1, [r0, #4]
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <cleanup_stdio+0x34>)
 8003120:	4299      	cmp	r1, r3
 8003122:	b510      	push	{r4, lr}
 8003124:	4604      	mov	r4, r0
 8003126:	d001      	beq.n	800312c <cleanup_stdio+0x10>
 8003128:	f000 fd94 	bl	8003c54 <_fflush_r>
 800312c:	68a1      	ldr	r1, [r4, #8]
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <cleanup_stdio+0x38>)
 8003130:	4299      	cmp	r1, r3
 8003132:	d002      	beq.n	800313a <cleanup_stdio+0x1e>
 8003134:	4620      	mov	r0, r4
 8003136:	f000 fd8d 	bl	8003c54 <_fflush_r>
 800313a:	68e1      	ldr	r1, [r4, #12]
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <cleanup_stdio+0x3c>)
 800313e:	4299      	cmp	r1, r3
 8003140:	d004      	beq.n	800314c <cleanup_stdio+0x30>
 8003142:	4620      	mov	r0, r4
 8003144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003148:	f000 bd84 	b.w	8003c54 <_fflush_r>
 800314c:	bd10      	pop	{r4, pc}
 800314e:	bf00      	nop
 8003150:	2000012c 	.word	0x2000012c
 8003154:	20000194 	.word	0x20000194
 8003158:	200001fc 	.word	0x200001fc

0800315c <global_stdio_init.part.0>:
 800315c:	b510      	push	{r4, lr}
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <global_stdio_init.part.0+0x30>)
 8003160:	4c0b      	ldr	r4, [pc, #44]	@ (8003190 <global_stdio_init.part.0+0x34>)
 8003162:	4a0c      	ldr	r2, [pc, #48]	@ (8003194 <global_stdio_init.part.0+0x38>)
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	4620      	mov	r0, r4
 8003168:	2200      	movs	r2, #0
 800316a:	2104      	movs	r1, #4
 800316c:	f7ff ff94 	bl	8003098 <std>
 8003170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003174:	2201      	movs	r2, #1
 8003176:	2109      	movs	r1, #9
 8003178:	f7ff ff8e 	bl	8003098 <std>
 800317c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003180:	2202      	movs	r2, #2
 8003182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003186:	2112      	movs	r1, #18
 8003188:	f7ff bf86 	b.w	8003098 <std>
 800318c:	20000264 	.word	0x20000264
 8003190:	2000012c 	.word	0x2000012c
 8003194:	08003105 	.word	0x08003105

08003198 <__sfp_lock_acquire>:
 8003198:	4801      	ldr	r0, [pc, #4]	@ (80031a0 <__sfp_lock_acquire+0x8>)
 800319a:	f000 b90e 	b.w	80033ba <__retarget_lock_acquire_recursive>
 800319e:	bf00      	nop
 80031a0:	2000026d 	.word	0x2000026d

080031a4 <__sfp_lock_release>:
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <__sfp_lock_release+0x8>)
 80031a6:	f000 b909 	b.w	80033bc <__retarget_lock_release_recursive>
 80031aa:	bf00      	nop
 80031ac:	2000026d 	.word	0x2000026d

080031b0 <__sinit>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	f7ff fff0 	bl	8003198 <__sfp_lock_acquire>
 80031b8:	6a23      	ldr	r3, [r4, #32]
 80031ba:	b11b      	cbz	r3, 80031c4 <__sinit+0x14>
 80031bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c0:	f7ff bff0 	b.w	80031a4 <__sfp_lock_release>
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <__sinit+0x28>)
 80031c6:	6223      	str	r3, [r4, #32]
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <__sinit+0x2c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f5      	bne.n	80031bc <__sinit+0xc>
 80031d0:	f7ff ffc4 	bl	800315c <global_stdio_init.part.0>
 80031d4:	e7f2      	b.n	80031bc <__sinit+0xc>
 80031d6:	bf00      	nop
 80031d8:	0800311d 	.word	0x0800311d
 80031dc:	20000264 	.word	0x20000264

080031e0 <_fwalk_sglue>:
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	4607      	mov	r7, r0
 80031e6:	4688      	mov	r8, r1
 80031e8:	4614      	mov	r4, r2
 80031ea:	2600      	movs	r6, #0
 80031ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031f0:	f1b9 0901 	subs.w	r9, r9, #1
 80031f4:	d505      	bpl.n	8003202 <_fwalk_sglue+0x22>
 80031f6:	6824      	ldr	r4, [r4, #0]
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	d1f7      	bne.n	80031ec <_fwalk_sglue+0xc>
 80031fc:	4630      	mov	r0, r6
 80031fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d907      	bls.n	8003218 <_fwalk_sglue+0x38>
 8003208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800320c:	3301      	adds	r3, #1
 800320e:	d003      	beq.n	8003218 <_fwalk_sglue+0x38>
 8003210:	4629      	mov	r1, r5
 8003212:	4638      	mov	r0, r7
 8003214:	47c0      	blx	r8
 8003216:	4306      	orrs	r6, r0
 8003218:	3568      	adds	r5, #104	@ 0x68
 800321a:	e7e9      	b.n	80031f0 <_fwalk_sglue+0x10>

0800321c <iprintf>:
 800321c:	b40f      	push	{r0, r1, r2, r3}
 800321e:	b507      	push	{r0, r1, r2, lr}
 8003220:	4906      	ldr	r1, [pc, #24]	@ (800323c <iprintf+0x20>)
 8003222:	ab04      	add	r3, sp, #16
 8003224:	6808      	ldr	r0, [r1, #0]
 8003226:	f853 2b04 	ldr.w	r2, [r3], #4
 800322a:	6881      	ldr	r1, [r0, #8]
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	f000 f9e9 	bl	8003604 <_vfiprintf_r>
 8003232:	b003      	add	sp, #12
 8003234:	f85d eb04 	ldr.w	lr, [sp], #4
 8003238:	b004      	add	sp, #16
 800323a:	4770      	bx	lr
 800323c:	20000018 	.word	0x20000018

08003240 <__sread>:
 8003240:	b510      	push	{r4, lr}
 8003242:	460c      	mov	r4, r1
 8003244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003248:	f000 f868 	bl	800331c <_read_r>
 800324c:	2800      	cmp	r0, #0
 800324e:	bfab      	itete	ge
 8003250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003252:	89a3      	ldrhlt	r3, [r4, #12]
 8003254:	181b      	addge	r3, r3, r0
 8003256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800325a:	bfac      	ite	ge
 800325c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800325e:	81a3      	strhlt	r3, [r4, #12]
 8003260:	bd10      	pop	{r4, pc}

08003262 <__swrite>:
 8003262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003266:	461f      	mov	r7, r3
 8003268:	898b      	ldrh	r3, [r1, #12]
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	4605      	mov	r5, r0
 800326e:	460c      	mov	r4, r1
 8003270:	4616      	mov	r6, r2
 8003272:	d505      	bpl.n	8003280 <__swrite+0x1e>
 8003274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003278:	2302      	movs	r3, #2
 800327a:	2200      	movs	r2, #0
 800327c:	f000 f83c 	bl	80032f8 <_lseek_r>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	4632      	mov	r2, r6
 800328e:	463b      	mov	r3, r7
 8003290:	4628      	mov	r0, r5
 8003292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003296:	f000 b853 	b.w	8003340 <_write_r>

0800329a <__sseek>:
 800329a:	b510      	push	{r4, lr}
 800329c:	460c      	mov	r4, r1
 800329e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a2:	f000 f829 	bl	80032f8 <_lseek_r>
 80032a6:	1c43      	adds	r3, r0, #1
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	bf15      	itete	ne
 80032ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032b6:	81a3      	strheq	r3, [r4, #12]
 80032b8:	bf18      	it	ne
 80032ba:	81a3      	strhne	r3, [r4, #12]
 80032bc:	bd10      	pop	{r4, pc}

080032be <__sclose>:
 80032be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c2:	f000 b809 	b.w	80032d8 <_close_r>

080032c6 <memset>:
 80032c6:	4402      	add	r2, r0
 80032c8:	4603      	mov	r3, r0
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d100      	bne.n	80032d0 <memset+0xa>
 80032ce:	4770      	bx	lr
 80032d0:	f803 1b01 	strb.w	r1, [r3], #1
 80032d4:	e7f9      	b.n	80032ca <memset+0x4>
	...

080032d8 <_close_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4d06      	ldr	r5, [pc, #24]	@ (80032f4 <_close_r+0x1c>)
 80032dc:	2300      	movs	r3, #0
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	f7fd fc8a 	bl	8000bfc <_close>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_close_r+0x1a>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_close_r+0x1a>
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000268 	.word	0x20000268

080032f8 <_lseek_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d07      	ldr	r5, [pc, #28]	@ (8003318 <_lseek_r+0x20>)
 80032fc:	4604      	mov	r4, r0
 80032fe:	4608      	mov	r0, r1
 8003300:	4611      	mov	r1, r2
 8003302:	2200      	movs	r2, #0
 8003304:	602a      	str	r2, [r5, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f7fd fc9f 	bl	8000c4a <_lseek>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d102      	bne.n	8003316 <_lseek_r+0x1e>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b103      	cbz	r3, 8003316 <_lseek_r+0x1e>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	20000268 	.word	0x20000268

0800331c <_read_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4d07      	ldr	r5, [pc, #28]	@ (800333c <_read_r+0x20>)
 8003320:	4604      	mov	r4, r0
 8003322:	4608      	mov	r0, r1
 8003324:	4611      	mov	r1, r2
 8003326:	2200      	movs	r2, #0
 8003328:	602a      	str	r2, [r5, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f7fd fc2d 	bl	8000b8a <_read>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_read_r+0x1e>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_read_r+0x1e>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000268 	.word	0x20000268

08003340 <_write_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	@ (8003360 <_write_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f7fd fc38 	bl	8000bc4 <_write>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_write_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_write_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000268 	.word	0x20000268

08003364 <__errno>:
 8003364:	4b01      	ldr	r3, [pc, #4]	@ (800336c <__errno+0x8>)
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000018 	.word	0x20000018

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4d0d      	ldr	r5, [pc, #52]	@ (80033a8 <__libc_init_array+0x38>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	@ (80033ac <__libc_init_array+0x3c>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	2600      	movs	r6, #0
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	4d0b      	ldr	r5, [pc, #44]	@ (80033b0 <__libc_init_array+0x40>)
 8003382:	4c0c      	ldr	r4, [pc, #48]	@ (80033b4 <__libc_init_array+0x44>)
 8003384:	f000 fdb6 	bl	8003ef4 <_init>
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	2600      	movs	r6, #0
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	f855 3b04 	ldr.w	r3, [r5], #4
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	08003f74 	.word	0x08003f74
 80033ac:	08003f74 	.word	0x08003f74
 80033b0:	08003f74 	.word	0x08003f74
 80033b4:	08003f78 	.word	0x08003f78

080033b8 <__retarget_lock_init_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_acquire_recursive>:
 80033ba:	4770      	bx	lr

080033bc <__retarget_lock_release_recursive>:
 80033bc:	4770      	bx	lr
	...

080033c0 <_free_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4605      	mov	r5, r0
 80033c4:	2900      	cmp	r1, #0
 80033c6:	d041      	beq.n	800344c <_free_r+0x8c>
 80033c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033cc:	1f0c      	subs	r4, r1, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bfb8      	it	lt
 80033d2:	18e4      	addlt	r4, r4, r3
 80033d4:	f000 f8e0 	bl	8003598 <__malloc_lock>
 80033d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003450 <_free_r+0x90>)
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	b933      	cbnz	r3, 80033ec <_free_r+0x2c>
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	6014      	str	r4, [r2, #0]
 80033e2:	4628      	mov	r0, r5
 80033e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e8:	f000 b8dc 	b.w	80035a4 <__malloc_unlock>
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	d908      	bls.n	8003402 <_free_r+0x42>
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	1821      	adds	r1, r4, r0
 80033f4:	428b      	cmp	r3, r1
 80033f6:	bf01      	itttt	eq
 80033f8:	6819      	ldreq	r1, [r3, #0]
 80033fa:	685b      	ldreq	r3, [r3, #4]
 80033fc:	1809      	addeq	r1, r1, r0
 80033fe:	6021      	streq	r1, [r4, #0]
 8003400:	e7ed      	b.n	80033de <_free_r+0x1e>
 8003402:	461a      	mov	r2, r3
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b10b      	cbz	r3, 800340c <_free_r+0x4c>
 8003408:	42a3      	cmp	r3, r4
 800340a:	d9fa      	bls.n	8003402 <_free_r+0x42>
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	1850      	adds	r0, r2, r1
 8003410:	42a0      	cmp	r0, r4
 8003412:	d10b      	bne.n	800342c <_free_r+0x6c>
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	4401      	add	r1, r0
 8003418:	1850      	adds	r0, r2, r1
 800341a:	4283      	cmp	r3, r0
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	d1e0      	bne.n	80033e2 <_free_r+0x22>
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	4408      	add	r0, r1
 8003428:	6010      	str	r0, [r2, #0]
 800342a:	e7da      	b.n	80033e2 <_free_r+0x22>
 800342c:	d902      	bls.n	8003434 <_free_r+0x74>
 800342e:	230c      	movs	r3, #12
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	e7d6      	b.n	80033e2 <_free_r+0x22>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	1821      	adds	r1, r4, r0
 8003438:	428b      	cmp	r3, r1
 800343a:	bf04      	itt	eq
 800343c:	6819      	ldreq	r1, [r3, #0]
 800343e:	685b      	ldreq	r3, [r3, #4]
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	bf04      	itt	eq
 8003444:	1809      	addeq	r1, r1, r0
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	6054      	str	r4, [r2, #4]
 800344a:	e7ca      	b.n	80033e2 <_free_r+0x22>
 800344c:	bd38      	pop	{r3, r4, r5, pc}
 800344e:	bf00      	nop
 8003450:	20000274 	.word	0x20000274

08003454 <sbrk_aligned>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4e0f      	ldr	r6, [pc, #60]	@ (8003494 <sbrk_aligned+0x40>)
 8003458:	460c      	mov	r4, r1
 800345a:	6831      	ldr	r1, [r6, #0]
 800345c:	4605      	mov	r5, r0
 800345e:	b911      	cbnz	r1, 8003466 <sbrk_aligned+0x12>
 8003460:	f000 fcb4 	bl	8003dcc <_sbrk_r>
 8003464:	6030      	str	r0, [r6, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 fcaf 	bl	8003dcc <_sbrk_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d103      	bne.n	800347a <sbrk_aligned+0x26>
 8003472:	f04f 34ff 	mov.w	r4, #4294967295
 8003476:	4620      	mov	r0, r4
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	1cc4      	adds	r4, r0, #3
 800347c:	f024 0403 	bic.w	r4, r4, #3
 8003480:	42a0      	cmp	r0, r4
 8003482:	d0f8      	beq.n	8003476 <sbrk_aligned+0x22>
 8003484:	1a21      	subs	r1, r4, r0
 8003486:	4628      	mov	r0, r5
 8003488:	f000 fca0 	bl	8003dcc <_sbrk_r>
 800348c:	3001      	adds	r0, #1
 800348e:	d1f2      	bne.n	8003476 <sbrk_aligned+0x22>
 8003490:	e7ef      	b.n	8003472 <sbrk_aligned+0x1e>
 8003492:	bf00      	nop
 8003494:	20000270 	.word	0x20000270

08003498 <_malloc_r>:
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800349c:	1ccd      	adds	r5, r1, #3
 800349e:	f025 0503 	bic.w	r5, r5, #3
 80034a2:	3508      	adds	r5, #8
 80034a4:	2d0c      	cmp	r5, #12
 80034a6:	bf38      	it	cc
 80034a8:	250c      	movcc	r5, #12
 80034aa:	2d00      	cmp	r5, #0
 80034ac:	4606      	mov	r6, r0
 80034ae:	db01      	blt.n	80034b4 <_malloc_r+0x1c>
 80034b0:	42a9      	cmp	r1, r5
 80034b2:	d904      	bls.n	80034be <_malloc_r+0x26>
 80034b4:	230c      	movs	r3, #12
 80034b6:	6033      	str	r3, [r6, #0]
 80034b8:	2000      	movs	r0, #0
 80034ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003594 <_malloc_r+0xfc>
 80034c2:	f000 f869 	bl	8003598 <__malloc_lock>
 80034c6:	f8d8 3000 	ldr.w	r3, [r8]
 80034ca:	461c      	mov	r4, r3
 80034cc:	bb44      	cbnz	r4, 8003520 <_malloc_r+0x88>
 80034ce:	4629      	mov	r1, r5
 80034d0:	4630      	mov	r0, r6
 80034d2:	f7ff ffbf 	bl	8003454 <sbrk_aligned>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	4604      	mov	r4, r0
 80034da:	d158      	bne.n	800358e <_malloc_r+0xf6>
 80034dc:	f8d8 4000 	ldr.w	r4, [r8]
 80034e0:	4627      	mov	r7, r4
 80034e2:	2f00      	cmp	r7, #0
 80034e4:	d143      	bne.n	800356e <_malloc_r+0xd6>
 80034e6:	2c00      	cmp	r4, #0
 80034e8:	d04b      	beq.n	8003582 <_malloc_r+0xea>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	4639      	mov	r1, r7
 80034ee:	4630      	mov	r0, r6
 80034f0:	eb04 0903 	add.w	r9, r4, r3
 80034f4:	f000 fc6a 	bl	8003dcc <_sbrk_r>
 80034f8:	4581      	cmp	r9, r0
 80034fa:	d142      	bne.n	8003582 <_malloc_r+0xea>
 80034fc:	6821      	ldr	r1, [r4, #0]
 80034fe:	1a6d      	subs	r5, r5, r1
 8003500:	4629      	mov	r1, r5
 8003502:	4630      	mov	r0, r6
 8003504:	f7ff ffa6 	bl	8003454 <sbrk_aligned>
 8003508:	3001      	adds	r0, #1
 800350a:	d03a      	beq.n	8003582 <_malloc_r+0xea>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	442b      	add	r3, r5
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	f8d8 3000 	ldr.w	r3, [r8]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	bb62      	cbnz	r2, 8003574 <_malloc_r+0xdc>
 800351a:	f8c8 7000 	str.w	r7, [r8]
 800351e:	e00f      	b.n	8003540 <_malloc_r+0xa8>
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	1b52      	subs	r2, r2, r5
 8003524:	d420      	bmi.n	8003568 <_malloc_r+0xd0>
 8003526:	2a0b      	cmp	r2, #11
 8003528:	d917      	bls.n	800355a <_malloc_r+0xc2>
 800352a:	1961      	adds	r1, r4, r5
 800352c:	42a3      	cmp	r3, r4
 800352e:	6025      	str	r5, [r4, #0]
 8003530:	bf18      	it	ne
 8003532:	6059      	strne	r1, [r3, #4]
 8003534:	6863      	ldr	r3, [r4, #4]
 8003536:	bf08      	it	eq
 8003538:	f8c8 1000 	streq.w	r1, [r8]
 800353c:	5162      	str	r2, [r4, r5]
 800353e:	604b      	str	r3, [r1, #4]
 8003540:	4630      	mov	r0, r6
 8003542:	f000 f82f 	bl	80035a4 <__malloc_unlock>
 8003546:	f104 000b 	add.w	r0, r4, #11
 800354a:	1d23      	adds	r3, r4, #4
 800354c:	f020 0007 	bic.w	r0, r0, #7
 8003550:	1ac2      	subs	r2, r0, r3
 8003552:	bf1c      	itt	ne
 8003554:	1a1b      	subne	r3, r3, r0
 8003556:	50a3      	strne	r3, [r4, r2]
 8003558:	e7af      	b.n	80034ba <_malloc_r+0x22>
 800355a:	6862      	ldr	r2, [r4, #4]
 800355c:	42a3      	cmp	r3, r4
 800355e:	bf0c      	ite	eq
 8003560:	f8c8 2000 	streq.w	r2, [r8]
 8003564:	605a      	strne	r2, [r3, #4]
 8003566:	e7eb      	b.n	8003540 <_malloc_r+0xa8>
 8003568:	4623      	mov	r3, r4
 800356a:	6864      	ldr	r4, [r4, #4]
 800356c:	e7ae      	b.n	80034cc <_malloc_r+0x34>
 800356e:	463c      	mov	r4, r7
 8003570:	687f      	ldr	r7, [r7, #4]
 8003572:	e7b6      	b.n	80034e2 <_malloc_r+0x4a>
 8003574:	461a      	mov	r2, r3
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	42a3      	cmp	r3, r4
 800357a:	d1fb      	bne.n	8003574 <_malloc_r+0xdc>
 800357c:	2300      	movs	r3, #0
 800357e:	6053      	str	r3, [r2, #4]
 8003580:	e7de      	b.n	8003540 <_malloc_r+0xa8>
 8003582:	230c      	movs	r3, #12
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	4630      	mov	r0, r6
 8003588:	f000 f80c 	bl	80035a4 <__malloc_unlock>
 800358c:	e794      	b.n	80034b8 <_malloc_r+0x20>
 800358e:	6005      	str	r5, [r0, #0]
 8003590:	e7d6      	b.n	8003540 <_malloc_r+0xa8>
 8003592:	bf00      	nop
 8003594:	20000274 	.word	0x20000274

08003598 <__malloc_lock>:
 8003598:	4801      	ldr	r0, [pc, #4]	@ (80035a0 <__malloc_lock+0x8>)
 800359a:	f7ff bf0e 	b.w	80033ba <__retarget_lock_acquire_recursive>
 800359e:	bf00      	nop
 80035a0:	2000026c 	.word	0x2000026c

080035a4 <__malloc_unlock>:
 80035a4:	4801      	ldr	r0, [pc, #4]	@ (80035ac <__malloc_unlock+0x8>)
 80035a6:	f7ff bf09 	b.w	80033bc <__retarget_lock_release_recursive>
 80035aa:	bf00      	nop
 80035ac:	2000026c 	.word	0x2000026c

080035b0 <__sfputc_r>:
 80035b0:	6893      	ldr	r3, [r2, #8]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	b410      	push	{r4}
 80035b8:	6093      	str	r3, [r2, #8]
 80035ba:	da08      	bge.n	80035ce <__sfputc_r+0x1e>
 80035bc:	6994      	ldr	r4, [r2, #24]
 80035be:	42a3      	cmp	r3, r4
 80035c0:	db01      	blt.n	80035c6 <__sfputc_r+0x16>
 80035c2:	290a      	cmp	r1, #10
 80035c4:	d103      	bne.n	80035ce <__sfputc_r+0x1e>
 80035c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ca:	f000 bb6b 	b.w	8003ca4 <__swbuf_r>
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	1c58      	adds	r0, r3, #1
 80035d2:	6010      	str	r0, [r2, #0]
 80035d4:	7019      	strb	r1, [r3, #0]
 80035d6:	4608      	mov	r0, r1
 80035d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035dc:	4770      	bx	lr

080035de <__sfputs_r>:
 80035de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e0:	4606      	mov	r6, r0
 80035e2:	460f      	mov	r7, r1
 80035e4:	4614      	mov	r4, r2
 80035e6:	18d5      	adds	r5, r2, r3
 80035e8:	42ac      	cmp	r4, r5
 80035ea:	d101      	bne.n	80035f0 <__sfputs_r+0x12>
 80035ec:	2000      	movs	r0, #0
 80035ee:	e007      	b.n	8003600 <__sfputs_r+0x22>
 80035f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f4:	463a      	mov	r2, r7
 80035f6:	4630      	mov	r0, r6
 80035f8:	f7ff ffda 	bl	80035b0 <__sfputc_r>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d1f3      	bne.n	80035e8 <__sfputs_r+0xa>
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003604 <_vfiprintf_r>:
 8003604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003608:	460d      	mov	r5, r1
 800360a:	b09d      	sub	sp, #116	@ 0x74
 800360c:	4614      	mov	r4, r2
 800360e:	4698      	mov	r8, r3
 8003610:	4606      	mov	r6, r0
 8003612:	b118      	cbz	r0, 800361c <_vfiprintf_r+0x18>
 8003614:	6a03      	ldr	r3, [r0, #32]
 8003616:	b90b      	cbnz	r3, 800361c <_vfiprintf_r+0x18>
 8003618:	f7ff fdca 	bl	80031b0 <__sinit>
 800361c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800361e:	07d9      	lsls	r1, r3, #31
 8003620:	d405      	bmi.n	800362e <_vfiprintf_r+0x2a>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	059a      	lsls	r2, r3, #22
 8003626:	d402      	bmi.n	800362e <_vfiprintf_r+0x2a>
 8003628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800362a:	f7ff fec6 	bl	80033ba <__retarget_lock_acquire_recursive>
 800362e:	89ab      	ldrh	r3, [r5, #12]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	d501      	bpl.n	8003638 <_vfiprintf_r+0x34>
 8003634:	692b      	ldr	r3, [r5, #16]
 8003636:	b99b      	cbnz	r3, 8003660 <_vfiprintf_r+0x5c>
 8003638:	4629      	mov	r1, r5
 800363a:	4630      	mov	r0, r6
 800363c:	f000 fb70 	bl	8003d20 <__swsetup_r>
 8003640:	b170      	cbz	r0, 8003660 <_vfiprintf_r+0x5c>
 8003642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003644:	07dc      	lsls	r4, r3, #31
 8003646:	d504      	bpl.n	8003652 <_vfiprintf_r+0x4e>
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	b01d      	add	sp, #116	@ 0x74
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	0598      	lsls	r0, r3, #22
 8003656:	d4f7      	bmi.n	8003648 <_vfiprintf_r+0x44>
 8003658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800365a:	f7ff feaf 	bl	80033bc <__retarget_lock_release_recursive>
 800365e:	e7f3      	b.n	8003648 <_vfiprintf_r+0x44>
 8003660:	2300      	movs	r3, #0
 8003662:	9309      	str	r3, [sp, #36]	@ 0x24
 8003664:	2320      	movs	r3, #32
 8003666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800366a:	f8cd 800c 	str.w	r8, [sp, #12]
 800366e:	2330      	movs	r3, #48	@ 0x30
 8003670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003820 <_vfiprintf_r+0x21c>
 8003674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003678:	f04f 0901 	mov.w	r9, #1
 800367c:	4623      	mov	r3, r4
 800367e:	469a      	mov	sl, r3
 8003680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003684:	b10a      	cbz	r2, 800368a <_vfiprintf_r+0x86>
 8003686:	2a25      	cmp	r2, #37	@ 0x25
 8003688:	d1f9      	bne.n	800367e <_vfiprintf_r+0x7a>
 800368a:	ebba 0b04 	subs.w	fp, sl, r4
 800368e:	d00b      	beq.n	80036a8 <_vfiprintf_r+0xa4>
 8003690:	465b      	mov	r3, fp
 8003692:	4622      	mov	r2, r4
 8003694:	4629      	mov	r1, r5
 8003696:	4630      	mov	r0, r6
 8003698:	f7ff ffa1 	bl	80035de <__sfputs_r>
 800369c:	3001      	adds	r0, #1
 800369e:	f000 80a7 	beq.w	80037f0 <_vfiprintf_r+0x1ec>
 80036a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036a4:	445a      	add	r2, fp
 80036a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80036a8:	f89a 3000 	ldrb.w	r3, [sl]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 809f 	beq.w	80037f0 <_vfiprintf_r+0x1ec>
 80036b2:	2300      	movs	r3, #0
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295
 80036b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036bc:	f10a 0a01 	add.w	sl, sl, #1
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	9307      	str	r3, [sp, #28]
 80036c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80036ca:	4654      	mov	r4, sl
 80036cc:	2205      	movs	r2, #5
 80036ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d2:	4853      	ldr	r0, [pc, #332]	@ (8003820 <_vfiprintf_r+0x21c>)
 80036d4:	f7fc fd7c 	bl	80001d0 <memchr>
 80036d8:	9a04      	ldr	r2, [sp, #16]
 80036da:	b9d8      	cbnz	r0, 8003714 <_vfiprintf_r+0x110>
 80036dc:	06d1      	lsls	r1, r2, #27
 80036de:	bf44      	itt	mi
 80036e0:	2320      	movmi	r3, #32
 80036e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036e6:	0713      	lsls	r3, r2, #28
 80036e8:	bf44      	itt	mi
 80036ea:	232b      	movmi	r3, #43	@ 0x2b
 80036ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f0:	f89a 3000 	ldrb.w	r3, [sl]
 80036f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80036f6:	d015      	beq.n	8003724 <_vfiprintf_r+0x120>
 80036f8:	9a07      	ldr	r2, [sp, #28]
 80036fa:	4654      	mov	r4, sl
 80036fc:	2000      	movs	r0, #0
 80036fe:	f04f 0c0a 	mov.w	ip, #10
 8003702:	4621      	mov	r1, r4
 8003704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003708:	3b30      	subs	r3, #48	@ 0x30
 800370a:	2b09      	cmp	r3, #9
 800370c:	d94b      	bls.n	80037a6 <_vfiprintf_r+0x1a2>
 800370e:	b1b0      	cbz	r0, 800373e <_vfiprintf_r+0x13a>
 8003710:	9207      	str	r2, [sp, #28]
 8003712:	e014      	b.n	800373e <_vfiprintf_r+0x13a>
 8003714:	eba0 0308 	sub.w	r3, r0, r8
 8003718:	fa09 f303 	lsl.w	r3, r9, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	46a2      	mov	sl, r4
 8003722:	e7d2      	b.n	80036ca <_vfiprintf_r+0xc6>
 8003724:	9b03      	ldr	r3, [sp, #12]
 8003726:	1d19      	adds	r1, r3, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	9103      	str	r1, [sp, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfbb      	ittet	lt
 8003730:	425b      	neglt	r3, r3
 8003732:	f042 0202 	orrlt.w	r2, r2, #2
 8003736:	9307      	strge	r3, [sp, #28]
 8003738:	9307      	strlt	r3, [sp, #28]
 800373a:	bfb8      	it	lt
 800373c:	9204      	strlt	r2, [sp, #16]
 800373e:	7823      	ldrb	r3, [r4, #0]
 8003740:	2b2e      	cmp	r3, #46	@ 0x2e
 8003742:	d10a      	bne.n	800375a <_vfiprintf_r+0x156>
 8003744:	7863      	ldrb	r3, [r4, #1]
 8003746:	2b2a      	cmp	r3, #42	@ 0x2a
 8003748:	d132      	bne.n	80037b0 <_vfiprintf_r+0x1ac>
 800374a:	9b03      	ldr	r3, [sp, #12]
 800374c:	1d1a      	adds	r2, r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	9203      	str	r2, [sp, #12]
 8003752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003756:	3402      	adds	r4, #2
 8003758:	9305      	str	r3, [sp, #20]
 800375a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003830 <_vfiprintf_r+0x22c>
 800375e:	7821      	ldrb	r1, [r4, #0]
 8003760:	2203      	movs	r2, #3
 8003762:	4650      	mov	r0, sl
 8003764:	f7fc fd34 	bl	80001d0 <memchr>
 8003768:	b138      	cbz	r0, 800377a <_vfiprintf_r+0x176>
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	eba0 000a 	sub.w	r0, r0, sl
 8003770:	2240      	movs	r2, #64	@ 0x40
 8003772:	4082      	lsls	r2, r0
 8003774:	4313      	orrs	r3, r2
 8003776:	3401      	adds	r4, #1
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377e:	4829      	ldr	r0, [pc, #164]	@ (8003824 <_vfiprintf_r+0x220>)
 8003780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003784:	2206      	movs	r2, #6
 8003786:	f7fc fd23 	bl	80001d0 <memchr>
 800378a:	2800      	cmp	r0, #0
 800378c:	d03f      	beq.n	800380e <_vfiprintf_r+0x20a>
 800378e:	4b26      	ldr	r3, [pc, #152]	@ (8003828 <_vfiprintf_r+0x224>)
 8003790:	bb1b      	cbnz	r3, 80037da <_vfiprintf_r+0x1d6>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	3307      	adds	r3, #7
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	3308      	adds	r3, #8
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a0:	443b      	add	r3, r7
 80037a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037a4:	e76a      	b.n	800367c <_vfiprintf_r+0x78>
 80037a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037aa:	460c      	mov	r4, r1
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7a8      	b.n	8003702 <_vfiprintf_r+0xfe>
 80037b0:	2300      	movs	r3, #0
 80037b2:	3401      	adds	r4, #1
 80037b4:	9305      	str	r3, [sp, #20]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4620      	mov	r0, r4
 80037be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c2:	3a30      	subs	r2, #48	@ 0x30
 80037c4:	2a09      	cmp	r2, #9
 80037c6:	d903      	bls.n	80037d0 <_vfiprintf_r+0x1cc>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0c6      	beq.n	800375a <_vfiprintf_r+0x156>
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	e7c4      	b.n	800375a <_vfiprintf_r+0x156>
 80037d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d4:	4604      	mov	r4, r0
 80037d6:	2301      	movs	r3, #1
 80037d8:	e7f0      	b.n	80037bc <_vfiprintf_r+0x1b8>
 80037da:	ab03      	add	r3, sp, #12
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462a      	mov	r2, r5
 80037e0:	4b12      	ldr	r3, [pc, #72]	@ (800382c <_vfiprintf_r+0x228>)
 80037e2:	a904      	add	r1, sp, #16
 80037e4:	4630      	mov	r0, r6
 80037e6:	f3af 8000 	nop.w
 80037ea:	4607      	mov	r7, r0
 80037ec:	1c78      	adds	r0, r7, #1
 80037ee:	d1d6      	bne.n	800379e <_vfiprintf_r+0x19a>
 80037f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037f2:	07d9      	lsls	r1, r3, #31
 80037f4:	d405      	bmi.n	8003802 <_vfiprintf_r+0x1fe>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	059a      	lsls	r2, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_vfiprintf_r+0x1fe>
 80037fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037fe:	f7ff fddd 	bl	80033bc <__retarget_lock_release_recursive>
 8003802:	89ab      	ldrh	r3, [r5, #12]
 8003804:	065b      	lsls	r3, r3, #25
 8003806:	f53f af1f 	bmi.w	8003648 <_vfiprintf_r+0x44>
 800380a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800380c:	e71e      	b.n	800364c <_vfiprintf_r+0x48>
 800380e:	ab03      	add	r3, sp, #12
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	462a      	mov	r2, r5
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <_vfiprintf_r+0x228>)
 8003816:	a904      	add	r1, sp, #16
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f879 	bl	8003910 <_printf_i>
 800381e:	e7e4      	b.n	80037ea <_vfiprintf_r+0x1e6>
 8003820:	08003f38 	.word	0x08003f38
 8003824:	08003f42 	.word	0x08003f42
 8003828:	00000000 	.word	0x00000000
 800382c:	080035df 	.word	0x080035df
 8003830:	08003f3e 	.word	0x08003f3e

08003834 <_printf_common>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	4616      	mov	r6, r2
 800383a:	4698      	mov	r8, r3
 800383c:	688a      	ldr	r2, [r1, #8]
 800383e:	690b      	ldr	r3, [r1, #16]
 8003840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003844:	4293      	cmp	r3, r2
 8003846:	bfb8      	it	lt
 8003848:	4613      	movlt	r3, r2
 800384a:	6033      	str	r3, [r6, #0]
 800384c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003850:	4607      	mov	r7, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b10a      	cbz	r2, 800385a <_printf_common+0x26>
 8003856:	3301      	adds	r3, #1
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	0699      	lsls	r1, r3, #26
 800385e:	bf42      	ittt	mi
 8003860:	6833      	ldrmi	r3, [r6, #0]
 8003862:	3302      	addmi	r3, #2
 8003864:	6033      	strmi	r3, [r6, #0]
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	f015 0506 	ands.w	r5, r5, #6
 800386c:	d106      	bne.n	800387c <_printf_common+0x48>
 800386e:	f104 0a19 	add.w	sl, r4, #25
 8003872:	68e3      	ldr	r3, [r4, #12]
 8003874:	6832      	ldr	r2, [r6, #0]
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	42ab      	cmp	r3, r5
 800387a:	dc26      	bgt.n	80038ca <_printf_common+0x96>
 800387c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003880:	6822      	ldr	r2, [r4, #0]
 8003882:	3b00      	subs	r3, #0
 8003884:	bf18      	it	ne
 8003886:	2301      	movne	r3, #1
 8003888:	0692      	lsls	r2, r2, #26
 800388a:	d42b      	bmi.n	80038e4 <_printf_common+0xb0>
 800388c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003890:	4641      	mov	r1, r8
 8003892:	4638      	mov	r0, r7
 8003894:	47c8      	blx	r9
 8003896:	3001      	adds	r0, #1
 8003898:	d01e      	beq.n	80038d8 <_printf_common+0xa4>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	6922      	ldr	r2, [r4, #16]
 800389e:	f003 0306 	and.w	r3, r3, #6
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf02      	ittt	eq
 80038a6:	68e5      	ldreq	r5, [r4, #12]
 80038a8:	6833      	ldreq	r3, [r6, #0]
 80038aa:	1aed      	subeq	r5, r5, r3
 80038ac:	68a3      	ldr	r3, [r4, #8]
 80038ae:	bf0c      	ite	eq
 80038b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b4:	2500      	movne	r5, #0
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bfc4      	itt	gt
 80038ba:	1a9b      	subgt	r3, r3, r2
 80038bc:	18ed      	addgt	r5, r5, r3
 80038be:	2600      	movs	r6, #0
 80038c0:	341a      	adds	r4, #26
 80038c2:	42b5      	cmp	r5, r6
 80038c4:	d11a      	bne.n	80038fc <_printf_common+0xc8>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e008      	b.n	80038dc <_printf_common+0xa8>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4652      	mov	r2, sl
 80038ce:	4641      	mov	r1, r8
 80038d0:	4638      	mov	r0, r7
 80038d2:	47c8      	blx	r9
 80038d4:	3001      	adds	r0, #1
 80038d6:	d103      	bne.n	80038e0 <_printf_common+0xac>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7c6      	b.n	8003872 <_printf_common+0x3e>
 80038e4:	18e1      	adds	r1, r4, r3
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	2030      	movs	r0, #48	@ 0x30
 80038ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038ee:	4422      	add	r2, r4
 80038f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038f8:	3302      	adds	r3, #2
 80038fa:	e7c7      	b.n	800388c <_printf_common+0x58>
 80038fc:	2301      	movs	r3, #1
 80038fe:	4622      	mov	r2, r4
 8003900:	4641      	mov	r1, r8
 8003902:	4638      	mov	r0, r7
 8003904:	47c8      	blx	r9
 8003906:	3001      	adds	r0, #1
 8003908:	d0e6      	beq.n	80038d8 <_printf_common+0xa4>
 800390a:	3601      	adds	r6, #1
 800390c:	e7d9      	b.n	80038c2 <_printf_common+0x8e>
	...

08003910 <_printf_i>:
 8003910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	7e0f      	ldrb	r7, [r1, #24]
 8003916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003918:	2f78      	cmp	r7, #120	@ 0x78
 800391a:	4691      	mov	r9, r2
 800391c:	4680      	mov	r8, r0
 800391e:	460c      	mov	r4, r1
 8003920:	469a      	mov	sl, r3
 8003922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003926:	d807      	bhi.n	8003938 <_printf_i+0x28>
 8003928:	2f62      	cmp	r7, #98	@ 0x62
 800392a:	d80a      	bhi.n	8003942 <_printf_i+0x32>
 800392c:	2f00      	cmp	r7, #0
 800392e:	f000 80d1 	beq.w	8003ad4 <_printf_i+0x1c4>
 8003932:	2f58      	cmp	r7, #88	@ 0x58
 8003934:	f000 80b8 	beq.w	8003aa8 <_printf_i+0x198>
 8003938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800393c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003940:	e03a      	b.n	80039b8 <_printf_i+0xa8>
 8003942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003946:	2b15      	cmp	r3, #21
 8003948:	d8f6      	bhi.n	8003938 <_printf_i+0x28>
 800394a:	a101      	add	r1, pc, #4	@ (adr r1, 8003950 <_printf_i+0x40>)
 800394c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039bd 	.word	0x080039bd
 8003958:	08003939 	.word	0x08003939
 800395c:	08003939 	.word	0x08003939
 8003960:	08003939 	.word	0x08003939
 8003964:	08003939 	.word	0x08003939
 8003968:	080039bd 	.word	0x080039bd
 800396c:	08003939 	.word	0x08003939
 8003970:	08003939 	.word	0x08003939
 8003974:	08003939 	.word	0x08003939
 8003978:	08003939 	.word	0x08003939
 800397c:	08003abb 	.word	0x08003abb
 8003980:	080039e7 	.word	0x080039e7
 8003984:	08003a75 	.word	0x08003a75
 8003988:	08003939 	.word	0x08003939
 800398c:	08003939 	.word	0x08003939
 8003990:	08003add 	.word	0x08003add
 8003994:	08003939 	.word	0x08003939
 8003998:	080039e7 	.word	0x080039e7
 800399c:	08003939 	.word	0x08003939
 80039a0:	08003939 	.word	0x08003939
 80039a4:	08003a7d 	.word	0x08003a7d
 80039a8:	6833      	ldr	r3, [r6, #0]
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6032      	str	r2, [r6, #0]
 80039b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b8:	2301      	movs	r3, #1
 80039ba:	e09c      	b.n	8003af6 <_printf_i+0x1e6>
 80039bc:	6833      	ldr	r3, [r6, #0]
 80039be:	6820      	ldr	r0, [r4, #0]
 80039c0:	1d19      	adds	r1, r3, #4
 80039c2:	6031      	str	r1, [r6, #0]
 80039c4:	0606      	lsls	r6, r0, #24
 80039c6:	d501      	bpl.n	80039cc <_printf_i+0xbc>
 80039c8:	681d      	ldr	r5, [r3, #0]
 80039ca:	e003      	b.n	80039d4 <_printf_i+0xc4>
 80039cc:	0645      	lsls	r5, r0, #25
 80039ce:	d5fb      	bpl.n	80039c8 <_printf_i+0xb8>
 80039d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	da03      	bge.n	80039e0 <_printf_i+0xd0>
 80039d8:	232d      	movs	r3, #45	@ 0x2d
 80039da:	426d      	negs	r5, r5
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039e0:	4858      	ldr	r0, [pc, #352]	@ (8003b44 <_printf_i+0x234>)
 80039e2:	230a      	movs	r3, #10
 80039e4:	e011      	b.n	8003a0a <_printf_i+0xfa>
 80039e6:	6821      	ldr	r1, [r4, #0]
 80039e8:	6833      	ldr	r3, [r6, #0]
 80039ea:	0608      	lsls	r0, r1, #24
 80039ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80039f0:	d402      	bmi.n	80039f8 <_printf_i+0xe8>
 80039f2:	0649      	lsls	r1, r1, #25
 80039f4:	bf48      	it	mi
 80039f6:	b2ad      	uxthmi	r5, r5
 80039f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80039fa:	4852      	ldr	r0, [pc, #328]	@ (8003b44 <_printf_i+0x234>)
 80039fc:	6033      	str	r3, [r6, #0]
 80039fe:	bf14      	ite	ne
 8003a00:	230a      	movne	r3, #10
 8003a02:	2308      	moveq	r3, #8
 8003a04:	2100      	movs	r1, #0
 8003a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a0a:	6866      	ldr	r6, [r4, #4]
 8003a0c:	60a6      	str	r6, [r4, #8]
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	db05      	blt.n	8003a1e <_printf_i+0x10e>
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	432e      	orrs	r6, r5
 8003a16:	f021 0104 	bic.w	r1, r1, #4
 8003a1a:	6021      	str	r1, [r4, #0]
 8003a1c:	d04b      	beq.n	8003ab6 <_printf_i+0x1a6>
 8003a1e:	4616      	mov	r6, r2
 8003a20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a24:	fb03 5711 	mls	r7, r3, r1, r5
 8003a28:	5dc7      	ldrb	r7, [r0, r7]
 8003a2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2e:	462f      	mov	r7, r5
 8003a30:	42bb      	cmp	r3, r7
 8003a32:	460d      	mov	r5, r1
 8003a34:	d9f4      	bls.n	8003a20 <_printf_i+0x110>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d10b      	bne.n	8003a52 <_printf_i+0x142>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	07df      	lsls	r7, r3, #31
 8003a3e:	d508      	bpl.n	8003a52 <_printf_i+0x142>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6861      	ldr	r1, [r4, #4]
 8003a44:	4299      	cmp	r1, r3
 8003a46:	bfde      	ittt	le
 8003a48:	2330      	movle	r3, #48	@ 0x30
 8003a4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a52:	1b92      	subs	r2, r2, r6
 8003a54:	6122      	str	r2, [r4, #16]
 8003a56:	f8cd a000 	str.w	sl, [sp]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	aa03      	add	r2, sp, #12
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4640      	mov	r0, r8
 8003a62:	f7ff fee7 	bl	8003834 <_printf_common>
 8003a66:	3001      	adds	r0, #1
 8003a68:	d14a      	bne.n	8003b00 <_printf_i+0x1f0>
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	b004      	add	sp, #16
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	4832      	ldr	r0, [pc, #200]	@ (8003b48 <_printf_i+0x238>)
 8003a7e:	2778      	movs	r7, #120	@ 0x78
 8003a80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	061f      	lsls	r7, r3, #24
 8003a8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a8e:	d402      	bmi.n	8003a96 <_printf_i+0x186>
 8003a90:	065f      	lsls	r7, r3, #25
 8003a92:	bf48      	it	mi
 8003a94:	b2ad      	uxthmi	r5, r5
 8003a96:	6031      	str	r1, [r6, #0]
 8003a98:	07d9      	lsls	r1, r3, #31
 8003a9a:	bf44      	itt	mi
 8003a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa0:	6023      	strmi	r3, [r4, #0]
 8003aa2:	b11d      	cbz	r5, 8003aac <_printf_i+0x19c>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	e7ad      	b.n	8003a04 <_printf_i+0xf4>
 8003aa8:	4826      	ldr	r0, [pc, #152]	@ (8003b44 <_printf_i+0x234>)
 8003aaa:	e7e9      	b.n	8003a80 <_printf_i+0x170>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	e7f6      	b.n	8003aa4 <_printf_i+0x194>
 8003ab6:	4616      	mov	r6, r2
 8003ab8:	e7bd      	b.n	8003a36 <_printf_i+0x126>
 8003aba:	6833      	ldr	r3, [r6, #0]
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	6961      	ldr	r1, [r4, #20]
 8003ac0:	1d18      	adds	r0, r3, #4
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	062e      	lsls	r6, r5, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x1be>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x1c4>
 8003ace:	0668      	lsls	r0, r5, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x1ba>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	4616      	mov	r6, r2
 8003ada:	e7bc      	b.n	8003a56 <_printf_i+0x146>
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	6032      	str	r2, [r6, #0]
 8003ae2:	681e      	ldr	r6, [r3, #0]
 8003ae4:	6862      	ldr	r2, [r4, #4]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7fc fb71 	bl	80001d0 <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1e4>
 8003af0:	1b80      	subs	r0, r0, r6
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afe:	e7aa      	b.n	8003a56 <_printf_i+0x146>
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	4632      	mov	r2, r6
 8003b04:	4649      	mov	r1, r9
 8003b06:	4640      	mov	r0, r8
 8003b08:	47d0      	blx	sl
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0ad      	beq.n	8003a6a <_printf_i+0x15a>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x22c>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a6      	b.n	8003a6e <_printf_i+0x15e>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4632      	mov	r2, r6
 8003b24:	4649      	mov	r1, r9
 8003b26:	4640      	mov	r0, r8
 8003b28:	47d0      	blx	sl
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09d      	beq.n	8003a6a <_printf_i+0x15a>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	1a5b      	subs	r3, r3, r1
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x210>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x204>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0619 	add.w	r6, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x220>
 8003b44:	08003f49 	.word	0x08003f49
 8003b48:	08003f5a 	.word	0x08003f5a

08003b4c <__sflush_r>:
 8003b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	0716      	lsls	r6, r2, #28
 8003b56:	4605      	mov	r5, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	d454      	bmi.n	8003c06 <__sflush_r+0xba>
 8003b5c:	684b      	ldr	r3, [r1, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	dc02      	bgt.n	8003b68 <__sflush_r+0x1c>
 8003b62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	dd48      	ble.n	8003bfa <__sflush_r+0xae>
 8003b68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b6a:	2e00      	cmp	r6, #0
 8003b6c:	d045      	beq.n	8003bfa <__sflush_r+0xae>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b74:	682f      	ldr	r7, [r5, #0]
 8003b76:	6a21      	ldr	r1, [r4, #32]
 8003b78:	602b      	str	r3, [r5, #0]
 8003b7a:	d030      	beq.n	8003bde <__sflush_r+0x92>
 8003b7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	0759      	lsls	r1, r3, #29
 8003b82:	d505      	bpl.n	8003b90 <__sflush_r+0x44>
 8003b84:	6863      	ldr	r3, [r4, #4]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b8a:	b10b      	cbz	r3, 8003b90 <__sflush_r+0x44>
 8003b8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b8e:	1ad2      	subs	r2, r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b94:	6a21      	ldr	r1, [r4, #32]
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b0      	blx	r6
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	d106      	bne.n	8003bae <__sflush_r+0x62>
 8003ba0:	6829      	ldr	r1, [r5, #0]
 8003ba2:	291d      	cmp	r1, #29
 8003ba4:	d82b      	bhi.n	8003bfe <__sflush_r+0xb2>
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <__sflush_r+0x104>)
 8003ba8:	40ca      	lsrs	r2, r1
 8003baa:	07d6      	lsls	r6, r2, #31
 8003bac:	d527      	bpl.n	8003bfe <__sflush_r+0xb2>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	6062      	str	r2, [r4, #4]
 8003bb2:	04d9      	lsls	r1, r3, #19
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	d504      	bpl.n	8003bc4 <__sflush_r+0x78>
 8003bba:	1c42      	adds	r2, r0, #1
 8003bbc:	d101      	bne.n	8003bc2 <__sflush_r+0x76>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	b903      	cbnz	r3, 8003bc4 <__sflush_r+0x78>
 8003bc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bc6:	602f      	str	r7, [r5, #0]
 8003bc8:	b1b9      	cbz	r1, 8003bfa <__sflush_r+0xae>
 8003bca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bce:	4299      	cmp	r1, r3
 8003bd0:	d002      	beq.n	8003bd8 <__sflush_r+0x8c>
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7ff fbf4 	bl	80033c0 <_free_r>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bdc:	e00d      	b.n	8003bfa <__sflush_r+0xae>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4628      	mov	r0, r5
 8003be2:	47b0      	blx	r6
 8003be4:	4602      	mov	r2, r0
 8003be6:	1c50      	adds	r0, r2, #1
 8003be8:	d1c9      	bne.n	8003b7e <__sflush_r+0x32>
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0c6      	beq.n	8003b7e <__sflush_r+0x32>
 8003bf0:	2b1d      	cmp	r3, #29
 8003bf2:	d001      	beq.n	8003bf8 <__sflush_r+0xac>
 8003bf4:	2b16      	cmp	r3, #22
 8003bf6:	d11e      	bne.n	8003c36 <__sflush_r+0xea>
 8003bf8:	602f      	str	r7, [r5, #0]
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e022      	b.n	8003c44 <__sflush_r+0xf8>
 8003bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c02:	b21b      	sxth	r3, r3
 8003c04:	e01b      	b.n	8003c3e <__sflush_r+0xf2>
 8003c06:	690f      	ldr	r7, [r1, #16]
 8003c08:	2f00      	cmp	r7, #0
 8003c0a:	d0f6      	beq.n	8003bfa <__sflush_r+0xae>
 8003c0c:	0793      	lsls	r3, r2, #30
 8003c0e:	680e      	ldr	r6, [r1, #0]
 8003c10:	bf08      	it	eq
 8003c12:	694b      	ldreq	r3, [r1, #20]
 8003c14:	600f      	str	r7, [r1, #0]
 8003c16:	bf18      	it	ne
 8003c18:	2300      	movne	r3, #0
 8003c1a:	eba6 0807 	sub.w	r8, r6, r7
 8003c1e:	608b      	str	r3, [r1, #8]
 8003c20:	f1b8 0f00 	cmp.w	r8, #0
 8003c24:	dde9      	ble.n	8003bfa <__sflush_r+0xae>
 8003c26:	6a21      	ldr	r1, [r4, #32]
 8003c28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c2a:	4643      	mov	r3, r8
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	4628      	mov	r0, r5
 8003c30:	47b0      	blx	r6
 8003c32:	2800      	cmp	r0, #0
 8003c34:	dc08      	bgt.n	8003c48 <__sflush_r+0xfc>
 8003c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	4407      	add	r7, r0
 8003c4a:	eba8 0800 	sub.w	r8, r8, r0
 8003c4e:	e7e7      	b.n	8003c20 <__sflush_r+0xd4>
 8003c50:	20400001 	.word	0x20400001

08003c54 <_fflush_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	b913      	cbnz	r3, 8003c64 <_fflush_r+0x10>
 8003c5e:	2500      	movs	r5, #0
 8003c60:	4628      	mov	r0, r5
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	b118      	cbz	r0, 8003c6e <_fflush_r+0x1a>
 8003c66:	6a03      	ldr	r3, [r0, #32]
 8003c68:	b90b      	cbnz	r3, 8003c6e <_fflush_r+0x1a>
 8003c6a:	f7ff faa1 	bl	80031b0 <__sinit>
 8003c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f3      	beq.n	8003c5e <_fflush_r+0xa>
 8003c76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c78:	07d0      	lsls	r0, r2, #31
 8003c7a:	d404      	bmi.n	8003c86 <_fflush_r+0x32>
 8003c7c:	0599      	lsls	r1, r3, #22
 8003c7e:	d402      	bmi.n	8003c86 <_fflush_r+0x32>
 8003c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c82:	f7ff fb9a 	bl	80033ba <__retarget_lock_acquire_recursive>
 8003c86:	4628      	mov	r0, r5
 8003c88:	4621      	mov	r1, r4
 8003c8a:	f7ff ff5f 	bl	8003b4c <__sflush_r>
 8003c8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c90:	07da      	lsls	r2, r3, #31
 8003c92:	4605      	mov	r5, r0
 8003c94:	d4e4      	bmi.n	8003c60 <_fflush_r+0xc>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	059b      	lsls	r3, r3, #22
 8003c9a:	d4e1      	bmi.n	8003c60 <_fflush_r+0xc>
 8003c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c9e:	f7ff fb8d 	bl	80033bc <__retarget_lock_release_recursive>
 8003ca2:	e7dd      	b.n	8003c60 <_fflush_r+0xc>

08003ca4 <__swbuf_r>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	460e      	mov	r6, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	4605      	mov	r5, r0
 8003cac:	b118      	cbz	r0, 8003cb6 <__swbuf_r+0x12>
 8003cae:	6a03      	ldr	r3, [r0, #32]
 8003cb0:	b90b      	cbnz	r3, 8003cb6 <__swbuf_r+0x12>
 8003cb2:	f7ff fa7d 	bl	80031b0 <__sinit>
 8003cb6:	69a3      	ldr	r3, [r4, #24]
 8003cb8:	60a3      	str	r3, [r4, #8]
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	071a      	lsls	r2, r3, #28
 8003cbe:	d501      	bpl.n	8003cc4 <__swbuf_r+0x20>
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	b943      	cbnz	r3, 8003cd6 <__swbuf_r+0x32>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 f82a 	bl	8003d20 <__swsetup_r>
 8003ccc:	b118      	cbz	r0, 8003cd6 <__swbuf_r+0x32>
 8003cce:	f04f 37ff 	mov.w	r7, #4294967295
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	6922      	ldr	r2, [r4, #16]
 8003cda:	1a98      	subs	r0, r3, r2
 8003cdc:	6963      	ldr	r3, [r4, #20]
 8003cde:	b2f6      	uxtb	r6, r6
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	4637      	mov	r7, r6
 8003ce4:	dc05      	bgt.n	8003cf2 <__swbuf_r+0x4e>
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f7ff ffb3 	bl	8003c54 <_fflush_r>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d1ed      	bne.n	8003cce <__swbuf_r+0x2a>
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	6022      	str	r2, [r4, #0]
 8003cfe:	701e      	strb	r6, [r3, #0]
 8003d00:	6962      	ldr	r2, [r4, #20]
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d004      	beq.n	8003d12 <__swbuf_r+0x6e>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d5e1      	bpl.n	8003cd2 <__swbuf_r+0x2e>
 8003d0e:	2e0a      	cmp	r6, #10
 8003d10:	d1df      	bne.n	8003cd2 <__swbuf_r+0x2e>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4628      	mov	r0, r5
 8003d16:	f7ff ff9d 	bl	8003c54 <_fflush_r>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0d9      	beq.n	8003cd2 <__swbuf_r+0x2e>
 8003d1e:	e7d6      	b.n	8003cce <__swbuf_r+0x2a>

08003d20 <__swsetup_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4b29      	ldr	r3, [pc, #164]	@ (8003dc8 <__swsetup_r+0xa8>)
 8003d24:	4605      	mov	r5, r0
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	460c      	mov	r4, r1
 8003d2a:	b118      	cbz	r0, 8003d34 <__swsetup_r+0x14>
 8003d2c:	6a03      	ldr	r3, [r0, #32]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <__swsetup_r+0x14>
 8003d30:	f7ff fa3e 	bl	80031b0 <__sinit>
 8003d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d38:	0719      	lsls	r1, r3, #28
 8003d3a:	d422      	bmi.n	8003d82 <__swsetup_r+0x62>
 8003d3c:	06da      	lsls	r2, r3, #27
 8003d3e:	d407      	bmi.n	8003d50 <__swsetup_r+0x30>
 8003d40:	2209      	movs	r2, #9
 8003d42:	602a      	str	r2, [r5, #0]
 8003d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4e:	e033      	b.n	8003db8 <__swsetup_r+0x98>
 8003d50:	0758      	lsls	r0, r3, #29
 8003d52:	d512      	bpl.n	8003d7a <__swsetup_r+0x5a>
 8003d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d56:	b141      	cbz	r1, 8003d6a <__swsetup_r+0x4a>
 8003d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d002      	beq.n	8003d66 <__swsetup_r+0x46>
 8003d60:	4628      	mov	r0, r5
 8003d62:	f7ff fb2d 	bl	80033c0 <_free_r>
 8003d66:	2300      	movs	r3, #0
 8003d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	2300      	movs	r3, #0
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	b94b      	cbnz	r3, 8003d9a <__swsetup_r+0x7a>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d90:	d003      	beq.n	8003d9a <__swsetup_r+0x7a>
 8003d92:	4621      	mov	r1, r4
 8003d94:	4628      	mov	r0, r5
 8003d96:	f000 f84f 	bl	8003e38 <__smakebuf_r>
 8003d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9e:	f013 0201 	ands.w	r2, r3, #1
 8003da2:	d00a      	beq.n	8003dba <__swsetup_r+0x9a>
 8003da4:	2200      	movs	r2, #0
 8003da6:	60a2      	str	r2, [r4, #8]
 8003da8:	6962      	ldr	r2, [r4, #20]
 8003daa:	4252      	negs	r2, r2
 8003dac:	61a2      	str	r2, [r4, #24]
 8003dae:	6922      	ldr	r2, [r4, #16]
 8003db0:	b942      	cbnz	r2, 8003dc4 <__swsetup_r+0xa4>
 8003db2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003db6:	d1c5      	bne.n	8003d44 <__swsetup_r+0x24>
 8003db8:	bd38      	pop	{r3, r4, r5, pc}
 8003dba:	0799      	lsls	r1, r3, #30
 8003dbc:	bf58      	it	pl
 8003dbe:	6962      	ldrpl	r2, [r4, #20]
 8003dc0:	60a2      	str	r2, [r4, #8]
 8003dc2:	e7f4      	b.n	8003dae <__swsetup_r+0x8e>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e7f7      	b.n	8003db8 <__swsetup_r+0x98>
 8003dc8:	20000018 	.word	0x20000018

08003dcc <_sbrk_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4d06      	ldr	r5, [pc, #24]	@ (8003de8 <_sbrk_r+0x1c>)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	602b      	str	r3, [r5, #0]
 8003dd8:	f7fc ff44 	bl	8000c64 <_sbrk>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_sbrk_r+0x1a>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_sbrk_r+0x1a>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	20000268 	.word	0x20000268

08003dec <__swhatbuf_r>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	2900      	cmp	r1, #0
 8003df6:	b096      	sub	sp, #88	@ 0x58
 8003df8:	4615      	mov	r5, r2
 8003dfa:	461e      	mov	r6, r3
 8003dfc:	da0d      	bge.n	8003e1a <__swhatbuf_r+0x2e>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	bf14      	ite	ne
 8003e0a:	2340      	movne	r3, #64	@ 0x40
 8003e0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e10:	2000      	movs	r0, #0
 8003e12:	6031      	str	r1, [r6, #0]
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	b016      	add	sp, #88	@ 0x58
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	466a      	mov	r2, sp
 8003e1c:	f000 f848 	bl	8003eb0 <_fstat_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	dbec      	blt.n	8003dfe <__swhatbuf_r+0x12>
 8003e24:	9901      	ldr	r1, [sp, #4]
 8003e26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e2e:	4259      	negs	r1, r3
 8003e30:	4159      	adcs	r1, r3
 8003e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e36:	e7eb      	b.n	8003e10 <__swhatbuf_r+0x24>

08003e38 <__smakebuf_r>:
 8003e38:	898b      	ldrh	r3, [r1, #12]
 8003e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e3c:	079d      	lsls	r5, r3, #30
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	d507      	bpl.n	8003e54 <__smakebuf_r+0x1c>
 8003e44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6163      	str	r3, [r4, #20]
 8003e50:	b003      	add	sp, #12
 8003e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e54:	ab01      	add	r3, sp, #4
 8003e56:	466a      	mov	r2, sp
 8003e58:	f7ff ffc8 	bl	8003dec <__swhatbuf_r>
 8003e5c:	9f00      	ldr	r7, [sp, #0]
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4639      	mov	r1, r7
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff fb18 	bl	8003498 <_malloc_r>
 8003e68:	b948      	cbnz	r0, 8003e7e <__smakebuf_r+0x46>
 8003e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6e:	059a      	lsls	r2, r3, #22
 8003e70:	d4ee      	bmi.n	8003e50 <__smakebuf_r+0x18>
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	f043 0302 	orr.w	r3, r3, #2
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	e7e2      	b.n	8003e44 <__smakebuf_r+0xc>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	6020      	str	r0, [r4, #0]
 8003e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	9b01      	ldr	r3, [sp, #4]
 8003e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e8e:	b15b      	cbz	r3, 8003ea8 <__smakebuf_r+0x70>
 8003e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 f81d 	bl	8003ed4 <_isatty_r>
 8003e9a:	b128      	cbz	r0, 8003ea8 <__smakebuf_r+0x70>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	431d      	orrs	r5, r3
 8003eac:	81a5      	strh	r5, [r4, #12]
 8003eae:	e7cf      	b.n	8003e50 <__smakebuf_r+0x18>

08003eb0 <_fstat_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d07      	ldr	r5, [pc, #28]	@ (8003ed0 <_fstat_r+0x20>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	602b      	str	r3, [r5, #0]
 8003ebe:	f7fc fea9 	bl	8000c14 <_fstat>
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d102      	bne.n	8003ecc <_fstat_r+0x1c>
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	b103      	cbz	r3, 8003ecc <_fstat_r+0x1c>
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	bd38      	pop	{r3, r4, r5, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000268 	.word	0x20000268

08003ed4 <_isatty_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d06      	ldr	r5, [pc, #24]	@ (8003ef0 <_isatty_r+0x1c>)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc fea8 	bl	8000c34 <_isatty>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_isatty_r+0x1a>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_isatty_r+0x1a>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000268 	.word	0x20000268

08003ef4 <_init>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr

08003f00 <_fini>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	bf00      	nop
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr
